const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const { v4: uuidv4 } = require('uuid');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks_db',
  password: 'postgres',
  port: 5432,
});

async function resetAdmin() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('BEGIN');
    
    // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏...');
    const sessionsResult = await client.query('DELETE FROM user_sessions');
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: ${sessionsResult.rowCount}`);
    
    // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResult = await client.query('DELETE FROM users');
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResult.rowCount}`);
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    const adminData = {
      id: uuidv4(),
      name: 'Administrator',
      email: 'axelencore@mail.ru',
      password: 'Ad580dc6axelencore',
      role: 'admin'
    };
    
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(adminData.password, saltRounds);
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const insertResult = await client.query(`
      INSERT INTO users (
        id, name, email, password_hash, role, 
        created_at, updated_at
      ) VALUES (
        $1, $2, $3, $4, $5, 
        NOW(), NOW()
      ) RETURNING id, name, email, role
    `, [
      adminData.id,
      adminData.name,
      adminData.email,
      hashedPassword,
      adminData.role
    ]);
    
    const newAdmin = insertResult.rows[0];
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');
    
    console.log('\nüéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:');
    console.log(`üìß Email: ${newAdmin.email}`);
    console.log(`üë§ –ò–º—è: ${newAdmin.name}`);
    console.log(`üîë –†–æ–ª—å: ${newAdmin.role}`);
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${newAdmin.approval_status}`);
    console.log(`üü¢ –ê–∫—Ç–∏–≤–µ–Ω: ${newAdmin.is_active}`);
    console.log(`\nüîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:`);
    console.log(`üìß Email: ${adminData.email}`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å: ${adminData.password}`);
    
  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await client.query('ROLLBACK');
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    process.exit(1);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
resetAdmin();