#!/usr/bin/env node

// =====================================================
// –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–• –ò–ó TEMPDB –í MYSQL
// =====================================================

const fs = require('fs');
const path = require('path');
const mysql = require('mysql2/promise');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MySQL
const mysqlConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  port: parseInt(process.env.MYSQL_PORT) || 3306,
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  database: process.env.MYSQL_DATABASE || 'encore_tasks_db',
  charset: 'utf8mb4',
  timezone: '+00:00',
  multipleStatements: true
};

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É tempDb
const tempDbPath = path.join(__dirname, '../database/temp-db.json');

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID v4
 */
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è MySQL
 */
function formatDateForMySQL(date) {
  if (!date) return null;
  if (typeof date === 'string') {
    date = new Date(date);
  }
  return date.toISOString().slice(0, 19).replace('T', ' ');
}

/**
 * –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ tempDb
 */
function readTempDb() {
  try {
    if (!fs.existsSync(tempDbPath)) {
      console.log('‚ö†Ô∏è  –§–∞–π–ª temp-db.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }
    
    const data = fs.readFileSync(tempDbPath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è temp-db.json:', error);
    return null;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
 */
async function createConnection() {
  try {
    const connection = await mysql.createConnection(mysqlConfig);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return connection;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL:', error);
    throw error;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MySQL
 */
async function initializeDatabase(connection) {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, '../database/mysql_schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ö–µ–º—É
    await connection.query(schema);
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MySQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function migrateUsers(connection, tempData) {
  if (!tempData.users || tempData.users.length === 0) {
    console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  
  for (const user of tempData.users) {
    try {
      const query = `
        INSERT INTO users (
          id, name, email, password_hash, role, approval_status, 
          avatar, telegram_chat_id, telegram_username, notification_settings,
          last_login_at, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          name = VALUES(name),
          password_hash = VALUES(password_hash),
          role = VALUES(role),
          approval_status = VALUES(approval_status),
          updated_at = VALUES(updated_at)
      `;
      
      const params = [
        user.id || generateUUID(),
        user.name,
        user.email,
        user.password,
        user.role || 'user',
        user.approvalStatus || 'approved',
        user.avatar || null,
        user.telegramChatId || null,
        user.telegramUsername || null,
        JSON.stringify(user.notificationSettings || {
          email: true,
          telegram: false,
          browser: true,
          taskAssigned: true,
          taskCompleted: true,
          projectUpdates: true
        }),
        formatDateForMySQL(user.lastLoginAt),
        formatDateForMySQL(user.createdAt || new Date()),
        formatDateForMySQL(user.updatedAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã
 */
async function migrateProjects(connection, tempData) {
  if (!tempData.projects || tempData.projects.length === 0) {
    console.log('‚ÑπÔ∏è  –ü—Ä–æ–µ–∫—Ç—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤...`);
  
  for (const project of tempData.projects) {
    try {
      const query = `
        INSERT INTO projects (
          id, name, description, color, creator_id, telegram_chat_id, 
          telegram_topic_id, is_archived, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          name = VALUES(name),
          description = VALUES(description),
          color = VALUES(color),
          updated_at = VALUES(updated_at)
      `;
      
      const params = [
        project.id || generateUUID(),
        project.name,
        project.description || null,
        project.color || '#6366f1',
        project.creatorId || 'admin-user-id',
        project.telegramChatId || null,
        project.telegramTopicId || null,
        project.isArchived || false,
        formatDateForMySQL(project.createdAt || new Date()),
        formatDateForMySQL(project.updatedAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –ü—Ä–æ–µ–∫—Ç ${project.name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${project.name}:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–æ—Å–∫–∏
 */
async function migrateBoards(connection, tempData) {
  if (!tempData.boards || tempData.boards.length === 0) {
    console.log('‚ÑπÔ∏è  –î–æ—Å–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.boards.length} –¥–æ—Å–æ–∫...`);
  
  for (const board of tempData.boards) {
    try {
      const query = `
        INSERT INTO boards (
          id, name, description, project_id, icon, position, 
          is_default, is_archived, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          name = VALUES(name),
          description = VALUES(description),
          icon = VALUES(icon),
          position = VALUES(position),
          updated_at = VALUES(updated_at)
      `;
      
      const params = [
        board.id || generateUUID(),
        board.name,
        board.description || null,
        board.projectId,
        board.icon || 'kanban',
        board.position || 0,
        board.isDefault || false,
        board.isArchived || false,
        formatDateForMySQL(board.createdAt || new Date()),
        formatDateForMySQL(board.updatedAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –î–æ—Å–∫–∞ ${board.name} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å–∫–∏ ${board.name}:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∏
 */
async function migrateColumns(connection, tempData) {
  if (!tempData.columns || tempData.columns.length === 0) {
    console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.columns.length} –∫–æ–ª–æ–Ω–æ–∫...`);
  
  for (const column of tempData.columns) {
    try {
      const query = `
        INSERT INTO columns (
          id, title, board_id, position, color, task_limit, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          title = VALUES(title),
          position = VALUES(position),
          color = VALUES(color),
          task_limit = VALUES(task_limit),
          updated_at = VALUES(updated_at)
      `;
      
      const params = [
        column.id || generateUUID(),
        column.title,
        column.boardId,
        column.position || 0,
        column.color || '#6366f1',
        column.taskLimit || null,
        formatDateForMySQL(column.createdAt || new Date()),
        formatDateForMySQL(column.updatedAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${column.title} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ ${column.title}:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏
 */
async function migrateTasks(connection, tempData) {
  if (!tempData.tasks || tempData.tasks.length === 0) {
    console.log('‚ÑπÔ∏è  –ó–∞–¥–∞—á–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.tasks.length} –∑–∞–¥–∞—á...`);
  
  for (const task of tempData.tasks) {
    try {
      const query = `
        INSERT INTO tasks (
          id, title, description, status, priority, project_id, board_id, 
          column_id, reporter_id, parent_task_id, position, story_points, 
          estimated_hours, actual_hours, deadline, is_archived, created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          title = VALUES(title),
          description = VALUES(description),
          status = VALUES(status),
          priority = VALUES(priority),
          column_id = VALUES(column_id),
          position = VALUES(position),
          updated_at = VALUES(updated_at)
      `;
      
      const params = [
        task.id || generateUUID(),
        task.title,
        task.description || null,
        task.status || 'todo',
        task.priority || 'medium',
        task.projectId,
        task.boardId,
        task.columnId || null,
        task.reporterId || 'admin-user-id',
        task.parentTaskId || null,
        task.position || 0,
        task.storyPoints || null,
        task.estimatedHours || null,
        task.actualHours || null,
        formatDateForMySQL(task.deadline),
        task.isArchived || false,
        formatDateForMySQL(task.createdAt || new Date()),
        formatDateForMySQL(task.updatedAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –ó–∞–¥–∞—á–∞ ${task.title} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ ${task.title}:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏–∏
 */
async function migrateSessions(connection, tempData) {
  if (!tempData.user_sessions || tempData.user_sessions.length === 0) {
    console.log('‚ÑπÔ∏è  –°–µ—Å—Å–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è ${tempData.user_sessions.length} —Å–µ—Å—Å–∏–π...`);
  
  for (const session of tempData.user_sessions) {
    try {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
      if (new Date(session.expiresAt) < new Date()) {
        console.log(`  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏ ${session.token}`);
        continue;
      }
      
      const query = `
        INSERT INTO user_sessions (
          id, user_id, session_token, refresh_token, ip_address, 
          user_agent, expires_at, created_at, last_activity_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ON DUPLICATE KEY UPDATE
          expires_at = VALUES(expires_at),
          last_activity_at = VALUES(last_activity_at)
      `;
      
      const params = [
        session.id || generateUUID(),
        session.userId,
        session.token,
        session.refreshToken || null,
        session.ipAddress || null,
        session.userAgent || null,
        formatDateForMySQL(session.expiresAt),
        formatDateForMySQL(session.createdAt || new Date()),
        formatDateForMySQL(session.lastActivityAt || new Date())
      ];
      
      await connection.execute(query, params);
      console.log(`  ‚úÖ –°–µ—Å—Å–∏—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:`, error.message);
    }
  }
  
  console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é tempDb
 */
function backupTempDb() {
  try {
    const backupPath = path.join(__dirname, '../database/temp-db-backup.json');
    fs.copyFileSync(tempDbPath, backupPath);
    console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è temp-db.json —Å–æ–∑–¥–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
async function main() {
  console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ TempDB –≤ MySQL');
  console.log('=' .repeat(50));
  
  let connection;
  
  try {
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tempDb
    const tempData = readTempDb();
    if (!tempData) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ temp-db.json');
      process.exit(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backupTempDb();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MySQL
    connection = await createConnection();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initializeDatabase(connection);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    await migrateUsers(connection, tempData);
    await migrateProjects(connection, tempData);
    await migrateBoards(connection, tempData);
    await migrateColumns(connection, tempData);
    await migrateTasks(connection, tempData);
    await migrateSessions(connection, tempData);
    
    console.log('=' .repeat(50));
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${tempData.users?.length || 0}`);
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç—ã: ${tempData.projects?.length || 0}`);
    console.log(`   üìã –î–æ—Å–∫–∏: ${tempData.boards?.length || 0}`);
    console.log(`   üìù –ö–æ–ª–æ–Ω–∫–∏: ${tempData.columns?.length || 0}`);
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∏: ${tempData.tasks?.length || 0}`);
    console.log(`   üîê –°–µ—Å—Å–∏–∏: ${tempData.user_sessions?.length || 0}`);
    console.log('');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MySQL');
    console.log('   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π');
    console.log('   4. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ temp-db-backup.json');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  main,
  migrateUsers,
  migrateProjects,
  migrateBoards,
  migrateColumns,
  migrateTasks,
  migrateSessions
};