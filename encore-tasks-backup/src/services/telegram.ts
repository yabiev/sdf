import { Task, Project } from "@/types";

// Use environment variable or fallback to empty string for security
const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || "";
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

// Check if we're in a browser environment and if the token is valid
const isValidEnvironment = () => {
  if (typeof window === 'undefined') return false;
  if (!TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN === 'your_bot_token_here') {
    console.warn('Telegram bot token not configured. Please set NEXT_PUBLIC_TELEGRAM_BOT_TOKEN environment variable.');
    return false;
  }
  return true;
};

interface TelegramMessage {
  chat_id: string;
  text: string;
  parse_mode?: "HTML" | "Markdown";
  message_thread_id?: string;
}

export class TelegramService {
  static async sendMessage(message: TelegramMessage): Promise<boolean> {
    // Skip if not in valid environment
    if (!isValidEnvironment()) {
      console.warn('Telegram service not available in current environment');
      return false;
    }

    // Validate required fields
    if (!message.chat_id || !message.text) {
      console.error('Telegram message validation failed: chat_id and text are required');
      return false;
    }

    try {
      const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(message)
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorMessage;
        try {
          const errorData = JSON.parse(errorText);
          errorMessage = errorData.description || errorText;
        } catch {
          errorMessage = errorText;
        }
        console.error('Telegram API error:', response.status, errorMessage);
        return false;
      }

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error("Failed to send Telegram message:", error);
      return false;
    }
  }

  static async sendTaskNotification(
  task: Task,
  project: Project,
  action: "created" | "updated" | "moved" | "completed" | "assigned",
  details?: string)
  : Promise<boolean> {
    // Skip if not in valid environment
    if (!isValidEnvironment()) {
      return false;
    }

    if (!project.telegramChatId) {
      console.warn("No Telegram chat ID configured for project:", project.name);
      return false;
    }

    const actionEmojis = {
      created: "üÜï",
      updated: "‚úèÔ∏è",
      moved: "üîÑ",
      completed: "‚úÖ",
      assigned: "üë§"
    };

    const priorityEmojis = {
      low: "üü¢",
      medium: "üü°",
      high: "üü†",
      urgent: "üî¥"
    };

    const statusEmojis = {
      todo: "üìã",
      "in-progress": "‚ö°",
      review: "üëÄ",
      done: "‚úÖ",
      archived: "üì¶"
    };

    let messageText = `${actionEmojis[action]} <b>–ó–∞–¥–∞—á–∞ ${
    action === "created" ?
    "—Å–æ–∑–¥–∞–Ω–∞" :
    action === "updated" ?
    "–æ–±–Ω–æ–≤–ª–µ–Ω–∞" :
    action === "moved" ?
    "–ø–µ—Ä–µ–º–µ—â–µ–Ω–∞" :
    action === "completed" ?
    "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" :
    "–Ω–∞–∑–Ω–∞—á–µ–Ω–∞"}</b>\n\n`;


    messageText += `üìù <b>${task.title}</b>\n`;

    if (task.description) {
      messageText += `üìÑ ${task.description.substring(0, 100)}${task.description.length > 100 ? "..." : ""}\n`;
    }

    messageText += `${priorityEmojis[task.priority]} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${
    task.priority === "low" ?
    "–ù–∏–∑–∫–∏–π" :
    task.priority === "medium" ?
    "–°—Ä–µ–¥–Ω–∏–π" :
    task.priority === "high" ?
    "–í—ã—Å–æ–∫–∏–π" :
    "–°—Ä–æ—á–Ω—ã–π"}\n`;


    messageText += `${statusEmojis[task.status]} –°—Ç–∞—Ç—É—Å: ${
    task.status === "todo" ?
    "–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é" :
    task.status === "in-progress" ?
    "–í —Ä–∞–±–æ—Ç–µ" :
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"}\n`;


    const assignees = task.assignees || (task.assignee ? [task.assignee] : []);
    if (assignees.length > 0) {
      if (assignees.length === 1) {
        messageText += `üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${assignees[0].name}\n`;
      } else {
        messageText += `üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏: ${assignees.map(a => a.name).join(", ")}\n`;
      }
    }

    if (task.deadline) {
      const deadline = new Date(task.deadline);
      messageText += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleDateString("ru-RU")}\n`;
    }

    messageText += `üè∑Ô∏è –ü—Ä–æ–µ–∫—Ç: ${project.name}\n`;

    if (details) {
      messageText += `\nüí¨ ${details}`;
    }

    const message: TelegramMessage = {
      chat_id: project.telegramChatId,
      text: messageText,
      parse_mode: "HTML"
    };

    if (project.telegramTopicId) {
      message.message_thread_id = project.telegramTopicId;
    }

    return await this.sendMessage(message);
  }

  static async sendProjectNotification(
  project: Project,
  message: string,
  type: "info" | "warning" | "error" = "info")
  : Promise<boolean> {
    if (!project.telegramChatId) {
      return false;
    }

    const typeEmojis = {
      info: "‚ÑπÔ∏è",
      warning: "‚ö†Ô∏è",
      error: "‚ùå"
    };

    const messageText = `${typeEmojis[type]} <b>–ü—Ä–æ–µ–∫—Ç: ${project.name}</b>\n\n${message}`;

    const telegramMessage: TelegramMessage = {
      chat_id: project.telegramChatId,
      text: messageText,
      parse_mode: "HTML"
    };

    if (project.telegramTopicId) {
      telegramMessage.message_thread_id = project.telegramTopicId;
    }

    return await this.sendMessage(telegramMessage);
  }

  static async sendDailyReport(
  project: Project,
  tasks: Task[])
  : Promise<boolean> {
    if (!project.telegramChatId) {
      return false;
    }

    const today = new Date();
    const todayTasks = tasks.filter((task) => {
      const taskDate = new Date(task.createdAt);
      return taskDate.toDateString() === today.toDateString();
    });

    const completedTasks = tasks.filter((task) => task.status === "done");
    const inProgressTasks = tasks.filter(
      (task) => task.status === "in-progress"
    );
    const overdueTasks = tasks.filter((task) => {
      if (!task.deadline) return false;
      return new Date(task.deadline) < today && task.status !== "done";
    });

    let messageText = `üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç - ${today.toLocaleDateString("ru-RU")}</b>\n`;
    messageText += `üè∑Ô∏è –ü—Ä–æ–µ–∫—Ç: ${project.name}\n\n`;

    messageText += `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    messageText += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.length}\n`;
    messageText += `‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayTasks.length}\n`;
    messageText += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks.length}\n`;
    messageText += `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${inProgressTasks.length}\n`;
    messageText += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${overdueTasks.length}\n\n`;

    if (overdueTasks.length > 0) {
      messageText += `‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n`;
      overdueTasks.slice(0, 5).forEach((task) => {
        const assignees = task.assignees || (task.assignee ? [task.assignee] : []);
        const assigneeText = assignees.length > 0 ? assignees.map(a => a.name).join(", ") : "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ";
        messageText += `‚Ä¢ ${task.title} (${assigneeText})\n`;
      });
      if (overdueTasks.length > 5) {
        messageText += `‚Ä¢ ... –∏ –µ—â–µ ${overdueTasks.length - 5} –∑–∞–¥–∞—á\n`;
      }
    }

    const message: TelegramMessage = {
      chat_id: project.telegramChatId,
      text: messageText,
      parse_mode: "HTML"
    };

    if (project.telegramTopicId) {
      message.message_thread_id = project.telegramTopicId;
    }

    return await this.sendMessage(message);
  }

  static async testConnection(
  chatId: string,
  topicId?: string)
  : Promise<boolean> {
    const message: TelegramMessage = {
      chat_id: chatId,
      text: "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ENCORE | TASKS\n\n–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
      parse_mode: "HTML"
    };

    if (topicId) {
      message.message_thread_id = topicId;
    }

    return await this.sendMessage(message);
  }
}