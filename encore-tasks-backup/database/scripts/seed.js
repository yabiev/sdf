#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/seed.js [--reset]
 * 
 * –û–ø—Ü–∏–∏:
 *   --reset  –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
 */

const { Pool } = require('pg');
const crypto = require('crypto');
require('dotenv').config();

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
  max: 20,
  min: 2,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
};

const pool = new Pool(dbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
function hashPassword(password) {
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha512').toString('hex');
  return `${salt}:${hash}`;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const seedData = {
  users: [
    {
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      email: 'admin@encore-tasks.com',
      password: hashPassword('admin123'),
      role: 'admin',
      is_approved: true
    },
    {
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      email: 'ivan.petrov@example.com',
      password: hashPassword('password123'),
      role: 'user',
      is_approved: true
    },
    {
      name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      email: 'maria.sidorova@example.com',
      password: hashPassword('password123'),
      role: 'user',
      is_approved: true
    },
    {
      name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
      email: 'alexey.kozlov@example.com',
      password: hashPassword('password123'),
      role: 'user',
      is_approved: true
    },
    {
      name: '–ï–ª–µ–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
      email: 'elena.novikova@example.com',
      password: hashPassword('password123'),
      role: 'user',
      is_approved: false
    }
  ],
  
  projects: [
    {
      name: '–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Encore Tasks',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º',
      color: '#3B82F6'
    },
    {
      name: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è iOS –∏ Android',
      color: '#10B981'
    },
    {
      name: 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
      color: '#F59E0B'
    }
  ],
  
  boards: [
    {
      name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      icon: 'üíª'
    },
    {
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      icon: 'üß™'
    },
    {
      name: '–î–∏–∑–∞–π–Ω',
      icon: 'üé®'
    }
  ],
  
  columns: [
    { title: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', color: '#EF4444', position: 0 },
    { title: '–í —Ä–∞–±–æ—Ç–µ', color: '#F59E0B', position: 1 },
    { title: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', color: '#3B82F6', position: 2 },
    { title: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', color: '#10B981', position: 3 }
  ],
  
  tags: [
    { name: 'frontend', color: '#3B82F6' },
    { name: 'backend', color: '#10B981' },
    { name: 'database', color: '#F59E0B' },
    { name: 'ui/ux', color: '#8B5CF6' },
    { name: 'bug', color: '#EF4444' },
    { name: 'feature', color: '#06B6D4' },
    { name: 'urgent', color: '#DC2626' },
    { name: 'documentation', color: '#6B7280' }
  ]
};

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function clearData(client) {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  const tables = [
    'task_tags', 'task_assignees', 'comments', 'attachments',
    'notifications', 'activity_logs', 'user_sessions',
    'tasks', 'columns', 'boards', 'project_members', 
    'projects', 'tags', 'users'
  ];
  
  for (const table of tables) {
    await client.query(`TRUNCATE TABLE ${table} RESTART IDENTITY CASCADE`);
    console.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—á–∏—â–µ–Ω–∞`);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function seedUsers(client) {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const userIds = [];
  
  for (const user of seedData.users) {
    const result = await client.query(`
      INSERT INTO users (name, email, password_hash, role, is_approved)
      VALUES ($1, $2, $3, $4, $5)
      RETURNING id
    `, [user.name, user.email, user.password, user.role, user.is_approved]);
    
    userIds.push(result.rows[0].id);
    console.log(`  ‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${user.name}" —Å–æ–∑–¥–∞–Ω`);
  }
  
  return userIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
async function seedProjects(client, userIds) {
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  const projectIds = [];
  
  for (let i = 0; i < seedData.projects.length; i++) {
    const project = seedData.projects[i];
    const creatorId = userIds[i % userIds.length];
    
    const result = await client.query(`
      INSERT INTO projects (name, description, color, creator_id)
      VALUES ($1, $2, $3, $4)
      RETURNING id
    `, [project.name, project.description, project.color, creatorId]);
    
    const projectId = result.rows[0].id;
    projectIds.push(projectId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    const memberIds = userIds.slice(0, Math.min(3, userIds.length));
    for (const memberId of memberIds) {
      await client.query(`
        INSERT INTO project_members (project_id, user_id, role)
        VALUES ($1, $2, $3)
      `, [projectId, memberId, memberId === creatorId ? 'admin' : 'member']);
    }
    
    console.log(`  ‚úì –ü—Ä–æ–µ–∫—Ç "${project.name}" —Å–æ–∑–¥–∞–Ω —Å ${memberIds.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`);
  }
  
  return projectIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–æ–∫
async function seedBoards(client, projectIds) {
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫...');
  
  const boardIds = [];
  
  for (const projectId of projectIds) {
    for (const board of seedData.boards) {
      const result = await client.query(`
        INSERT INTO boards (name, project_id, icon)
        VALUES ($1, $2, $3)
        RETURNING id
      `, [board.name, projectId, board.icon]);
      
      boardIds.push(result.rows[0].id);
    }
  }
  
  console.log(`  ‚úì –°–æ–∑–¥–∞–Ω–æ ${boardIds.length} –¥–æ—Å–æ–∫`);
  return boardIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
async function seedColumns(client, boardIds) {
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫...');
  
  const columnIds = [];
  
  for (const boardId of boardIds) {
    for (const column of seedData.columns) {
      const result = await client.query(`
        INSERT INTO columns (title, board_id, position, color)
        VALUES ($1, $2, $3, $4)
        RETURNING id
      `, [column.title, boardId, column.position, column.color]);
      
      columnIds.push(result.rows[0].id);
    }
  }
  
  console.log(`  ‚úì –°–æ–∑–¥–∞–Ω–æ ${columnIds.length} –∫–æ–ª–æ–Ω–æ–∫`);
  return columnIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤
async function seedTags(client) {
  console.log('üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...');
  
  const tagIds = [];
  
  for (const tag of seedData.tags) {
    const result = await client.query(`
      INSERT INTO tags (name, color)
      VALUES ($1, $2)
      RETURNING id
    `, [tag.name, tag.color]);
    
    tagIds.push(result.rows[0].id);
    console.log(`  ‚úì –¢–µ–≥ "${tag.name}" —Å–æ–∑–¥–∞–Ω`);
  }
  
  return tagIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
async function seedTasks(client, projectIds, columnIds, userIds, tagIds) {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
  
  const tasks = [
    {
      title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      description: '–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏',
      status: 'done',
      priority: 'high',
      tags: ['backend', 'database']
    },
    {
      title: '–î–∏–∑–∞–π–Ω –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      description: '–°–æ–∑–¥–∞—Ç—å –º–∞–∫–µ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      status: 'in_progress',
      priority: 'medium',
      tags: ['ui/ux', 'frontend']
    },
    {
      title: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å REST API –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏',
      status: 'todo',
      priority: 'high',
      tags: ['backend', 'feature']
    },
    {
      title: '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      description: '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
      status: 'todo',
      priority: 'medium',
      tags: ['backend', 'feature']
    },
    {
      title: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è',
      description: '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
      status: 'review',
      priority: 'low',
      tags: ['frontend', 'ui/ux']
    },
    {
      title: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π',
      description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      status: 'in_progress',
      priority: 'urgent',
      tags: ['bug', 'backend', 'urgent']
    }
  ];
  
  const taskIds = [];
  
  for (let i = 0; i < tasks.length; i++) {
    const task = tasks[i];
    const projectId = projectIds[i % projectIds.length];
    const reporterId = userIds[i % userIds.length];
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–ª–æ–Ω–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const statusColumnMap = {
      'todo': 0,
      'in_progress': 1,
      'review': 2,
      'done': 3
    };
    
    const columnIndex = statusColumnMap[task.status] || 0;
    const columnId = columnIds.filter((_, idx) => idx % 4 === columnIndex)[0];
    
    const result = await client.query(`
      INSERT INTO tasks (
        title, description, status, priority, 
        project_id, column_id, reporter_id, position
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING id
    `, [
      task.title, task.description, task.status, task.priority,
      projectId, columnId, reporterId, i
    ]);
    
    const taskId = result.rows[0].id;
    taskIds.push(taskId);
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const assigneeCount = Math.floor(Math.random() * 2) + 1;
    const assignees = userIds.slice(0, assigneeCount);
    
    for (const assigneeId of assignees) {
      await client.query(`
        INSERT INTO task_assignees (task_id, user_id)
        VALUES ($1, $2)
      `, [taskId, assigneeId]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏
    for (const tagName of task.tags) {
      const tagIndex = seedData.tags.findIndex(t => t.name === tagName);
      if (tagIndex !== -1) {
        await client.query(`
          INSERT INTO task_tags (task_id, tag_id)
          VALUES ($1, $2)
        `, [taskId, tagIds[tagIndex]]);
      }
    }
    
    console.log(`  ‚úì –ó–∞–¥–∞—á–∞ "${task.title}" —Å–æ–∑–¥–∞–Ω–∞`);
  }
  
  return taskIds;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
async function seedComments(client, taskIds, userIds) {
  console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
  
  const comments = [
    '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
    '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.',
    '–ü—Ä–µ–¥–ª–∞–≥–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥.',
    '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.',
    '–ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É.',
    '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.'
  ];
  
  let commentCount = 0;
  
  for (const taskId of taskIds) {
    const numComments = Math.floor(Math.random() * 3) + 1;
    
    for (let i = 0; i < numComments; i++) {
      const authorId = userIds[Math.floor(Math.random() * userIds.length)];
      const content = comments[Math.floor(Math.random() * comments.length)];
      
      await client.query(`
        INSERT INTO comments (task_id, author_id, content)
        VALUES ($1, $2, $3)
      `, [taskId, authorId, content]);
      
      commentCount++;
    }
  }
  
  console.log(`  ‚úì –°–æ–∑–¥–∞–Ω–æ ${commentCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
async function seedDatabase(reset = false) {
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    if (reset) {
      await clearData(client);
    }
    
    const userIds = await seedUsers(client);
    const projectIds = await seedProjects(client, userIds);
    const boardIds = await seedBoards(client, projectIds);
    const columnIds = await seedColumns(client, boardIds);
    const tagIds = await seedTags(client);
    const taskIds = await seedTasks(client, projectIds, columnIds, userIds, tagIds);
    await seedComments(client, taskIds, userIds);
    
    await client.query('COMMIT');
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userIds.length}`);
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç–æ–≤: ${projectIds.length}`);
    console.log(`   üìã –î–æ—Å–æ–∫: ${boardIds.length}`);
    console.log(`   üìä –ö–æ–ª–æ–Ω–æ–∫: ${columnIds.length}`);
    console.log(`   üè∑Ô∏è  –¢–µ–≥–æ–≤: ${tagIds.length}`);
    console.log(`   üìù –ó–∞–¥–∞—á: ${taskIds.length}`);
    
    console.log('\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
    console.log('   admin@encore-tasks.com / admin123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)');
    console.log('   ivan.petrov@example.com / password123 (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)');
    
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n');
  
  const reset = process.argv.includes('--reset');
  
  if (reset) {
    console.log('‚ö†Ô∏è  –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞: –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n');
  }
  
  try {
    await seedDatabase(reset);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { seedDatabase };