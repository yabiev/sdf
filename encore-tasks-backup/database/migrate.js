#!/usr/bin/env node

// =====================================================
// –°–ö–†–ò–ü–¢ –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• PostgreSQL
// =====================================================
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ PostgreSQL
// –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Encore Tasks

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

class DatabaseMigrator {
    constructor() {
        this.pool = new Pool({
            host: process.env.DB_HOST || 'localhost',
            port: parseInt(process.env.DB_PORT || '5432'),
            database: process.env.DB_NAME || 'encore_tasks',
            user: process.env.DB_USER || 'postgres',
            password: process.env.DB_PASSWORD,
            max: 20,
            min: 2,
            idleTimeoutMillis: 30000,
            connectionTimeoutMillis: 2000,
        });
        this.migrationsDir = path.join(__dirname, 'migrations');
    }

    async connect() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const client = await this.pool.connect();
            client.release();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }

    async disconnect() {
        if (this.pool) {
            await this.pool.end();
            console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
    async createMigrationsTable() {
        const createTableSQL = `
            CREATE TABLE IF NOT EXISTS migrations (
                id SERIAL PRIMARY KEY,
                filename VARCHAR(255) NOT NULL UNIQUE,
                applied_at TIMESTAMP NOT NULL DEFAULT NOW(),
                checksum TEXT NOT NULL
            )
        `;
        
        try {
            await this.pool.query(createTableSQL);
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π
    async getAppliedMigrations() {
        try {
            const result = await this.pool.query('SELECT filename FROM migrations ORDER BY id');
            return result.rows.map(row => row.filename);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
            return [];
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
    getMigrationFiles() {
        try {
            if (!fs.existsSync(this.migrationsDir)) {
                console.log('üìÅ –ü–∞–ø–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
                fs.mkdirSync(this.migrationsDir, { recursive: true });
                return [];
            }

            return fs.readdirSync(this.migrationsDir)
                .filter(file => file.endsWith('.sql'))
                .sort();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
            return [];
        }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É —Ñ–∞–π–ª–∞
    calculateChecksum(content) {
        const crypto = require('crypto');
        return crypto.createHash('md5').update(content).digest('hex');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    async checkAndAddMissingColumns() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ checksum
            const tableInfo = await this.pool.query(`
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'migrations' AND table_schema = 'public'
            `);
            const columns = tableInfo.rows.map(row => row.column_name);
            const hasChecksum = columns.includes('checksum');
            
            if (!hasChecksum) {
                console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É checksum –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π...');
                await this.pool.query('ALTER TABLE migrations ADD COLUMN checksum TEXT');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                const existingMigrations = await this.pool.query('SELECT id, filename FROM migrations');
                
                for (const migration of existingMigrations.rows) {
                    const migrationPath = path.join(this.migrationsDir, migration.filename);
                    if (fs.existsSync(migrationPath)) {
                        const content = fs.readFileSync(migrationPath, 'utf8');
                        const checksum = this.calculateChecksum(content);
                        await this.pool.query('UPDATE migrations SET checksum = $1 WHERE id = $2', [checksum, migration.id]);
                    }
                }
                
                console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ checksum –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫:', error.message);
            throw error;
        }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    async applyMigration(filename) {
        const filePath = path.join(this.migrationsDir, filename);
        
        if (!fs.existsSync(filePath)) {
            throw new Error(`–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filename}`);
        }
        
        const client = await this.pool.connect();
        
        try {
            console.log(`üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${filename}`);
            
            const content = fs.readFileSync(filePath, 'utf8');
            const checksum = this.calculateChecksum(content);
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await client.query('BEGIN');
            
            try {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                await client.query(content);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
                await client.query(
                    'INSERT INTO migrations (filename, checksum, applied_at) VALUES ($1, $2, NOW()) ON CONFLICT (filename) DO NOTHING',
                    [filename, checksum]
                );
                
                await client.query('COMMIT');
                console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
                
            } catch (error) {
                await client.query('ROLLBACK');
                throw error;
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, error.message);
            throw error;
        } finally {
            client.release();
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    async migrate() {
        try {
            console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏...');
            
            await this.connect();
            await this.createMigrationsTable();
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü...');
            await this.checkAndAddMissingColumns();
            
            const appliedMigrations = await this.getAppliedMigrations();
            const migrationFiles = this.getMigrationFiles();
            
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${migrationFiles.length}`);
            console.log(`üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${appliedMigrations.length}`);
            
            const pendingMigrations = migrationFiles.filter(
                file => !appliedMigrations.includes(file)
            );
            
            if (pendingMigrations.length === 0) {
                console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
                return;
            }
            
            console.log(`üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º ${pendingMigrations.length} –º–∏–≥—Ä–∞—Ü–∏–π...`);
            
            for (const migration of pendingMigrations) {
                await this.applyMigration(migration);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            await this.pool.query('ANALYZE');
            
            console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
            throw error;
        } finally {
            await this.disconnect();
        }
    }

    // –û—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    async rollback() {
        try {
            console.log('‚ö†Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏...');
            
            await this.connect();
            
            const result = await this.pool.query(
                'SELECT filename FROM migrations ORDER BY id DESC LIMIT 1'
            );
            
            if (result.rows.length === 0) {
                console.log('‚ÑπÔ∏è  –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞');
                return;
            }
            
            const lastMigration = result.rows[0];
            console.log(`üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${lastMigration.filename}`);
            
            // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
            await this.pool.query('DELETE FROM migrations WHERE filename = $1', [lastMigration.filename]);
            
            console.log('‚ö†Ô∏è  –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–ù–ò–ú–ê–ù–ò–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω—ã!');
            console.log('‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error.message);
            throw error;
        } finally {
            await this.disconnect();
        }
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    const migrator = new DatabaseMigrator();

    const command = process.argv[2] || 'migrate';

    switch (command) {
        case 'migrate':
        case 'up':
            migrator.migrate()
                .then(() => process.exit(0))
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
                    process.exit(1);
                });
            break;

        case 'rollback':
        case 'down':
            migrator.rollback()
                .then(() => process.exit(0))
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error.message);
                    process.exit(1);
                });
            break;

        default:
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node migrate.js [migrate|rollback]');
            process.exit(1);
    }
}

module.exports = DatabaseMigrator;