{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDate(date: Date): string {\n  if (!date || isNaN(date.getTime())) {\n    return 'Неверная дата';\n  }\n  return new Intl.DateTimeFormat(\"ru-RU\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\"\n  }).format(date);\n}\n\nexport function formatDateTime(date: Date): string {\n  if (!date || isNaN(date.getTime())) {\n    return 'Неверная дата';\n  }\n  return new Intl.DateTimeFormat(\"ru-RU\", {\n    day: \"2-digit\",\n    month: \"2-digit\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n  }).format(date);\n}\n\nexport function isOverdue(date: Date): boolean {\n  if (!date || isNaN(date.getTime())) {\n    return false;\n  }\n  return date < new Date();\n}\n\nexport function getDaysUntilDeadline(date: Date): number {\n  if (!date || isNaN(date.getTime())) {\n    return 0;\n  }\n  const today = new Date();\n  const deadline = new Date(date);\n  const diffTime = deadline.getTime() - today.getTime();\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n}\n\nexport function getInitials(name: string): string {\n  return name.\n  split(\" \").\n  map((word) => word.charAt(0)).\n  join(\"\").\n  toUpperCase().\n  slice(0, 2);\n}\n\nexport function generateId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAEO,SAAS,WAAW,IAAU;IACnC,IAAI,CAAC,QAAQ,MAAM,KAAK,OAAO,KAAK;QAClC,OAAO;IACT;IACA,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,KAAK;QACL,OAAO;QACP,MAAM;IACR,GAAG,MAAM,CAAC;AACZ;AAEO,SAAS,eAAe,IAAU;IACvC,IAAI,CAAC,QAAQ,MAAM,KAAK,OAAO,KAAK;QAClC,OAAO;IACT;IACA,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,KAAK;QACL,OAAO;QACP,MAAM;QACN,MAAM;QACN,QAAQ;IACV,GAAG,MAAM,CAAC;AACZ;AAEO,SAAS,UAAU,IAAU;IAClC,IAAI,CAAC,QAAQ,MAAM,KAAK,OAAO,KAAK;QAClC,OAAO;IACT;IACA,OAAO,OAAO,IAAI;AACpB;AAEO,SAAS,qBAAqB,IAAU;IAC7C,IAAI,CAAC,QAAQ,MAAM,KAAK,OAAO,KAAK;QAClC,OAAO;IACT;IACA,MAAM,QAAQ,IAAI;IAClB,MAAM,WAAW,IAAI,KAAK;IAC1B,MAAM,WAAW,SAAS,OAAO,KAAK,MAAM,OAAO;IACnD,OAAO,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,KAAK,EAAE;AAClD;AAEO,SAAS,YAAY,IAAY;IACtC,OAAO,KACP,KAAK,CAAC,KACN,GAAG,CAAC,CAAC,OAAS,KAAK,MAAM,CAAC,IAC1B,IAAI,CAAC,IACL,WAAW,GACX,KAAK,CAAC,GAAG;AACX;AAEO,SAAS;IACd,OAAO,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;AACnE","debugId":null}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/api.ts"],"sourcesContent":["// API клиент для работы с бэкендом\n\ninterface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\nclass ApiClient {\n  private baseUrl: string;\n  private csrfToken: string | null = null;\n\n  constructor() {\n    this.baseUrl = process.env.NEXT_PUBLIC_API_URL || '';\n    this.initializeCSRF();\n  }\n\n  private async initializeCSRF(): Promise<void> {\n    try {\n      // Get CSRF token from server\n      const response = await fetch(`${this.baseUrl}/api/csrf`, {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        this.csrfToken = data.csrfToken;\n      }\n    } catch (error) {\n      console.warn('Failed to initialize CSRF token:', error);\n    }\n  }\n\n  private getAuthToken(): string | null {\n    if (typeof window === 'undefined') return null;\n    \n    // Используем только cookie для безопасности (защита от XSS)\n    const cookies = document.cookie.split(';');\n    const authCookie = cookies.find(cookie => cookie.trim().startsWith('auth-token-client='));\n    if (authCookie) {\n      return authCookie.split('=')[1];\n    }\n    \n    return null;\n  }\n\n  private getCSRFToken(): string | null {\n    if (typeof document !== 'undefined') {\n      const cookies = document.cookie.split(';');\n      const csrfCookie = cookies.find(cookie => \n        cookie.trim().startsWith('csrf-token=')\n      );\n      if (csrfCookie) {\n        return csrfCookie.split('=')[1];\n      }\n    }\n    return this.csrfToken;\n  }\n\n  private setAuthToken(token: string): void {\n    // Токен устанавливается сервером через httpOnly cookie\n    // Клиентская установка не требуется для безопасности\n    // localStorage больше не используется для предотвращения XSS атак\n  }\n\n  private removeAuthToken(): void {\n    // Токен удаляется сервером через API logout\n    // localStorage больше не используется для предотвращения XSS атак\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {},\n    retries: number = 3\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseUrl}/api${endpoint}`;\n    \n    for (let attempt = 0; attempt <= retries; attempt++) {\n      try {\n        const token = this.getAuthToken();\n        \n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n          'X-Requested-With': 'XMLHttpRequest', // CSRF protection\n          ...options.headers as Record<string, string>,\n        };\n\n        if (token) {\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n\n        // Add CSRF token for state-changing requests\n        if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(options.method?.toUpperCase() || 'GET')) {\n          const csrfToken = this.getCSRFToken();\n          if (csrfToken) {\n            headers['X-CSRF-Token'] = csrfToken;\n          }\n        }\n        \n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout\n        \n        const response = await fetch(url, {\n          headers,\n          credentials: 'include', // Для работы с cookies\n          signal: controller.signal,\n          ...options,\n        });\n        \n        clearTimeout(timeoutId);\n\n        // Handle different response types\n        let data;\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          data = await response.json();\n        } else {\n          data = { message: await response.text() };\n        }\n\n        if (!response.ok) {\n          // Handle specific HTTP errors\n          if (response.status === 401) {\n            // Unauthorized - just return error, don't redirect\n            // The AuthModal will handle showing login form\n            return { error: 'Сессия истекла. Необходимо войти в систему заново.' };\n          }\n          \n          if (response.status === 403) {\n            return { error: 'Недостаточно прав для выполнения операции' };\n          }\n          \n          if (response.status === 429) {\n            // Rate limiting - wait and retry\n            if (attempt < retries) {\n              await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n              continue;\n            }\n            return { error: 'Слишком много запросов. Попробуйте позже.' };\n          }\n          \n          if (response.status >= 500) {\n            // Server error - retry\n            if (attempt < retries) {\n              await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n              continue;\n            }\n            return { error: 'Ошибка сервера. Попробуйте позже.' };\n          }\n          \n          return { error: data.error || `HTTP ${response.status}: ${response.statusText}` };\n        }\n\n        return { data };\n        \n      } catch (error) {\n        console.error(`API Error (attempt ${attempt + 1}):`, error);\n        \n        // Handle specific error types\n        if (error instanceof TypeError && error.message.includes('fetch')) {\n          if (attempt < retries) {\n            await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n            continue;\n          }\n          return { error: 'Ошибка сети. Проверьте подключение к интернету.' };\n        }\n        \n        if (error instanceof Error && error.name === 'AbortError') {\n          return { error: 'Запрос прерван по таймауту' };\n        }\n        \n        if (attempt < retries) {\n          await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n          continue;\n        }\n        \n        return { error: 'Произошла неожиданная ошибка' };\n      }\n    }\n    \n    return { error: 'Максимальное количество попыток исчерпано' };\n  }\n\n  // Методы аутентификации\n  async login(email: string, password: string) {\n    const response = await this.request<{ user: any; token: string }>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n    \n    // Сохраняем токен при успешном логине\n    if (response.data?.token) {\n      this.setAuthToken(response.data.token);\n    }\n    \n    return response;\n  }\n\n  async register(name: string, email: string, password: string) {\n    const response = await this.request<{ user: any; token: string }>('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({ name, email, password }),\n    });\n    \n    // Сохраняем токен при успешной регистрации\n    if (response.data?.token) {\n      this.setAuthToken(response.data.token);\n    }\n    \n    return response;\n  }\n\n  async logout() {\n    const response = await this.request('/auth/logout', {\n      method: 'POST',\n    });\n    \n    // Удаляем токен при выходе\n    this.removeAuthToken();\n    \n    return response;\n  }\n\n  async getCurrentUser() {\n    return this.request<{ user: any }>('/auth/me');\n  }\n\n  // Методы для работы с пользователями\n  async getUsers(params?: {\n    status?: string;\n    projectId?: string;\n    includeStats?: boolean;\n  }) {\n    const searchParams = new URLSearchParams();\n    if (params?.status) searchParams.set('status', params.status);\n    if (params?.projectId) searchParams.set('projectId', params.projectId);\n    if (params?.includeStats) searchParams.set('includeStats', 'true');\n    \n    const query = searchParams.toString();\n    return this.request<{ users: any[] }>(`/users${query ? `?${query}` : ''}`);\n  }\n\n  async createUser(userData: {\n    name: string;\n    email: string;\n    password: string;\n    role?: string;\n    status?: string;\n  }) {\n    return this.request<{ user: any }>('/users', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async updateUser(userId: string, updateData: {\n    role?: string;\n    status?: string;\n  }) {\n    return this.request<{ user: any }>(`/users/${userId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData),\n    });\n  }\n\n  async deleteUser(userId: string) {\n    return this.request(`/users/${userId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Методы для работы с проектами\n  async getProjects() {\n    return this.request<{ projects: any[] }>('/projects');\n  }\n\n  async createProject(projectData: {\n    name: string;\n    description?: string;\n    color?: string;\n    isPrivate?: boolean;\n  }) {\n    return this.request<{ project: any }>('/projects', {\n      method: 'POST',\n      body: JSON.stringify(projectData),\n    });\n  }\n\n  async updateProject(projectId: string, updateData: {\n    name?: string;\n    description?: string;\n    color?: string;\n    status?: string;\n  }) {\n    return this.request<{ project: any }>(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData),\n    });\n  }\n\n  async deleteProject(projectId: string) {\n    return this.request(`/projects/${projectId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Методы для работы с досками\n  async getBoards(projectId?: string, params?: {\n    includeArchived?: boolean;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }) {\n    const searchParams = new URLSearchParams();\n    if (projectId) searchParams.set('projectId', projectId);\n    if (params?.includeArchived) searchParams.set('includeArchived', 'true');\n    if (params?.sortBy) searchParams.set('sortBy', params.sortBy);\n    if (params?.sortOrder) searchParams.set('sortOrder', params.sortOrder);\n    \n    const query = searchParams.toString();\n    return this.request<{ boards: any[] }>(`/boards${query ? `?${query}` : ''}`);\n  }\n\n  async createBoard(boardData: {\n    name: string;\n    description?: string;\n    projectId: string;\n    visibility?: 'public' | 'private';\n    color?: string;\n    allowComments?: boolean;\n    allowAttachments?: boolean;\n    autoArchive?: boolean;\n  }) {\n    return this.request<{ board: any }>('/boards', {\n      method: 'POST',\n      body: JSON.stringify(boardData),\n    });\n  }\n\n  async deleteBoard(boardId: string) {\n    return this.request(`/boards?boardId=${boardId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Методы для работы с колонками\n  async getColumns(boardId: string, params?: {\n    includeArchived?: boolean;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n  }) {\n    const searchParams = new URLSearchParams();\n    searchParams.set('boardId', boardId);\n    if (params?.includeArchived) searchParams.set('includeArchived', 'true');\n    if (params?.sortBy) searchParams.set('sortBy', params.sortBy);\n    if (params?.sortOrder) searchParams.set('sortOrder', params.sortOrder);\n    \n    const query = searchParams.toString();\n    return this.request<{ columns: any[] }>(`/columns?${query}`);\n  }\n\n  async createColumn(columnData: {\n    title: string;\n    boardId: string;\n    color?: string;\n    wipLimit?: number;\n    isCollapsed?: boolean;\n    autoMoveRules?: {\n      enabled: boolean;\n      conditions: any[];\n      targetColumnId?: string;\n    };\n    notifications?: {\n      onTaskAdded: boolean;\n      onTaskMoved: boolean;\n      onWipLimitExceeded: boolean;\n    };\n    taskTemplate?: {\n      enabled: boolean;\n      defaultTitle?: string;\n      defaultDescription?: string;\n      defaultPriority?: string;\n      defaultTags?: string[];\n    };\n  }) {\n    return this.request<{ column: any }>('/columns', {\n      method: 'POST',\n      body: JSON.stringify(columnData),\n    });\n  }\n\n  async updateColumnsOrder(boardId: string, columnOrders: Record<string, number>) {\n    return this.request('/columns', {\n      method: 'PUT',\n      body: JSON.stringify({ boardId, columnOrders }),\n    });\n  }\n\n  // Методы для работы с задачами\n  async getTasks(params?: {\n    columnId?: string;\n    projectId?: string;\n    boardId?: string;\n    status?: string;\n    assigneeId?: string;\n    priority?: string;\n    includeArchived?: boolean;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n    page?: number;\n    limit?: number;\n  }) {\n    const searchParams = new URLSearchParams();\n    if (params?.columnId) searchParams.set('columnId', params.columnId);\n    if (params?.projectId) searchParams.set('projectId', params.projectId);\n    if (params?.boardId) searchParams.set('boardId', params.boardId);\n    if (params?.status) searchParams.set('status', params.status);\n    if (params?.assigneeId) searchParams.set('assigneeId', params.assigneeId);\n    if (params?.priority) searchParams.set('priority', params.priority);\n    if (params?.includeArchived) searchParams.set('includeArchived', 'true');\n    if (params?.sortBy) searchParams.set('sortBy', params.sortBy);\n    if (params?.sortOrder) searchParams.set('sortOrder', params.sortOrder);\n    if (params?.page) searchParams.set('page', params.page.toString());\n    if (params?.limit) searchParams.set('limit', params.limit.toString());\n    \n    const query = searchParams.toString();\n    return this.request<{ tasks: any[] }>(`/tasks${query ? `?${query}` : ''}`);\n  }\n\n  async getTask(taskId: string) {\n    return this.request<{ task: any }>(`/tasks/${taskId}`);\n  }\n\n  async createTask(taskData: {\n    title: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    assigneeId?: string;\n    columnId: string;\n    position?: number;\n    dueDate?: string;\n    estimatedHours?: number;\n    tags?: string[];\n  }) {\n    return this.request<{ task: any }>('/tasks', {\n      method: 'POST',\n      body: JSON.stringify(taskData),\n    });\n  }\n\n  async updateTask(taskId: string, updateData: {\n    title?: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    position?: number;\n    storyPoints?: number;\n    estimatedHours?: number;\n    actualHours?: number;\n    deadline?: string;\n    columnId?: string;\n    parentTaskId?: string;\n    isArchived?: boolean;\n    assigneeIds?: string[];\n    tags?: string[];\n  }) {\n    return this.request<{ task: any }>(`/tasks/${taskId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updateData),\n    });\n  }\n\n  async deleteTask(taskId: string) {\n    return this.request(`/tasks/${taskId}`, {\n      method: 'DELETE',\n    });\n  }\n}\n\n// Экспорт единственного экземпляра API клиента\nexport const api = new ApiClient();\n\n// Типы для TypeScript\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n  status: 'active' | 'pending' | 'suspended';\n  approval_status?: 'pending' | 'approved' | 'rejected';\n  avatar?: string;\n  createdAt: string;\n  updatedAt: string;\n  lastLoginAt?: string;\n  stats?: {\n    assignedTasksCount: number;\n    createdTasksCount: number;\n    createdProjectsCount: number;\n  };\n}\n\nexport interface Project {\n  id: string;\n  name: string;\n  description?: string;\n  color: string;\n  isPrivate: boolean;\n  isArchived: boolean;\n  archivedAt?: string;\n  createdBy: string;\n  creatorName: string;\n  membersCount: number;\n  tasksCount: number;\n  boardsCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Board {\n  id: string;\n  name: string;\n  description?: string;\n  position: number;\n  isArchived: boolean;\n  archivedAt?: string;\n  projectId: string;\n  projectName: string;\n  projectColor: string;\n  tasksCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Column {\n  id: string;\n  title: string;\n  color: string;\n  position: number;\n  isArchived: boolean;\n  archivedAt?: string;\n  boardId: string;\n  boardName: string;\n  projectName: string;\n  tasksCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  status: 'todo' | 'in_progress' | 'review' | 'done';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  position: number;\n  storyPoints?: number;\n  estimatedHours?: number;\n  actualHours?: number;\n  deadline?: string;\n  startedAt?: string;\n  completedAt?: string;\n  isArchived: boolean;\n  archivedAt?: string;\n  projectId: string;\n  projectName: string;\n  projectColor: string;\n  boardId: string;\n  boardName: string;\n  columnId?: string;\n  columnTitle?: string;\n  columnColor?: string;\n  reporterId: string;\n  reporterName: string;\n  parentTaskId?: string;\n  parentTaskTitle?: string;\n  assignees: User[];\n  tags: { id: string; name: string; color: string }[];\n  commentsCount: number;\n  attachmentsCount: number;\n  createdAt: string;\n  updatedAt: string;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 417, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/contexts/AppContext.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useReducer, ReactNode, useEffect, useCallback } from \"react\";\nimport { Task, Project, User, Board, Column, TaskStatus, TaskAction } from \"@/types\";\nimport { generateId } from \"@/lib/utils\";\nimport { api, type User as ApiUser, type Project as ApiProject, type Board as ApiBoard, type Task as ApiTask } from \"@/lib/api\";\n\n// Helper function to create notifications\nfunction createNotification(\n  type: Notification[\"type\"],\n  title: string,\n  message: string,\n  userId: string,\n  projectId: string,\n  taskId?: string\n): Notification {\n  return {\n    id: generateId(),\n    type,\n    title,\n    message,\n    taskId,\n    projectId,\n    userId,\n    isRead: false,\n    createdAt: new Date()\n  };\n}\n\ninterface Notification {\n  id: string;\n  type: \"task_assigned\" | \"task_completed\" | \"task_updated\" | \"task_created\" | \"deadline_reminder\";\n  title: string;\n  message: string;\n  taskId?: string;\n  projectId: string;\n  userId: string;\n  isRead: boolean;\n  createdAt: Date;\n}\n\ninterface AppState {\n  currentUser: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  projects: Project[];\n  boards: Board[];\n  tasks: Task[];\n  archivedTasks: Task[];\n  filteredTasks: Task[] | null;\n  users: User[];\n  selectedProject: Project | null;\n  taskActions: TaskAction[];\n  selectedBoard: Board | null;\n  readNotifications: string[];\n  notifications: Notification[];\n  pendingUserNotifications: User[];\n  filters: {\n    assignee: string;\n    priority: string;\n    status: string;\n    deadline: string;\n  };\n  sortBy: \"priority\" | \"deadline\" | \"created\" | \"updated\";\n  sortOrder: \"asc\" | \"desc\";\n  settings: {\n    theme: \"dark\" | \"light\" | \"auto\";\n    language: \"ru\" | \"en\";\n    compactMode: boolean;\n    showAvatars: boolean;\n    emailNotifications: boolean;\n    pushNotifications: boolean;\n    taskReminders: boolean;\n    telegramNotifications: boolean;\n    taskAssigned: boolean;\n    taskCompleted: boolean;\n    deadlineReminder: boolean;\n    projectUpdates: boolean;\n  };\n}\n\ntype AppAction =\n  | { type: \"SET_LOADING\"; payload: boolean }\n  | { type: \"SET_CURRENT_USER\"; payload: User }\n  | { type: \"LOGIN\"; payload: User }\n  | { type: \"LOGOUT\" }\n  | { type: \"SET_USERS\"; payload: User[] }\n  | { type: \"ADD_USER\"; payload: User }\n  | { type: \"UPDATE_USER\"; payload: User }\n  | { type: \"APPROVE_USER\"; payload: string }\n  | { type: \"REJECT_USER\"; payload: string }\n  | { type: \"ADD_PENDING_USER_NOTIFICATION\"; payload: User }\n  | { type: \"SET_PROJECTS\"; payload: Project[] }\n  | { type: \"ADD_PROJECT\"; payload: Project }\n  | { type: \"UPDATE_PROJECT\"; payload: Project }\n  | { type: \"DELETE_PROJECT\"; payload: string }\n  | { type: \"SELECT_PROJECT\"; payload: Project | null }\n  | { type: \"SET_BOARDS\"; payload: Board[] }\n  | { type: \"ADD_BOARD\"; payload: Board }\n  | { type: \"UPDATE_BOARD\"; payload: Board }\n  | { type: \"DELETE_BOARD\"; payload: string }\n  | { type: \"SELECT_BOARD\"; payload: Board | null }\n  | { type: \"SET_TASKS\"; payload: Task[] }\n  | { type: \"ADD_TASK\"; payload: Task }\n  | { type: \"UPDATE_TASK\"; payload: Task }\n  | { type: \"DELETE_TASK\"; payload: string }\n  | { type: \"ARCHIVE_TASK\"; payload: string }\n  | { type: \"UNARCHIVE_TASK\"; payload: string }\n  | { type: \"SET_ARCHIVED_TASKS\"; payload: Task[] }\n  | {\n      type: \"MOVE_TASK\";\n      payload: { taskId: string; newStatus: TaskStatus; newPosition: number };\n    }\n  | { type: \"ADD_COLUMN\"; payload: { boardId: string; column: Column } }\n  | { type: \"UPDATE_COLUMN\"; payload: { boardId: string; column: Column } }\n  | { type: \"DELETE_COLUMN\"; payload: { boardId: string; columnId: string } }\n  | { type: \"SET_FILTERS\"; payload: Partial<AppState[\"filters\"]> }\n  | {\n      type: \"SET_SORT\";\n      payload: { sortBy: AppState[\"sortBy\"]; sortOrder: AppState[\"sortOrder\"] };\n    }\n  | { type: \"SET_FILTERED_TASKS\"; payload: Task[] }\n  | { type: \"CLEAR_FILTERED_TASKS\" }\n  | { type: \"ADD_NOTIFICATION\"; payload: Notification }\n  | { type: \"MARK_NOTIFICATION_READ\"; payload: string }\n  | { type: \"MARK_ALL_NOTIFICATIONS_READ\" }\n  | { type: \"UPDATE_SETTINGS\"; payload: Partial<AppState[\"settings\"]> }\n  | { type: \"ADD_TASK_ACTION\"; payload: TaskAction };\n\nconst initialState: AppState = {\n  currentUser: null,\n  isAuthenticated: false,\n  isLoading: false,\n  projects: [],\n  boards: [],\n  tasks: [],\n  archivedTasks: [],\n  filteredTasks: null,\n  users: [],\n  selectedProject: null,\n  taskActions: [],\n  selectedBoard: null,\n  readNotifications: [],\n  notifications: [],\n  pendingUserNotifications: [],\n  filters: {\n    assignee: \"\",\n    priority: \"\",\n    status: \"\",\n    deadline: \"\"\n  },\n  sortBy: \"created\",\n  sortOrder: \"desc\",\n  settings: {\n    theme: \"dark\",\n    language: \"ru\",\n    compactMode: false,\n    showAvatars: true,\n    emailNotifications: true,\n    pushNotifications: true,\n    taskReminders: true,\n    telegramNotifications: true,\n    taskAssigned: true,\n    taskCompleted: true,\n    deadlineReminder: true,\n    projectUpdates: true\n  }\n};\n\n// Load settings from localStorage\nconst loadSettings = (): AppState[\"settings\"] => {\n  if (typeof window === \"undefined\") return initialState.settings;\n  \n  try {\n    const saved = localStorage.getItem(\"encore-tasks-settings\");\n    if (saved) {\n      return { ...initialState.settings, ...JSON.parse(saved) };\n    }\n  } catch (error) {\n    console.error(\"Failed to load settings:\", error);\n  }\n  return initialState.settings;\n};\n\n// Save settings to localStorage\nconst saveSettings = (settings: AppState[\"settings\"]) => {\n  if (typeof window === \"undefined\") return;\n  \n  try {\n    localStorage.setItem(\"encore-tasks-settings\", JSON.stringify(settings));\n  } catch (error) {\n    console.error(\"Failed to save settings:\", error);\n  }\n};\n\n// Convert API types to app types\nconst convertApiUserToUser = (apiUser: ApiUser): User => ({\n  id: apiUser.id,\n  name: apiUser.name,\n  email: apiUser.email,\n  role: apiUser.role,\n  isApproved: apiUser.approval_status === 'approved' || apiUser.status === 'approved' || apiUser.role === 'admin',\n  createdAt: new Date(apiUser.createdAt),\n  avatar: apiUser.avatar\n});\n\nconst convertApiProjectToProject = (apiProject: ApiProject): Project => ({\n  id: apiProject.id,\n  name: apiProject.name,\n  description: apiProject.description || '',\n  color: apiProject.color,\n  members: [], // Will be loaded separately\n  createdBy: apiProject.createdBy,\n  createdAt: new Date(apiProject.createdAt),\n  telegramChatId: undefined // Will be added later if needed\n});\n\nconst convertApiBoardToBoard = (apiBoard: ApiBoard): Board => ({\n  id: apiBoard.id,\n  name: apiBoard.name,\n  projectId: apiBoard.projectId,\n  columns: [], // Will be loaded separately\n  createdAt: new Date(apiBoard.createdAt)\n});\n\nconst convertApiTaskToTask = (apiTask: ApiTask): Task => ({\n  id: apiTask.id,\n  title: apiTask.title,\n  description: apiTask.description || '',\n  status: apiTask.status as TaskStatus,\n  priority: apiTask.priority,\n  assignee: apiTask.assignees?.[0] ? convertApiUserToUser(apiTask.assignees[0]) : undefined,\n  assignees: apiTask.assignees?.map(convertApiUserToUser) || [],\n  reporter: {\n    id: apiTask.reporterId,\n    name: apiTask.reporterName,\n    email: '',\n    role: 'user',\n    isApproved: true,\n    createdAt: new Date()\n  },\n  projectId: apiTask.projectId,\n  boardId: apiTask.boardId,\n  subtasks: [], // Will be loaded separately if needed\n  deadline: apiTask.deadline ? new Date(apiTask.deadline) : undefined,\n  attachments: [], // Will be loaded separately if needed\n  comments: [], // Will be loaded separately if needed\n  tags: apiTask.tags?.map(tag => tag.name) || [],\n  createdAt: new Date(apiTask.createdAt),\n  updatedAt: new Date(apiTask.updatedAt),\n  position: apiTask.position\n});\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return { ...state, isLoading: action.payload };\n\n    case \"SET_CURRENT_USER\":\n    case \"LOGIN\":\n      return {\n        ...state,\n        currentUser: action.payload,\n        isAuthenticated: true\n      };\n\n    case \"LOGOUT\":\n      return {\n        ...state,\n        currentUser: null,\n        isAuthenticated: false,\n        projects: [],\n        boards: [],\n        tasks: [],\n        users: [],\n        selectedProject: null,\n        selectedBoard: null\n      };\n\n    case \"SET_USERS\":\n      return { ...state, users: action.payload };\n\n    case \"ADD_USER\":\n      return { ...state, users: [...state.users, action.payload] };\n\n    case \"UPDATE_USER\":\n      return {\n        ...state,\n        users: state.users.map(user =>\n          user.id === action.payload.id ? action.payload : user\n        ),\n        currentUser:\n          state.currentUser?.id === action.payload.id\n            ? action.payload\n            : state.currentUser\n      };\n\n    case \"SET_PROJECTS\":\n      return { ...state, projects: action.payload };\n\n    case \"ADD_PROJECT\":\n      return { ...state, projects: [...state.projects, action.payload] };\n\n    case \"UPDATE_PROJECT\":\n      return {\n        ...state,\n        projects: state.projects.map(project =>\n          project.id === action.payload.id ? action.payload : project\n        ),\n        selectedProject:\n          state.selectedProject?.id === action.payload.id\n            ? action.payload\n            : state.selectedProject\n      };\n\n    case \"DELETE_PROJECT\":\n      return {\n        ...state,\n        projects: state.projects.filter(project => project.id !== action.payload),\n        selectedProject:\n          state.selectedProject?.id === action.payload ? null : state.selectedProject\n      };\n\n    case \"SELECT_PROJECT\":\n      return { ...state, selectedProject: action.payload };\n\n    case \"SET_BOARDS\":\n      return { ...state, boards: action.payload };\n\n    case \"ADD_BOARD\":\n      return { ...state, boards: [...state.boards, action.payload] };\n\n    case \"UPDATE_BOARD\":\n      return {\n        ...state,\n        boards: state.boards.map(board =>\n          board.id === action.payload.id ? action.payload : board\n        ),\n        selectedBoard:\n          state.selectedBoard?.id === action.payload.id\n            ? action.payload\n            : state.selectedBoard\n      };\n\n    case \"DELETE_BOARD\":\n      return {\n        ...state,\n        boards: state.boards.filter(board => board.id !== action.payload),\n        selectedBoard:\n          state.selectedBoard?.id === action.payload ? null : state.selectedBoard\n      };\n\n    case \"SELECT_BOARD\":\n      return { ...state, selectedBoard: action.payload };\n\n    case \"SET_TASKS\":\n      return { ...state, tasks: action.payload };\n\n    case \"ADD_TASK\":\n      return { ...state, tasks: [...state.tasks, action.payload] };\n\n    case \"UPDATE_TASK\":\n      return {\n        ...state,\n        tasks: state.tasks.map(task =>\n          task.id === action.payload.id ? action.payload : task\n        )\n      };\n\n    case \"DELETE_TASK\":\n      return {\n        ...state,\n        tasks: state.tasks.filter(task => task.id !== action.payload)\n      };\n\n    case \"SET_FILTERS\":\n      return {\n        ...state,\n        filters: { ...state.filters, ...action.payload }\n      };\n\n    case \"SET_SORT\":\n      return {\n        ...state,\n        sortBy: action.payload.sortBy,\n        sortOrder: action.payload.sortOrder\n      };\n\n    case \"SET_FILTERED_TASKS\":\n      return { ...state, filteredTasks: action.payload };\n\n    case \"CLEAR_FILTERED_TASKS\":\n      return { ...state, filteredTasks: null };\n\n    case \"ADD_NOTIFICATION\":\n      return {\n        ...state,\n        notifications: [action.payload, ...state.notifications]\n      };\n\n    case \"MARK_NOTIFICATION_READ\":\n      return {\n        ...state,\n        notifications: state.notifications.map(notification =>\n          notification.id === action.payload\n            ? { ...notification, isRead: true }\n            : notification\n        )\n      };\n\n    case \"MARK_ALL_NOTIFICATIONS_READ\":\n      return {\n        ...state,\n        notifications: state.notifications.map(notification => ({\n          ...notification,\n          isRead: true\n        }))\n      };\n\n    case \"UPDATE_SETTINGS\":\n      const newSettings = { ...state.settings, ...action.payload };\n      saveSettings(newSettings);\n      return { ...state, settings: newSettings };\n\n    default:\n      return state;\n  }\n}\n\nconst AppContext = createContext<{\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  // API methods\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => Promise<void>;\n  loadProjects: () => Promise<void>;\n  loadBoards: (projectId?: string) => Promise<void>;\n  loadTasks: (params?: { projectId?: string; boardId?: string }) => Promise<void>;\n  loadUsers: () => Promise<void>;\n  createProject: (projectData: { name: string; description?: string; color?: string }) => Promise<boolean>;\n  createBoard: (boardData: { name: string; description?: string; projectId: string }) => Promise<boolean>;\n  createTask: (taskData: {\n    title: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    assigneeId?: string;\n    columnId: string;\n    position?: number;\n    dueDate?: Date;\n    estimatedHours?: number;\n    tags?: string[];\n  }) => Promise<boolean>;\n  updateTask: (taskId: string, updateData: any) => Promise<boolean>;\n  deleteTask: (taskId: string) => Promise<boolean>;\n  updateUser: (userId: string, updateData: { role?: string; status?: string }) => Promise<boolean>;\n  deleteUser: (userId: string) => Promise<boolean>;\n} | null>(null);\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(appReducer, {\n    ...initialState,\n    settings: loadSettings()\n  });\n\n  // Initialize authentication on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      dispatch({ type: \"SET_LOADING\", payload: true });\n      \n      try {\n        // Check if user is already authenticated\n        const response = await api.getCurrentUser();\n        \n        if (response.data?.user && !response.error) {\n          const user = convertApiUserToUser(response.data.user);\n          dispatch({ type: \"LOGIN\", payload: user });\n          \n          // Load initial data\n          // await Promise.all([\n          //   loadProjects(),\n          //   loadUsers()\n          // ]);\n        }\n      } catch (error) {\n        console.log('No existing session found');\n      } finally {\n        dispatch({ type: \"SET_LOADING\", payload: false });\n      }\n    };\n    \n    initializeAuth();\n  }, []);\n\n  // API methods\n  const login = async (email: string, password: string): Promise<boolean> => {\n    dispatch({ type: \"SET_LOADING\", payload: true });\n    \n    try {\n      const response = await api.login(email, password);\n      \n      if (response.error) {\n        return false;\n      }\n      \n      if (response.data?.user) {\n        const user = convertApiUserToUser(response.data.user);\n        dispatch({ type: \"LOGIN\", payload: user });\n        \n        // Load initial data\n        // await Promise.all([\n        //   loadProjects(),\n        //   loadUsers()\n        // ]);\n        \n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false });\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      await api.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      dispatch({ type: \"LOGOUT\" });\n    }\n  };\n\n  const loadProjects = useCallback(async (): Promise<void> => {\n    try {\n      const response = await api.getProjects();\n      \n      if (response.error) {\n        console.error('Load projects error:', response.error);\n        return;\n      }\n      \n      if (response.data?.projects) {\n        const projects = response.data.projects.map(convertApiProjectToProject);\n        dispatch({ type: \"SET_PROJECTS\", payload: projects });\n      }\n    } catch (error) {\n      console.error('Failed to load projects:', error);\n    }\n  }, [dispatch]);\n\n  const loadBoards = useCallback(async (projectId?: string): Promise<void> => {\n    try {\n      const response = await api.getBoards(projectId);\n      \n      if (response.error) {\n        console.error('Load boards error:', response.error);\n        return;\n      }\n      \n      if (response.data?.boards) {\n        const boards = response.data.boards.map(convertApiBoardToBoard);\n        \n        // Загружаем колонки для каждой доски\n        for (const board of boards) {\n          try {\n            const columnsResponse = await api.getColumns(board.id.toString());\n            if (columnsResponse.data?.columns) {\n              board.columns = columnsResponse.data.columns.map((col: any) => ({\n                id: col.id.toString(), // Convert to string for consistency\n                name: col.name,\n                title: col.name, // Add title for compatibility\n                color: col.color,\n                position: col.position,\n                tasks: [] // Tasks will be loaded separately\n              }));\n            }\n          } catch (error) {\n            console.error(`Failed to load columns for board ${board.id}:`, error);\n          }\n        }\n        \n        dispatch({ type: \"SET_BOARDS\", payload: boards });\n        \n        // Автоматически выбираем первую доску, если нет выбранной доски или она не принадлежит текущему проекту\n        if (boards.length > 0) {\n          const currentSelectedBoard = state.selectedBoard;\n          const shouldSelectNewBoard = !currentSelectedBoard || \n            !boards.find(board => board.id === currentSelectedBoard.id);\n          \n          if (shouldSelectNewBoard) {\n            dispatch({ type: \"SELECT_BOARD\", payload: boards[0] });\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load boards:', error);\n    }\n  }, [dispatch, state.selectedBoard]);\n\n  const loadTasks = useCallback(async (params?: { projectId?: string; boardId?: string }): Promise<void> => {\n    try {\n      const response = await api.getTasks(params);\n      \n      if (response.error) {\n        console.error('Load tasks error:', response.error);\n        return;\n      }\n      \n      if (response.data?.tasks) {\n        const tasks = response.data.tasks.map(convertApiTaskToTask);\n        dispatch({ type: \"SET_TASKS\", payload: tasks });\n      }\n    } catch (error) {\n      console.error('Failed to load tasks:', error);\n    }\n  }, [dispatch]);\n\n  const loadUsers = useCallback(async (): Promise<void> => {\n    try {\n      const response = await api.getUsers();\n      \n      if (response.error) {\n        console.error('Load users error:', response.error);\n        return;\n      }\n      \n      if (response.data?.users) {\n        const users = response.data.users.map(convertApiUserToUser);\n        dispatch({ type: \"SET_USERS\", payload: users });\n      }\n    } catch (error) {\n      console.error('Failed to load users:', error);\n    }\n  }, [dispatch]);\n\n  const createProject = async (projectData: {\n    name: string;\n    description?: string;\n    color?: string;\n  }): Promise<boolean> => {\n    try {\n      const response = await api.createProject({\n        ...projectData,\n        color: projectData.color || '#6366f1'\n      });\n      \n      if (response.error) {\n        console.error('Create project error:', response.error);\n        return false;\n      }\n      \n      if (response.data?.project) {\n        const project = convertApiProjectToProject(response.data.project);\n        dispatch({ type: \"ADD_PROJECT\", payload: project });\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to create project:', error);\n      return false;\n    }\n  };\n\n  const createBoard = async (boardData: {\n    name: string;\n    description?: string;\n    projectId: string;\n  }): Promise<boolean> => {\n    try {\n      const response = await api.createBoard({\n        name: boardData.name,\n        description: boardData.description,\n        projectId: boardData.projectId,\n        visibility: 'public',\n        color: '#6366f1',\n        allowComments: true,\n        allowAttachments: true,\n        autoArchive: false\n      });\n      \n      if (response.error) {\n        console.error('Create board error:', response.error);\n        return false;\n      }\n      \n      if (response.data?.board) {\n        const board = convertApiBoardToBoard(response.data.board);\n        dispatch({ type: \"ADD_BOARD\", payload: board });\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to create board:', error);\n      return false;\n    }\n  };\n\n  const createTask = async (taskData: {\n    title: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    assigneeId?: string;\n    columnId: string;\n    position?: number;\n    dueDate?: Date;\n    estimatedHours?: number;\n    tags?: string[];\n  }): Promise<boolean> => {\n    try {\n      const response = await api.createTask({\n        title: taskData.title,\n        description: taskData.description,\n        status: taskData.status || 'todo',\n        priority: taskData.priority || 'medium',\n        assigneeId: taskData.assigneeId,\n        columnId: taskData.columnId,\n        position: taskData.position || 0,\n        dueDate: taskData.dueDate,\n        estimatedHours: taskData.estimatedHours,\n        tags: taskData.tags || []\n      });\n      \n      if (response.error) {\n        console.error('Create task error:', response.error);\n        return false;\n      }\n      \n      if (response.data?.task) {\n        const task = convertApiTaskToTask(response.data.task);\n        dispatch({ type: \"ADD_TASK\", payload: task });\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to create task:', error);\n      return false;\n    }\n  };\n\n  const updateTask = async (taskId: string, updateData: any): Promise<boolean> => {\n    try {\n      const response = await api.updateTask(taskId, updateData);\n      \n      if (response.error) {\n        console.error('Update task error:', response.error);\n        return false;\n      }\n      \n      if (response.data?.task) {\n        const task = convertApiTaskToTask(response.data.task);\n        dispatch({ type: \"UPDATE_TASK\", payload: task });\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Failed to update task:', error);\n      return false;\n    }\n  };\n\n  const deleteTask = async (taskId: string): Promise<boolean> => {\n    try {\n      const response = await api.deleteTask(taskId);\n      \n      if (response.error) {\n        console.error('Delete task error:', response.error);\n        return false;\n      }\n      \n      dispatch({ type: \"DELETE_TASK\", payload: taskId });\n      return true;\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n      return false;\n    }\n  };\n\n  const deleteProject = async (projectId: string): Promise<boolean> => {\n    try {\n      const response = await api.deleteProject(projectId);\n      \n      if (response.error) {\n        console.error('Delete project error:', response.error);\n        return false;\n      }\n      \n      dispatch({ type: \"DELETE_PROJECT\", payload: projectId });\n      return true;\n    } catch (error) {\n      console.error('Failed to delete project:', error);\n      return false;\n    }\n  };\n\n  const deleteBoard = async (boardId: string): Promise<boolean> => {\n    try {\n      const response = await api.deleteBoard(boardId);\n      \n      if (response.error) {\n        console.error('Delete board error:', response.error);\n        return false;\n      }\n      \n      dispatch({ type: \"DELETE_BOARD\", payload: boardId });\n      return true;\n    } catch (error) {\n      console.error('Failed to delete board:', error);\n      return false;\n    }\n  };\n\n  const updateUser = async (userId: string, updateData: { role?: string; status?: string }): Promise<boolean> => {\n    try {\n      const response = await api.updateUser(userId, updateData);\n      \n      if (response.error) {\n        console.error('Update user error:', response.error);\n        return false;\n      }\n      \n      if (response.data?.user) {\n        const updatedUser = convertApiUserToUser(response.data.user);\n        dispatch({ type: \"UPDATE_USER\", payload: updatedUser });\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to update user:', error);\n      return false;\n    }\n  };\n\n  const deleteUser = async (userId: string): Promise<boolean> => {\n    try {\n      const response = await api.deleteUser(userId);\n      \n      if (response.error) {\n        console.error('Delete user error:', response.error);\n        return false;\n      }\n      \n      dispatch({ type: \"REJECT_USER\", payload: userId });\n      return true;\n    } catch (error) {\n      console.error('Failed to delete user:', error);\n      return false;\n    }\n  };\n\n  const contextValue = {\n    state,\n    dispatch,\n    login,\n    logout,\n    loadProjects,\n    loadBoards,\n    loadTasks,\n    loadUsers,\n    createProject,\n    createBoard,\n    createTask,\n    updateTask,\n    deleteTask,\n    deleteProject,\n    updateUser,\n    deleteUser\n  };\n\n  return (\n    <AppContext.Provider value={contextValue}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useApp must be used within an AppProvider\");\n  }\n  return context;\n}\n\nexport { createNotification };\nexport type { Notification, AppState, AppAction };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1169, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/hooks/useConfirmation.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport ConfirmationModal from '@/components/ConfirmationModal';\n\ninterface ConfirmationOptions {\n  title: string;\n  message: string;\n  confirmText?: string;\n  cancelText?: string;\n  type?: 'danger' | 'warning' | 'info';\n}\n\ninterface UseConfirmationReturn {\n  ConfirmationComponent: () => React.ReactNode;\n  confirm: (options: ConfirmationOptions) => Promise<boolean>;\n}\n\nexport const useConfirmation = (): UseConfirmationReturn => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [options, setOptions] = useState<ConfirmationOptions | null>(null);\n  const [resolvePromise, setResolvePromise] = useState<((value: boolean) => void) | null>(null);\n\n  const confirm = useCallback((confirmationOptions: ConfirmationOptions): Promise<boolean> => {\n    return new Promise((resolve) => {\n      setOptions(confirmationOptions);\n      setResolvePromise(() => resolve);\n      setIsOpen(true);\n    });\n  }, []);\n\n  const handleConfirm = useCallback(() => {\n    if (resolvePromise) {\n      resolvePromise(true);\n    }\n    setIsOpen(false);\n    setOptions(null);\n    setResolvePromise(null);\n  }, [resolvePromise]);\n\n  const handleCancel = useCallback(() => {\n    if (resolvePromise) {\n      resolvePromise(false);\n    }\n    setIsOpen(false);\n    setOptions(null);\n    setResolvePromise(null);\n  }, [resolvePromise]);\n\n  const ConfirmationComponent = useCallback(() => {\n    if (!options) return null;\n\n    return (\n      <ConfirmationModal\n        isOpen={isOpen}\n        onClose={handleCancel}\n        onConfirm={handleConfirm}\n        title={options.title}\n        message={options.message}\n        confirmText={options.confirmText}\n        cancelText={options.cancelText}\n        type={options.type}\n      />\n    );\n  }, [isOpen, options, handleCancel, handleConfirm]);\n\n  return {\n    ConfirmationComponent,\n    confirm\n  };\n};\n\nexport default useConfirmation;"],"names":[],"mappings":";;;;;AAAA;AACA;;;;AAeO,MAAM,kBAAkB;IAC7B,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACrC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAA8B;IACnE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqC;IAExF,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC3B,OAAO,IAAI,QAAQ,CAAC;YAClB,WAAW;YACX,kBAAkB,IAAM;YACxB,UAAU;QACZ;IACF,GAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAChC,IAAI,gBAAgB;YAClB,eAAe;QACjB;QACA,UAAU;QACV,WAAW;QACX,kBAAkB;IACpB,GAAG;QAAC;KAAe;IAEnB,MAAM,eAAe,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QAC/B,IAAI,gBAAgB;YAClB,eAAe;QACjB;QACA,UAAU;QACV,WAAW;QACX,kBAAkB;IACpB,GAAG;QAAC;KAAe;IAEnB,MAAM,wBAAwB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACxC,IAAI,CAAC,SAAS,OAAO;QAErB,qBACE,8OAAC,uIAAA,CAAA,UAAiB;YAChB,QAAQ;YACR,SAAS;YACT,WAAW;YACX,OAAO,QAAQ,KAAK;YACpB,SAAS,QAAQ,OAAO;YACxB,aAAa,QAAQ,WAAW;YAChC,YAAY,QAAQ,UAAU;YAC9B,MAAM,QAAQ,IAAI;;;;;;IAGxB,GAAG;QAAC;QAAQ;QAAS;QAAc;KAAc;IAEjD,OAAO;QACL;QACA;IACF;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 1244, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/services/telegram.ts"],"sourcesContent":["import { Task, Project } from \"@/types\";\n\n// Use environment variable or fallback to empty string for security\nconst TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || \"\";\nconst TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;\n\n// Check if we're in a browser environment and if the token is valid\nconst isValidEnvironment = () => {\n  if (typeof window === 'undefined') return false;\n  if (!TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN === 'your_bot_token_here') {\n    console.warn('Telegram bot token not configured. Please set NEXT_PUBLIC_TELEGRAM_BOT_TOKEN environment variable.');\n    return false;\n  }\n  return true;\n};\n\ninterface TelegramMessage {\n  chat_id: string;\n  text: string;\n  parse_mode?: \"HTML\" | \"Markdown\";\n  message_thread_id?: string;\n}\n\nexport class TelegramService {\n  static async sendMessage(message: TelegramMessage): Promise<boolean> {\n    // Skip if not in valid environment\n    if (!isValidEnvironment()) {\n      console.warn('Telegram service not available in current environment');\n      return false;\n    }\n\n    // Validate required fields\n    if (!message.chat_id || !message.text) {\n      console.error('Telegram message validation failed: chat_id and text are required');\n      return false;\n    }\n\n    try {\n      const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(message)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage;\n        try {\n          const errorData = JSON.parse(errorText);\n          errorMessage = errorData.description || errorText;\n        } catch {\n          errorMessage = errorText;\n        }\n        console.error('Telegram API error:', response.status, errorMessage);\n        return false;\n      }\n\n      const result = await response.json();\n      return result.ok;\n    } catch (error) {\n      console.error(\"Failed to send Telegram message:\", error);\n      return false;\n    }\n  }\n\n  static async sendTaskNotification(\n  task: Task,\n  project: Project,\n  action: \"created\" | \"updated\" | \"moved\" | \"completed\" | \"assigned\",\n  details?: string)\n  : Promise<boolean> {\n    // Skip if not in valid environment\n    if (!isValidEnvironment()) {\n      return false;\n    }\n\n    if (!project.telegramChatId) {\n      console.warn(\"No Telegram chat ID configured for project:\", project.name);\n      return false;\n    }\n\n    const actionEmojis = {\n      created: \"🆕\",\n      updated: \"✏️\",\n      moved: \"🔄\",\n      completed: \"✅\",\n      assigned: \"👤\"\n    };\n\n    const priorityEmojis = {\n      low: \"🟢\",\n      medium: \"🟡\",\n      high: \"🟠\",\n      urgent: \"🔴\"\n    };\n\n    const statusEmojis = {\n      todo: \"📋\",\n      \"in-progress\": \"⚡\",\n      review: \"👀\",\n      done: \"✅\",\n      archived: \"📦\"\n    };\n\n    let messageText = `${actionEmojis[action]} <b>Задача ${\n    action === \"created\" ?\n    \"создана\" :\n    action === \"updated\" ?\n    \"обновлена\" :\n    action === \"moved\" ?\n    \"перемещена\" :\n    action === \"completed\" ?\n    \"завершена\" :\n    \"назначена\"}</b>\\n\\n`;\n\n\n    messageText += `📝 <b>${task.title}</b>\\n`;\n\n    if (task.description) {\n      messageText += `📄 ${task.description.substring(0, 100)}${task.description.length > 100 ? \"...\" : \"\"}\\n`;\n    }\n\n    messageText += `${priorityEmojis[task.priority]} Приоритет: ${\n    task.priority === \"low\" ?\n    \"Низкий\" :\n    task.priority === \"medium\" ?\n    \"Средний\" :\n    task.priority === \"high\" ?\n    \"Высокий\" :\n    \"Срочный\"}\\n`;\n\n\n    messageText += `${statusEmojis[task.status]} Статус: ${\n    task.status === \"todo\" ?\n    \"К выполнению\" :\n    task.status === \"in-progress\" ?\n    \"В работе\" :\n    \"Выполнено\"}\\n`;\n\n\n    const assignees = task.assignees || (task.assignee ? [task.assignee] : []);\n    if (assignees.length > 0) {\n      if (assignees.length === 1) {\n        messageText += `👤 Исполнитель: ${assignees[0].name}\\n`;\n      } else {\n        messageText += `👥 Исполнители: ${assignees.map(a => a.name).join(\", \")}\\n`;\n      }\n    }\n\n    if (task.deadline) {\n      const deadline = new Date(task.deadline);\n      messageText += `⏰ Дедлайн: ${deadline.toLocaleDateString(\"ru-RU\")}\\n`;\n    }\n\n    messageText += `🏷️ Проект: ${project.name}\\n`;\n\n    if (details) {\n      messageText += `\\n💬 ${details}`;\n    }\n\n    const message: TelegramMessage = {\n      chat_id: project.telegramChatId,\n      text: messageText,\n      parse_mode: \"HTML\"\n    };\n\n    if (project.telegramTopicId) {\n      message.message_thread_id = project.telegramTopicId;\n    }\n\n    return await this.sendMessage(message);\n  }\n\n  static async sendProjectNotification(\n  project: Project,\n  message: string,\n  type: \"info\" | \"warning\" | \"error\" = \"info\")\n  : Promise<boolean> {\n    if (!project.telegramChatId) {\n      return false;\n    }\n\n    const typeEmojis = {\n      info: \"ℹ️\",\n      warning: \"⚠️\",\n      error: \"❌\"\n    };\n\n    const messageText = `${typeEmojis[type]} <b>Проект: ${project.name}</b>\\n\\n${message}`;\n\n    const telegramMessage: TelegramMessage = {\n      chat_id: project.telegramChatId,\n      text: messageText,\n      parse_mode: \"HTML\"\n    };\n\n    if (project.telegramTopicId) {\n      telegramMessage.message_thread_id = project.telegramTopicId;\n    }\n\n    return await this.sendMessage(telegramMessage);\n  }\n\n  static async sendDailyReport(\n  project: Project,\n  tasks: Task[])\n  : Promise<boolean> {\n    if (!project.telegramChatId) {\n      return false;\n    }\n\n    const today = new Date();\n    const todayTasks = tasks.filter((task) => {\n      const taskDate = new Date(task.createdAt);\n      return taskDate.toDateString() === today.toDateString();\n    });\n\n    const completedTasks = tasks.filter((task) => task.status === \"done\");\n    const inProgressTasks = tasks.filter(\n      (task) => task.status === \"in-progress\"\n    );\n    const overdueTasks = tasks.filter((task) => {\n      if (!task.deadline) return false;\n      return new Date(task.deadline) < today && task.status !== \"done\";\n    });\n\n    let messageText = `📊 <b>Ежедневный отчет - ${today.toLocaleDateString(\"ru-RU\")}</b>\\n`;\n    messageText += `🏷️ Проект: ${project.name}\\n\\n`;\n\n    messageText += `📈 <b>Статистика:</b>\\n`;\n    messageText += `• Всего задач: ${tasks.length}\\n`;\n    messageText += `• Создано сегодня: ${todayTasks.length}\\n`;\n    messageText += `• Выполнено: ${completedTasks.length}\\n`;\n    messageText += `• В работе: ${inProgressTasks.length}\\n`;\n    messageText += `• Просрочено: ${overdueTasks.length}\\n\\n`;\n\n    if (overdueTasks.length > 0) {\n      messageText += `⚠️ <b>Просроченные задачи:</b>\\n`;\n      overdueTasks.slice(0, 5).forEach((task) => {\n        const assignees = task.assignees || (task.assignee ? [task.assignee] : []);\n        const assigneeText = assignees.length > 0 ? assignees.map(a => a.name).join(\", \") : \"Не назначено\";\n        messageText += `• ${task.title} (${assigneeText})\\n`;\n      });\n      if (overdueTasks.length > 5) {\n        messageText += `• ... и еще ${overdueTasks.length - 5} задач\\n`;\n      }\n    }\n\n    const message: TelegramMessage = {\n      chat_id: project.telegramChatId,\n      text: messageText,\n      parse_mode: \"HTML\"\n    };\n\n    if (project.telegramTopicId) {\n      message.message_thread_id = project.telegramTopicId;\n    }\n\n    return await this.sendMessage(message);\n  }\n\n  static async testConnection(\n  chatId: string,\n  topicId?: string)\n  : Promise<boolean> {\n    const message: TelegramMessage = {\n      chat_id: chatId,\n      text: \"🤖 Тестовое сообщение от ENCORE | TASKS\\n\\nИнтеграция с Telegram настроена успешно!\",\n      parse_mode: \"HTML\"\n    };\n\n    if (topicId) {\n      message.message_thread_id = topicId;\n    }\n\n    return await this.sendMessage(message);\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1442, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/utils/taskLogger.ts"],"sourcesContent":["import { TaskAction } from '@/types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const createTaskAction = (\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  userId: string,\n  userName: string,\n  action: TaskAction['action'],\n  description: string,\n  oldValue?: string,\n  newValue?: string,\n  changes?: TaskAction['changes']\n): TaskAction => {\n  return {\n    id: uuidv4(),\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    action,\n    description,\n    timestamp: new Date().toISOString(),\n    oldValue,\n    newValue,\n    changes\n  };\n};\n\nexport const logTaskCreated = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'created',\n    `Создана задача \"${taskTitle}\"`\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskDeleted = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'deleted',\n    `Удалена задача \"${taskTitle}\"`\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskMoved = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  fromColumn: string,\n  toColumn: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'moved',\n    `Перемещена задача \"${taskTitle}\" из \"${fromColumn}\" в \"${toColumn}\"`,\n    fromColumn,\n    toColumn\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskAssigned = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  assigneeName: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'assigned',\n    `Назначен исполнитель \"${assigneeName}\" для задачи \"${taskTitle}\"`\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskAssigneesChanged = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  oldAssignees: string[],\n  newAssignees: string[]\n) => {\n  const added = newAssignees.filter(name => !oldAssignees.includes(name));\n  const removed = oldAssignees.filter(name => !newAssignees.includes(name));\n  \n  let description = `Изменены исполнители задачи \"${taskTitle}\"`;\n  if (added.length > 0) {\n    description += `. Добавлены: ${added.join(', ')}`;\n  }\n  if (removed.length > 0) {\n    description += `. Удалены: ${removed.join(', ')}`;\n  }\n  \n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'assigned',\n    description,\n    oldAssignees.join(', '),\n    newAssignees.join(', ')\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskUnassigned = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  assigneeName: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'unassigned',\n    `Снят исполнитель \"${assigneeName}\" с задачи \"${taskTitle}\"`\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskStatusChanged = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  oldStatus: string,\n  newStatus: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'status_changed',\n    `Изменен статус задачи \"${taskTitle}\" с \"${oldStatus}\" на \"${newStatus}\"`,\n    oldStatus,\n    newStatus\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskPriorityChanged = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  oldPriority: string,\n  newPriority: string\n) => {\n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'priority_changed',\n    `Изменен приоритет задачи \"${taskTitle}\" с \"${oldPriority}\" на \"${newPriority}\"`,\n    oldPriority,\n    newPriority\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};\n\nexport const logTaskUpdated = (\n  dispatch: any,\n  taskId: string,\n  boardId: string,\n  projectId: string,\n  taskTitle: string,\n  userId: string,\n  userName: string,\n  changes: TaskAction['changes']\n) => {\n  const changeDescriptions = changes?.map(change => {\n    const fieldNames: Record<string, string> = {\n      title: 'название',\n      description: 'описание',\n      priority: 'приоритет',\n      assignees: 'исполнители',\n      deadline: 'срок выполнения',\n      tags: 'теги'\n    };\n    return `${fieldNames[change.field] || change.field}: \"${change.oldValue}\" → \"${change.newValue}\"`;\n  }) || [];\n  \n  const action = createTaskAction(\n    taskId,\n    boardId,\n    projectId,\n    userId,\n    userName,\n    'updated',\n    `Обновлена задача \"${taskTitle}\": ${changeDescriptions.join(', ')}`,\n    undefined,\n    undefined,\n    changes\n  );\n  dispatch({ type: 'ADD_TASK_ACTION', payload: action });\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1561, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { AppProvider } from \"@/contexts/AppContext\";\nimport { Layout } from \"@/components/Layout\";\nimport { KanbanBoard } from \"@/components/KanbanBoard\";\nimport { NotificationProvider } from \"@/components/notifications\";\n\nexport default function Page() {\n  return (\n    <AppProvider data-oid=\"ih2_dzp\">\n      <NotificationProvider>\n        <Layout data-oid=\"zy0y3-c\">\n          <KanbanBoard data-oid=\":_ayqqp\" />\n        </Layout>\n      </NotificationProvider>\n    </AppProvider>);\n\n}"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AAAA;AALA;;;;;;AAOe,SAAS;IACtB,qBACE,8OAAC,8HAAA,CAAA,cAAW;QAAC,YAAS;kBACpB,cAAA,8OAAC,yJAAA,CAAA,uBAAoB;sBACnB,cAAA,8OAAC,4HAAA,CAAA,SAAM;gBAAC,YAAS;0BACf,cAAA,8OAAC,iIAAA,CAAA,cAAW;oBAAC,YAAS;;;;;;;;;;;;;;;;;;;;;AAKhC","debugId":null}}]
}