{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/postgresql-adapter.ts"],"sourcesContent":["import { Pool, PoolClient } from 'pg';\nimport bcrypt from 'bcryptjs';\nimport { User, Project, Board, Column, Task, Comment, Attachment, Tag, Session } from '../types';\n\n// Интерфейс для конфигурации базы данных\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  database: string;\n  user: string;\n  password: string;\n  ssl?: boolean;\n}\n\n// Класс для работы с PostgreSQL\nexport class PostgreSQLAdapter {\n  private static instance: PostgreSQLAdapter | null = null;\n  private pool: Pool;\n  private isInitialized = false;\n\n  constructor(config: DatabaseConfig) {\n    this.pool = new Pool({\n      host: config.host,\n      port: config.port,\n      database: config.database,\n      user: config.user,\n      password: config.password,\n      ssl: config.ssl ? { rejectUnauthorized: false } : false,\n      max: 20, // максимальное количество соединений в пуле\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n  }\n\n  // Инициализация базы данных\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      const client = await this.pool.connect();\n      \n      // Проверяем подключение\n      await client.query('SELECT NOW()');\n      \n      console.log('✅ PostgreSQL подключение установлено');\n      client.release();\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('❌ Ошибка подключения к PostgreSQL:', error);\n      throw error;\n    }\n  }\n\n  // Закрытие пула соединений\n  async close(): Promise<void> {\n    await this.pool.end();\n    this.isInitialized = false;\n  }\n\n  // Получение клиента для транзакций\n  async getClient(): Promise<PoolClient> {\n    return await this.pool.connect();\n  }\n\n  // Выполнение запроса\n  async query(text: string, params?: any[]): Promise<any> {\n    const client = await this.pool.connect();\n    try {\n      console.log('SQL Query:', text);\n      console.log('SQL Params:', params);\n      const result = await client.query(text, params);\n      return result;\n    } finally {\n      client.release();\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ===\n\n  async createUser(email: string, password: string, name: string, role: string = 'user'): Promise<User> {\n    const hashedPassword = await bcrypt.hash(password, 12);\n    const result = await this.query(\n      `INSERT INTO users (email, password_hash, name, role, approval_status) \n       VALUES ($1, $2, $3, $4, $5) \n       RETURNING *`,\n      [email, hashedPassword, name, role, 'pending']\n    );\n    return result.rows[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const result = await this.query(\n      'SELECT * FROM users WHERE email = $1 AND deleted_at IS NULL',\n      [email]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getUserById(id: string): Promise<User | null> {\n    const result = await this.query(\n      'SELECT * FROM users WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    const row = result.rows[0];\n    if (!row) return null;\n    \n    // Маппинг полей базы данных в User интерфейс\n    return {\n      id: row.id,\n      userId: row.id, // Добавляем userId для совместимости\n      name: row.name,\n      email: row.email,\n      role: row.role,\n      status: row.is_active ? 'active' : 'inactive',\n      approval_status: row.approval_status,\n      avatar: row.avatar,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      lastLoginAt: row.last_login_at,\n      is_active: row.is_active,\n      created_at: row.created_at,\n      updated_at: row.updated_at,\n      last_login_at: row.last_login_at\n    };\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof User]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getUserById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE users SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const result = await this.query(\n      'SELECT * FROM users WHERE deleted_at IS NULL ORDER BY created_at DESC'\n    );\n    return result.rows;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE users SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ПРОЕКТОВ ===\n\n  async createProject(name: string, description: string, ownerId: string, color?: string): Promise<Project> {\n    const result = await this.query(\n      `INSERT INTO projects (name, description, creator_id, color)\n     VALUES ($1, $2, $3, $4) RETURNING *`,\n      [name, description, ownerId, color || '#3B82F6']\n    );\n    return result.rows[0];\n  }\n\n  async getProjectById(id: string): Promise<Project | null> {\n    const result = await this.query(\n      'SELECT * FROM projects WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    const result = await this.query(\n      `SELECT DISTINCT p.* FROM projects p \n       LEFT JOIN project_members pm ON p.id = pm.project_id \n       WHERE (p.creator_id = $1 OR pm.user_id = $1) AND p.deleted_at IS NULL \n       ORDER BY p.created_at DESC`,\n      [userId]\n    );\n    return result.rows;\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    const result = await this.query(\n      'SELECT * FROM projects WHERE deleted_at IS NULL ORDER BY created_at DESC'\n    );\n    return result.rows;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Project]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getProjectById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE projects SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE projects SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  async hasProjectAccess(userId: string, projectId: string): Promise<boolean> {\n    try {\n      // Проверяем, является ли пользователь владельцем проекта\n      const ownerResult = await this.query(\n        'SELECT creator_id FROM projects WHERE id = $1 AND deleted_at IS NULL',\n        [projectId]\n      );\n      \n      if (ownerResult.rows.length === 0) {\n        return false; // Проект не найден\n      }\n      \n      const projectOwner = ownerResult.rows[0].creator_id;\n      if (projectOwner === userId) {\n        return true; // Пользователь является владельцем\n      }\n      \n      // Проверяем членство в проекте\n      const memberResult = await this.query(\n        'SELECT 1 FROM project_members WHERE project_id = $1 AND user_id = $2',\n        [projectId, userId]\n      );\n      \n      return memberResult.rows.length > 0;\n    } catch (error) {\n      console.error('Error checking project access:', error);\n      return false;\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ДОСОК ===\n\n  async createBoard(name: string, description: string, projectId: string): Promise<Board> {\n    const result = await this.query(\n      `INSERT INTO boards (name, project_id) \n       VALUES ($1, $2) \n       RETURNING *`,\n      [name, projectId]\n    );\n    return result.rows[0];\n  }\n\n  async getBoardById(id: string): Promise<Board | null> {\n    const result = await this.query(\n      'SELECT * FROM boards WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getBoardsByProjectId(projectId: string): Promise<Board[]> {\n    const result = await this.query(\n      'SELECT * FROM boards WHERE project_id = $1 AND deleted_at IS NULL ORDER BY position, created_at',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async updateBoard(id: string, updates: Partial<Board>): Promise<Board | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Board]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getBoardById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE boards SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteBoard(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE boards SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ КОЛОНОК ===\n\n  async createColumn(name: string, boardId: string, position?: number, color?: string): Promise<Column> {\n\n    const result = await this.query(\n      `INSERT INTO columns (title, board_id, position, color) \n       VALUES ($1, $2, $3, $4) \n       RETURNING *`,\n      [name, boardId, position || 0, color || '#6B7280']\n    );\n    return result.rows[0];\n  }\n\n  async getColumnById(id: string): Promise<Column | null> {\n    const result = await this.query(\n      'SELECT * FROM columns WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getColumnsByBoardId(boardId: string): Promise<Column[]> {\n    const result = await this.query(\n      'SELECT * FROM columns WHERE board_id = $1 AND deleted_at IS NULL ORDER BY position, created_at',\n      [boardId]\n    );\n    return result.rows;\n  }\n\n  async updateColumn(id: string, updates: Partial<Column>): Promise<Column | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Column]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getColumnById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE columns SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteColumn(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE columns SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ЗАДАЧ ===\n\n  async createTask(taskData: Partial<Task>): Promise<Task> {\n    const {\n      title,\n      description,\n      status = 'todo',\n      priority = 'medium',\n      project_id,\n      board_id,\n      column_id,\n      assignee_id,\n      reporter_id,\n      position = 0\n    } = taskData;\n\n    const result = await this.query(\n      `INSERT INTO tasks (title, description, status, priority, project_id, board_id, column_id, assignee_id, reporter_id, position) \n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) \n       RETURNING *`,\n      [title, description, status, priority, project_id, board_id, column_id, assignee_id, reporter_id, position]\n    );\n    return result.rows[0];\n  }\n\n  async getTaskById(id: string): Promise<Task | null> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getTasksByProjectId(projectId: string): Promise<Task[]> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE project_id = $1 AND deleted_at IS NULL ORDER BY position, created_at',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async getTasksByColumnId(columnId: string): Promise<Task[]> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE column_id = $1 AND deleted_at IS NULL ORDER BY position, created_at',\n      [columnId]\n    );\n    return result.rows;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Task]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getTaskById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE tasks SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE tasks SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ СЕССИЙ ===\n\n  async createSession(sessionToken: string, userId: string, expiresAt: Date): Promise<Session> {\n    \n    const result = await this.query(\n      `INSERT INTO user_sessions (session_token, user_id, expires_at)\n     VALUES ($1, $2, $3)\n     RETURNING *`,\n      [sessionToken, userId, expiresAt]\n    );\n    \n    const row = result.rows[0];\n    return {\n      id: row.id,\n      userId: row.user_id,\n      token: row.session_token,\n      expiresAt: new Date(row.expires_at),\n      isActive: true,\n      userAgent: row.user_agent,\n      ipAddress: row.ip_address,\n      lastActivityAt: new Date(row.last_activity_at || row.created_at),\n      createdAt: new Date(row.created_at),\n      updatedAt: new Date(row.updated_at || row.created_at)\n    };\n  }\n\n  async getSessionByToken(sessionToken: string): Promise<Session | null> {\n    const result = await this.query(\n      'SELECT * FROM user_sessions WHERE session_token = $1 AND expires_at > NOW()',\n      [sessionToken]\n    );\n    \n    if (!result.rows[0]) return null;\n    \n    const row = result.rows[0];\n    return {\n      id: row.id,\n      userId: row.user_id,\n      token: row.session_token,\n      expiresAt: new Date(row.expires_at),\n      isActive: true,\n      userAgent: row.user_agent,\n      ipAddress: row.ip_address,\n      lastActivityAt: new Date(row.last_activity_at || row.created_at),\n      createdAt: new Date(row.created_at),\n      updatedAt: new Date(row.updated_at || row.created_at)\n    };\n  }\n\n  async deleteSession(sessionToken: string): Promise<boolean> {\n    const result = await this.query(\n      'DELETE FROM user_sessions WHERE session_token = $1',\n      [sessionToken]\n    );\n    return result.rowCount > 0;\n  }\n\n  async deleteExpiredSessions(): Promise<number> {\n    const result = await this.query(\n      'DELETE FROM user_sessions WHERE expires_at <= NOW()'\n    );\n    return result.rowCount;\n  }\n\n  // === МЕТОДЫ ДЛЯ КОММЕНТАРИЕВ ===\n\n  async createComment(content: string, taskId: string, authorId: string): Promise<Comment> {\n    const result = await this.query(\n      `INSERT INTO comments (content, task_id, author_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`,\n      [content, taskId, authorId]\n    );\n    return result.rows[0];\n  }\n\n  async getCommentsByTaskId(taskId: string): Promise<Comment[]> {\n    const result = await this.query(\n      'SELECT * FROM comments WHERE task_id = $1 AND deleted_at IS NULL ORDER BY created_at',\n      [taskId]\n    );\n    return result.rows;\n  }\n\n  async updateComment(id: string, content: string): Promise<Comment | null> {\n    const result = await this.query(\n      'UPDATE comments SET content = $2 WHERE id = $1 RETURNING *',\n      [id, content]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE comments SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ТЕГОВ ===\n\n  async createTag(name: string, color: string, projectId?: string): Promise<Tag> {\n    const result = await this.query(\n      `INSERT INTO tags (name, color, project_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`,\n      [name, color, projectId]\n    );\n    return result.rows[0];\n  }\n\n  async getTagsByProjectId(projectId: string): Promise<Tag[]> {\n    const result = await this.query(\n      'SELECT * FROM tags WHERE project_id = $1 ORDER BY name',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async addTagToTask(taskId: string, tagId: string): Promise<boolean> {\n    try {\n      await this.query(\n        'INSERT INTO task_tags (task_id, tag_id) VALUES ($1, $2)',\n        [taskId, tagId]\n      );\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async removeTagFromTask(taskId: string, tagId: string): Promise<boolean> {\n    const result = await this.query(\n      'DELETE FROM task_tags WHERE task_id = $1 AND tag_id = $2',\n      [taskId, tagId]\n    );\n    return result.rowCount > 0;\n  }\n\n  async getTagsByTaskId(taskId: string): Promise<Tag[]> {\n    const result = await this.query(\n      `SELECT t.* FROM tags t \n       JOIN task_tags tt ON t.id = tt.tag_id \n       WHERE tt.task_id = $1`,\n      [taskId]\n    );\n    return result.rows;\n  }\n\n  // Статический метод для получения экземпляра (Singleton)\n  static getInstance(): PostgreSQLAdapter {\n    if (!PostgreSQLAdapter.instance) {\n      const config: DatabaseConfig = {\n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT || '5432'),\n        database: process.env.DB_NAME || 'encore_tasks',\n        user: process.env.DB_USER || 'postgres',\n        password: process.env.DB_PASSWORD || 'password',\n        ssl: process.env.DB_SSL === 'true'\n      };\n      \n      PostgreSQLAdapter.instance = new PostgreSQLAdapter(config);\n    }\n    \n    return PostgreSQLAdapter.instance;\n  }\n}\n\n// Экспорт экземпляра адаптера\nlet dbAdapter: PostgreSQLAdapter | null = null;\n\nexport function getPostgreSQLAdapter(): PostgreSQLAdapter {\n  if (!dbAdapter) {\n    const config: DatabaseConfig = {\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432'),\n      database: process.env.DB_NAME || 'encore_tasks',\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || 'password',\n      ssl: process.env.DB_SSL === 'true'\n    };\n    \n    dbAdapter = new PostgreSQLAdapter(config);\n  }\n  \n  return dbAdapter;\n}\n\nexport default getPostgreSQLAdapter;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 616, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/database-adapter-optimized.ts"],"sourcesContent":["import { PostgreSQLAdapter } from './postgresql-adapter';\nimport { User, Project, Board, Column, Task, Session } from '@/types';\n\n/**\n * Оптимизированный адаптер базы данных\n * Исправляет проблемы:\n * - Устраняет повторную инициализацию при каждом запросе\n * - Использует Singleton паттерн для управления соединениями\n * - Добавляет правильную обработку ошибок\n * - Оптимизирует производительность\n */\nclass DatabaseAdapterOptimized {\n  private static instance: DatabaseAdapterOptimized;\n  private postgresqlAdapter: PostgreSQLAdapter;\n  private isInitialized = false;\n  private initializationPromise: Promise<void> | null = null;\n\n  private constructor() {\n    this.postgresqlAdapter = PostgreSQLAdapter.getInstance();\n  }\n\n  public static getInstance(): DatabaseAdapterOptimized {\n    if (!DatabaseAdapterOptimized.instance) {\n      DatabaseAdapterOptimized.instance = new DatabaseAdapterOptimized();\n    }\n    return DatabaseAdapterOptimized.instance;\n  }\n\n  /**\n   * Инициализация адаптера (вызывается только один раз)\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    this.initializationPromise = this.performInitialization();\n    return this.initializationPromise;\n  }\n\n  private async performInitialization(): Promise<void> {\n    try {\n      await this.postgresqlAdapter.initialize();\n      this.isInitialized = true;\n      console.log('✅ Database Adapter оптимизирован и готов к работе');\n    } catch (error) {\n      console.error('❌ Ошибка инициализации Database Adapter:', error);\n      this.initializationPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка инициализации перед выполнением операций\n   */\n  private async ensureInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ===\n  async createUser(email: string, password: string, name: string, role: string = 'user'): Promise<User> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createUser(email, password, name, role);\n  }\n\n  async getUserById(id: string | number): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserById(id.toString());\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserByEmail(email);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllUsers();\n  }\n\n  async getUsers(): Promise<User[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllUsers();\n  }\n\n  async updateUser(id: string | number, updates: Partial<User>): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.updateUser(id.toString(), updates);\n  }\n\n  async deleteUser(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteUser(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ СЕССИЙ ===\n  async createSession(sessionData: Omit<Session, 'id' | 'created_at' | 'last_activity_at'>): Promise<Session> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createSession(sessionData.token, sessionData.userId, sessionData.expiresAt);\n  }\n\n  async getSessionByToken(token: string): Promise<Session | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getSessionByToken(token);\n  }\n\n  async deleteSession(token: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteSession(token);\n  }\n\n  // === МЕТОДЫ ДЛЯ ПРОЕКТОВ ===\n  async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {\n    await this.ensureInitialized();\n    const { name, description, createdBy, color } = projectData;\n    return this.postgresqlAdapter.createProject(name, description || '', createdBy, color);\n  }\n\n  async getProjectById(id: string | number): Promise<Project | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectById(id.toString());\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllProjects();\n  }\n\n  async getUserProjects(userId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserProjects(userId.toString());\n  }\n\n  async getProjectsByUserId(userId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserProjects(userId.toString());\n  }\n\n  async getProjectsByCreatorId(creatorId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectsByCreatorId(creatorId.toString());\n  }\n\n  async hasProjectAccess(userId: string | number, projectId: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId.toString());\n  }\n\n  async updateProject(id: string | number, updateData: Partial<Project>): Promise<Project | null> {\n    await this.ensureInitialized();\n    const result = await this.postgresqlAdapter.updateProject(id.toString(), updateData);\n    return result;\n  }\n\n  async deleteProject(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteProject(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ ДОСОК ===\n  async createBoard(name: string, description: string, projectId: string): Promise<Board> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createBoard(name, description, projectId);\n  }\n\n  async getBoardById(id: string | number): Promise<Board | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getBoardById(id.toString());\n  }\n\n  async getProjectBoards(projectId: string | number): Promise<Board[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectBoards(projectId.toString());\n  }\n\n  async deleteBoard(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteBoard(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ КОЛОНОК ===\n  async createColumn(name: string, boardId: string, position?: number, color?: string): Promise<Column> {\n    await this.ensureInitialized();\n\n    return this.postgresqlAdapter.createColumn(name, boardId, position, color);\n  }\n\n  async getColumnById(id: string | number): Promise<Column | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getColumnById(id.toString());\n  }\n\n  async getBoardColumns(boardId: string | number): Promise<Column[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getBoardColumns(boardId.toString());\n  }\n\n  async deleteColumn(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteColumn(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ ЗАДАЧ ===\n  async createTask(taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Promise<Task> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createTask(taskData);\n  }\n\n  async getTaskById(id: string | number): Promise<Task | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getTaskById(id.toString());\n  }\n\n  async getTasks(filters: { projectId?: string | number; boardId?: string | number; status?: string; assigneeId?: string | number; priority?: string; columnId?: string | number } = {}): Promise<Task[]> {\n    await this.ensureInitialized();\n    const postgresFilters = {\n      projectId: filters.projectId ? filters.projectId.toString() : undefined,\n      boardId: filters.boardId ? filters.boardId.toString() : undefined,\n      assigneeId: filters.assigneeId ? filters.assigneeId.toString() : undefined,\n      columnId: filters.columnId ? filters.columnId.toString() : undefined\n    };\n    return this.postgresqlAdapter.getTasks(postgresFilters);\n  }\n\n  async updateTask(id: string | number, updates: Partial<Task>): Promise<Task | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.updateTask(id.toString(), updates);\n  }\n\n  async deleteTask(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteTask(id.toString());\n  }\n\n  // === СЛУЖЕБНЫЕ МЕТОДЫ ===\n  \n  /**\n   * Проверка состояния адаптера\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Получение статистики использования\n   */\n  async getStats(): Promise<{\n    isInitialized: boolean;\n    adapterType: string;\n    connectionStatus: string;\n  }> {\n    return {\n      isInitialized: this.isInitialized,\n      adapterType: 'PostgreSQL Optimized',\n      connectionStatus: this.isInitialized ? 'Connected' : 'Disconnected'\n    };\n  }\n\n  /**\n   * Очистка ресурсов\n   */\n  async cleanup(): Promise<void> {\n    if (this.isInitialized) {\n      await this.postgresqlAdapter.close();\n      this.isInitialized = false;\n      this.initializationPromise = null;\n      console.log('✅ Database Adapter очищен');\n    }\n  }\n\n  /**\n   * Полная переинициализация адаптера\n   */\n  async reinitialize(): Promise<void> {\n    await this.cleanup();\n    await this.initialize();\n  }\n\n  /**\n   * Выполнение сырого SQL запроса (для совместимости с PostgreSQL API)\n   */\n  async executeRawQuery(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.query(sql, params);\n  }\n\n  /**\n   * Выполнение SQL запроса (для совместимости с репозиториями)\n   */\n  async query(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.query(sql, params);\n  }\n\n\n}\n\n// Экспортируем singleton instance\nconst databaseAdapter = DatabaseAdapterOptimized.getInstance();\nexport default databaseAdapter;\n\n// Также экспортируем класс для тестирования\nexport { DatabaseAdapterOptimized };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 874, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport databaseAdapter from './database-adapter-optimized';\n\ninterface AuthResult {\n  success: boolean;\n  user?: {\n    userId: string;\n    email: string;\n    role: string;\n    name: string;\n  };\n  error?: string;\n}\n\nexport async function verifyAuth(request: NextRequest): Promise<AuthResult> {\n  try {\n    // Получение токена из cookie или заголовка Authorization\n    const token = request.cookies.get('auth-token')?.value || \n                  request.headers.get('authorization')?.replace('Bearer ', '');\n\n    console.log('Auth token found:', !!token);\n    if (!token) {\n      console.log('No auth token found in cookies or headers');\n      return {\n        success: false,\n        error: 'Токен аутентификации не найден'\n      };\n    }\n\n    // Проверка JWT токена\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');\n      console.log('JWT verified successfully for user:', decoded.userId);\n    } catch (jwtError) {\n      console.log('JWT verification failed:', jwtError);\n      return {\n        success: false,\n        error: 'Невалидный токен'\n      };\n    }\n\n    // Используем оптимизированный адаптер для работы с сессиями\n    await databaseAdapter.initialize();\n\n    try {\n        // Ищем сессию через адаптер\n         const session = await databaseAdapter.getSessionByToken(token);\n         console.log('Session found:', !!session);\n\n         if (!session) {\n           console.log('Session not found or expired for token');\n           return { success: false, error: 'Сессия не найдена или истекла' };\n         }\n\n       // Получаем пользователя через адаптер\n       const user = await databaseAdapter.getUserById(session.userId);\n\n      if (!user) {\n        return { success: false, error: 'Пользователь не найден' };\n      }\n\n      // Проверяем статус одобрения пользователя\n      // Используем approval_status для PostgreSQL\n      const isApproved = user.isApproved !== undefined ? user.isApproved : true;\n      \n      if (!isApproved && user.role !== 'admin') {\n        return {\n          success: false,\n          error: 'Пользователь не одобрен'\n        };\n      }\n\n      return {\n        success: true,\n        user: {\n          userId: String(user.id),\n          email: user.email,\n          role: user.role,\n          name: user.name\n        }\n      };\n    } catch (error) {\n      console.error('Auth error:', error);\n      return { success: false, error: 'Ошибка аутентификации' };\n    }\n\n  } catch (error) {\n    console.error('Ошибка проверки аутентификации:', error);\n    return {\n      success: false,\n      error: 'Внутренняя ошибка сервера'\n    };\n  }\n}\n\n// Проверка прав доступа к проекту\nexport async function verifyProjectAccess(\n  userId: string, \n  projectId: string, \n  requiredRole?: 'owner' | 'admin' | 'member'\n): Promise<{ hasAccess: boolean; userRole?: string }> {\n  try {\n    await databaseAdapter.initialize();\n\n    // Получаем проекты через адаптер\n     const projects = await databaseAdapter.getAllProjects();\n     const project = projects.find(p => p.id === projectId);\n\n     if (!project) {\n       return { hasAccess: false };\n     }\n\n     // Проверяем, является ли пользователь владельцем\n     if (project.createdBy === userId) {\n       return { hasAccess: true, userRole: 'owner' };\n     }\n\n     // Получаем участников проекта через getUserProjects\n     const userProjects = await databaseAdapter.getUserProjects(userId);\n     const hasAccess = userProjects.some((p: any) => p.id === projectId);\n\n    if (!hasAccess) {\n       return { hasAccess: false };\n     }\n\n     // Для упрощения, считаем что у пользователя есть доступ как участник\n     const userRole = 'member';\n\n     // Проверка требуемой роли\n    if (requiredRole) {\n      const roleHierarchy = { owner: 3, admin: 2, member: 1 };\n      const userRoleLevel = roleHierarchy[userRole as keyof typeof roleHierarchy] || 0;\n      const requiredRoleLevel = roleHierarchy[requiredRole];\n      \n      if (userRoleLevel < requiredRoleLevel) {\n        return { hasAccess: false, userRole };\n      }\n    }\n\n    return { hasAccess: true, userRole };\n\n  } catch (error) {\n    console.error('Ошибка проверки доступа к проекту:', error);\n    return { hasAccess: false };\n  }\n}\n\n// Middleware для проверки роли администратора\nexport async function requireAdmin(request: NextRequest) {\n  const authResult = await verifyAuth(request);\n  \n  if (!authResult.success) {\n    return { success: false, error: authResult.error };\n  }\n\n  if (authResult.user!.role !== 'admin') {\n    return { success: false, error: 'Требуются права администратора' };\n  }\n\n  return { success: true, user: authResult.user };\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1046, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/services/implementations/board.service.ts"],"sourcesContent":["/**\n * Реализация сервиса для управления досками\n * Следует принципам SOLID и использует Dependency Injection\n */\n\nimport {\n  Board,\n  BoardId,\n  ProjectId,\n  UserId,\n  CreateBoardDto,\n  UpdateBoardDto,\n  BoardFilters,\n  SortOptions,\n  PaginationOptions,\n  PaginatedResponse,\n  OperationResult,\n  BoardPermissions,\n  BoardEvent\n} from '../../types/board.types';\n\nimport {\n  IBoardService,\n  IBoardRepository,\n  IBoardValidator,\n  IBoardPermissionService,\n  IBoardEventService,\n  IBoardCacheService\n} from '../interfaces/board.service.interface';\n\n/**\n * Основная реализация сервиса досок\n * Применяет паттерн Facade для координации работы других сервисов\n */\nexport class BoardService implements IBoardService {\n  constructor(\n    private readonly boardRepository: IBoardRepository,\n    private readonly boardValidator: IBoardValidator,\n    private readonly permissionService: IBoardPermissionService,\n    private readonly eventService: IBoardEventService,\n    private readonly cacheService?: IBoardCacheService\n  ) {}\n\n  async getBoardById(id: BoardId, userId: UserId): Promise<OperationResult<Board>> {\n    try {\n      // Проверяем права доступа\n      const canView = await this.permissionService.canUserViewBoard(id, userId);\n      if (!canView) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to view this board'\n        };\n      }\n\n      // Пытаемся получить из кэша\n      let board: Board | null = null;\n      if (this.cacheService) {\n        board = await this.cacheService.getBoard(id);\n      }\n\n      // Если не в кэше, получаем из репозитория\n      if (!board) {\n        board = await this.boardRepository.findById(id);\n        if (board && this.cacheService) {\n          await this.cacheService.setBoard(board);\n        }\n      }\n\n      if (!board) {\n        return {\n          success: false,\n          error: 'Board not found'\n        };\n      }\n\n      return {\n        success: true,\n        data: board\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async getBoardsByProject(projectId: ProjectId, userId: UserId, filters?: BoardFilters): Promise<OperationResult<Board[]>> {\n    try {\n      // Пытаемся получить из кэша\n      let boards: Board[] | null = null;\n      if (this.cacheService && !filters) {\n        boards = await this.cacheService.getBoardsByProject(projectId);\n      }\n\n      // Если не в кэше, получаем из репозитория\n      if (!boards) {\n        boards = await this.boardRepository.findByProjectId(projectId, filters);\n        if (this.cacheService && !filters) {\n          await this.cacheService.setBoardsByProject(projectId, boards);\n        }\n      }\n\n      // Фильтруем доски по правам доступа\n      const accessibleBoards: Board[] = [];\n      for (const board of boards) {\n        const canView = await this.permissionService.canUserViewBoard(board.id, userId);\n        if (canView) {\n          accessibleBoards.push(board);\n        }\n      }\n\n      return {\n        success: true,\n        data: accessibleBoards\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get boards: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async getAllBoards(userId: UserId, filters?: BoardFilters, sort?: SortOptions, pagination?: PaginationOptions): Promise<OperationResult<PaginatedResponse<Board>>> {\n    try {\n      const result = await this.boardRepository.findAll(filters, sort, pagination);\n      \n      // Фильтруем доски по правам доступа\n      const accessibleBoards: Board[] = [];\n      for (const board of result.data) {\n        const canView = await this.permissionService.canUserViewBoard(board.id, userId);\n        if (canView) {\n          accessibleBoards.push(board);\n        }\n      }\n\n      return {\n        success: true,\n        data: {\n          ...result,\n          data: accessibleBoards,\n          pagination: {\n            ...result.pagination,\n            total: accessibleBoards.length\n          }\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get all boards: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async createBoard(boardData: CreateBoardDto, userId: UserId): Promise<OperationResult<Board>> {\n    try {\n      // Проверяем права на создание доски\n      const canCreate = await this.permissionService.canUserCreateBoard(boardData.projectId, userId);\n      if (!canCreate) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to create boards in this project'\n        };\n      }\n\n      // Валидируем данные\n      const validationResult = await this.boardValidator.validateCreateData(boardData);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Создаем доску\n      const board = await this.boardRepository.create({\n        ...boardData,\n        createdBy: userId\n      });\n\n      // Инвалидируем кэш проекта\n      if (this.cacheService) {\n        await this.cacheService.invalidateProjectBoards(boardData.projectId);\n      }\n\n      // Отправляем событие\n      await this.eventService.emitBoardCreated(board, userId);\n\n      return {\n        success: true,\n        data: board\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to create board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async updateBoard(id: BoardId, boardData: UpdateBoardDto, userId: UserId): Promise<OperationResult<Board>> {\n    try {\n      // Проверяем права на редактирование\n      const canEdit = await this.permissionService.canUserEditBoard(id, userId);\n      if (!canEdit) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to edit this board'\n        };\n      }\n\n      // Получаем существующую доску\n      const existingBoard = await this.boardRepository.findById(id);\n      if (!existingBoard) {\n        return {\n          success: false,\n          error: 'Board not found'\n        };\n      }\n\n      // Валидируем данные\n      const validationResult = await this.boardValidator.validateUpdateData(boardData, existingBoard);\n      if (!validationResult.success) {\n        return validationResult;\n      }\n\n      // Обновляем доску\n      const updatedBoard = await this.boardRepository.update(id, boardData, userId);\n      if (!updatedBoard) {\n        return {\n          success: false,\n          error: 'Failed to update board'\n        };\n      }\n\n      // Обновляем кэш\n      if (this.cacheService) {\n        await this.cacheService.setBoard(updatedBoard);\n        await this.cacheService.invalidateProjectBoards(updatedBoard.projectId);\n      }\n\n      // Отправляем событие\n      await this.eventService.emitBoardUpdated(updatedBoard, userId, boardData);\n\n      return {\n        success: true,\n        data: updatedBoard\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to update board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async deleteBoard(id: BoardId, userId: UserId): Promise<OperationResult<boolean>> {\n    try {\n      // Проверяем права на удаление\n      const canDelete = await this.permissionService.canUserDeleteBoard(id, userId);\n      if (!canDelete) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to delete this board'\n        };\n      }\n\n      // Получаем доску для получения projectId\n      const board = await this.boardRepository.findById(id);\n      if (!board) {\n        return {\n          success: false,\n          error: 'Board not found'\n        };\n      }\n\n      // Удаляем доску\n      const deleted = await this.boardRepository.delete(id);\n      if (!deleted) {\n        return {\n          success: false,\n          error: 'Failed to delete board'\n        };\n      }\n\n      // Очищаем кэш\n      if (this.cacheService) {\n        await this.cacheService.deleteBoard(id);\n        await this.cacheService.invalidateProjectBoards(board.projectId);\n      }\n\n      // Отправляем событие\n      await this.eventService.emitBoardDeleted(id, userId);\n\n      return {\n        success: true,\n        data: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to delete board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async archiveBoard(id: BoardId, userId: UserId): Promise<OperationResult<boolean>> {\n    try {\n      // Проверяем права на архивирование\n      const canEdit = await this.permissionService.canUserEditBoard(id, userId);\n      if (!canEdit) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to archive this board'\n        };\n      }\n\n      // Получаем доску для получения projectId\n      const board = await this.boardRepository.findById(id);\n      if (!board) {\n        return {\n          success: false,\n          error: 'Board not found'\n        };\n      }\n\n      // Архивируем доску\n      const archived = await this.boardRepository.archive(id, userId);\n      if (!archived) {\n        return {\n          success: false,\n          error: 'Failed to archive board'\n        };\n      }\n\n      // Обновляем кэш\n      if (this.cacheService) {\n        await this.cacheService.deleteBoard(id);\n        await this.cacheService.invalidateProjectBoards(board.projectId);\n      }\n\n      // Отправляем событие\n      await this.eventService.emitBoardArchived(id, userId);\n\n      return {\n        success: true,\n        data: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to archive board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async restoreBoard(id: BoardId, userId: UserId): Promise<OperationResult<boolean>> {\n    try {\n      // Проверяем права на восстановление\n      const canEdit = await this.permissionService.canUserEditBoard(id, userId);\n      if (!canEdit) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to restore this board'\n        };\n      }\n\n      // Получаем доску для получения projectId\n      const board = await this.boardRepository.findById(id);\n      if (!board) {\n        return {\n          success: false,\n          error: 'Board not found'\n        };\n      }\n\n      // Восстанавливаем доску\n      const restored = await this.boardRepository.restore(id, userId);\n      if (!restored) {\n        return {\n          success: false,\n          error: 'Failed to restore board'\n        };\n      }\n\n      // Инвалидируем кэш\n      if (this.cacheService) {\n        await this.cacheService.invalidateProjectBoards(board.projectId);\n      }\n\n      return {\n        success: true,\n        data: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to restore board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async reorderBoards(projectId: ProjectId, boardIds: BoardId[], userId: UserId): Promise<OperationResult<boolean>> {\n    try {\n      // Проверяем права на редактирование досок в проекте\n      const canCreate = await this.permissionService.canUserCreateBoard(projectId, userId);\n      if (!canCreate) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to reorder boards in this project'\n        };\n      }\n\n      // Обновляем позиции досок\n      const updates = boardIds.map((boardId, index) => ({\n        id: boardId,\n        position: index + 1\n      }));\n\n      for (const update of updates) {\n        await this.boardRepository.updatePosition(update.id, update.position);\n      }\n\n      // Инвалидируем кэш\n      if (this.cacheService) {\n        await this.cacheService.invalidateProjectBoards(projectId);\n      }\n\n      return {\n        success: true,\n        data: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to reorder boards: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async duplicateBoard(id: BoardId, newName: string, userId: UserId): Promise<OperationResult<Board>> {\n    try {\n      // Получаем исходную доску\n      const originalBoard = await this.boardRepository.findById(id);\n      if (!originalBoard) {\n        return {\n          success: false,\n          error: 'Original board not found'\n        };\n      }\n\n      // Проверяем права на просмотр исходной доски\n      const canView = await this.permissionService.canUserViewBoard(id, userId);\n      if (!canView) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to view the original board'\n        };\n      }\n\n      // Проверяем права на создание доски в проекте\n      const canCreate = await this.permissionService.canUserCreateBoard(originalBoard.projectId, userId);\n      if (!canCreate) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to create boards in this project'\n        };\n      }\n\n      // Создаем дубликат\n      const duplicateData: CreateBoardDto = {\n        name: newName,\n        description: originalBoard.description,\n        projectId: originalBoard.projectId,\n        visibility: originalBoard.visibility,\n        settings: originalBoard.settings,\n        icon: originalBoard.icon,\n        color: originalBoard.color\n      };\n\n      return await this.createBoard(duplicateData, userId);\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to duplicate board: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async getBoardStatistics(id: BoardId, userId: UserId): Promise<OperationResult<any>> {\n    try {\n      // Проверяем права доступа\n      const canView = await this.permissionService.canUserViewBoard(id, userId);\n      if (!canView) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to view this board'\n        };\n      }\n\n      // Здесь будет логика получения статистики\n      // Пока возвращаем заглушку\n      const statistics = {\n        totalTasks: 0,\n        completedTasks: 0,\n        inProgressTasks: 0,\n        todoTasks: 0,\n        totalColumns: 0\n      };\n\n      return {\n        success: true,\n        data: statistics\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get board statistics: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async getUserPermissions(boardId: BoardId, userId: UserId): Promise<OperationResult<BoardPermissions>> {\n    try {\n      const permissions = await this.permissionService.getUserPermissions(boardId, userId);\n      return {\n        success: true,\n        data: permissions\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get user permissions: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n\n  async getBoardEvents(boardId: BoardId, userId: UserId, limit?: number): Promise<OperationResult<BoardEvent[]>> {\n    try {\n      // Проверяем права доступа\n      const canView = await this.permissionService.canUserViewBoard(boardId, userId);\n      if (!canView) {\n        return {\n          success: false,\n          error: 'Access denied: You do not have permission to view this board'\n        };\n      }\n\n      const events = await this.eventService.getBoardEvents(boardId, limit);\n      return {\n        success: true,\n        data: events\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Failed to get board events: ${error instanceof Error ? error.message : 'Unknown error'}`\n      };\n    }\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1531, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/services/implementations/board.repository.ts"],"sourcesContent":["/**\n * Реализация репозитория для досок\n * Отвечает только за операции с данными (Single Responsibility)\n */\n\nimport {\n  Board,\n  BoardId,\n  ProjectId,\n  UserId,\n  CreateBoardDto,\n  UpdateBoardDto,\n  BoardFilters,\n  SortOptions,\n  PaginationOptions,\n  PaginatedResponse,\n  BoardSettings,\n  BoardVisibility\n} from '../../types/board.types';\n\nimport { IBoardRepository } from '../interfaces/board.service.interface';\n\n/**\n * Реализация репозитория досок для работы с базой данных\n */\nexport class BoardRepository implements IBoardRepository {\n  constructor(private readonly databaseAdapter: any) {}\n\n  async findById(id: BoardId): Promise<Board | null> {\n    try {\n      const query = `\n        SELECT \n          id,\n          name,\n          description,\n          project_id as projectId,\n          visibility,\n          settings,\n          icon,\n          color,\n          position,\n          created_by as createdBy,\n          updated_by as updatedBy,\n          created_at as createdAt,\n          updated_at as updatedAt,\n          is_archived as isArchived,\n          archived_at as archivedAt\n        FROM boards \n        WHERE id = $1 AND is_archived = FALSE\n      `;\n      \n      const result = await this.databaseAdapter.query(query, [id]);\n      \n      if (!result || result.length === 0) {\n        return null;\n      }\n      \n      return this.mapRowToBoard(result[0]);\n    } catch (error) {\n      console.error('Error finding board by id:', error);\n      throw new Error(`Failed to find board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async findByProjectId(projectId: ProjectId, filters?: BoardFilters): Promise<Board[]> {\n    try {\n      let query = `\n        SELECT \n          id,\n          name,\n          description,\n          project_id as projectId,\n          visibility,\n          settings,\n          icon,\n          color,\n          position,\n          created_by as createdBy,\n          updated_by as updatedBy,\n          created_at as createdAt,\n          updated_at as updatedAt,\n          is_archived as isArchived,\n          archived_at as archivedAt\n        FROM boards \n        WHERE project_id = $1\n      `;\n      \n      const params: any[] = [projectId];\n      let paramIndex = 2;\n      \n      // Применяем фильтры\n      if (filters) {\n        if (filters.visibility) {\n          query += ` AND visibility = $${paramIndex}`;\n          params.push(filters.visibility);\n          paramIndex++;\n        }\n        \n        if (filters.createdBy) {\n          query += ` AND created_by = $${paramIndex}`;\n          params.push(filters.createdBy);\n          paramIndex++;\n        }\n        \n        if (filters.isArchived !== undefined) {\n          query += ` AND is_archived = $${paramIndex}`;\n          params.push(filters.isArchived);\n          paramIndex++;\n        } else {\n          query += ' AND is_archived = FALSE';\n        }\n        \n        if (filters.search) {\n          query += ` AND (name LIKE $${paramIndex} OR description LIKE $${paramIndex + 1})`;\n          const searchTerm = `%${filters.search}%`;\n          params.push(searchTerm, searchTerm);\n          paramIndex += 2;\n        }\n      } else {\n        query += ' AND is_archived = FALSE';\n      }\n      \n      query += ' ORDER BY position ASC, created_at DESC';\n      \n      const results = await this.databaseAdapter.query(query, params);\n      \n      return results.map((row: any) => this.mapRowToBoard(row));\n    } catch (error) {\n      console.error('Error finding boards by project:', error);\n      throw new Error(`Failed to find boards: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async findAll(filters?: BoardFilters, sort?: SortOptions, pagination?: PaginationOptions): Promise<PaginatedResponse<Board>> {\n    try {\n      let query = `\n        SELECT \n          id,\n          name,\n          description,\n          project_id as projectId,\n          visibility,\n          settings,\n          icon,\n          color,\n          position,\n          created_by as createdBy,\n          updated_by as updatedBy,\n          created_at as createdAt,\n          updated_at as updatedAt,\n          is_archived as isArchived,\n          archived_at as archivedAt\n        FROM boards \n        WHERE 1=1\n      `;\n      \n      const params: any[] = [];\n      let paramIndex = 1;\n      \n      // Применяем фильтры\n      if (filters) {\n        if (filters.projectId) {\n          query += ` AND project_id = $${paramIndex++}`;\n          params.push(filters.projectId);\n        }\n        \n        if (filters.visibility) {\n          query += ` AND visibility = $${paramIndex++}`;\n          params.push(filters.visibility);\n        }\n        \n        if (filters.createdBy) {\n          query += ` AND created_by = $${paramIndex++}`;\n          params.push(filters.createdBy);\n        }\n        \n        if (filters.isArchived !== undefined) {\n          query += ` AND is_archived = $${paramIndex++}`;\n          params.push(filters.isArchived);\n        } else {\n          query += ' AND is_archived = FALSE';\n        }\n        \n        if (filters.search) {\n          query += ` AND (name LIKE $${paramIndex++} OR description LIKE $${paramIndex++})`;\n          const searchTerm = `%${filters.search}%`;\n          params.push(searchTerm, searchTerm);\n        }\n      } else {\n        query += ' AND is_archived = FALSE';\n      }\n      \n      // Применяем сортировку\n      if (sort) {\n        const sortField = this.mapSortField(sort.field);\n        query += ` ORDER BY ${sortField} ${sort.direction.toUpperCase()}`;\n      } else {\n        query += ' ORDER BY position ASC, created_at DESC';\n      }\n      \n      // Подсчитываем общее количество\n      const countQuery = query.replace(/SELECT[\\s\\S]*?FROM/, 'SELECT COUNT(*) as total FROM');\n      const countResult = await this.databaseAdapter.query(countQuery, params);\n      const total = countResult[0]?.total || 0;\n      \n      // Применяем пагинацию\n      if (pagination) {\n        const offset = (pagination.page - 1) * pagination.limit;\n        query += ` LIMIT $${paramIndex++} OFFSET $${paramIndex++}`;\n        params.push(pagination.limit, offset);\n      }\n      \n      const results = await this.databaseAdapter.query(query, params);\n      const boards = results.map((row: any) => this.mapRowToBoard(row));\n      \n      const totalPages = pagination ? Math.ceil(total / pagination.limit) : 1;\n      const currentPage = pagination?.page || 1;\n      \n      return {\n        data: boards,\n        pagination: {\n          page: currentPage,\n          limit: pagination?.limit || total,\n          total,\n          totalPages,\n          hasNext: currentPage < totalPages,\n          hasPrev: currentPage > 1\n        }\n      };\n    } catch (error) {\n      console.error('Error finding all boards:', error);\n      throw new Error(`Failed to find boards: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async create(boardData: CreateBoardDto & { createdBy: UserId }): Promise<Board> {\n    try {\n      const id = this.generateId();\n      const now = new Date();\n      const position = await this.getMaxPosition(boardData.projectId) + 1;\n      \n      const defaultSettings: BoardSettings = {\n        allowTaskCreation: true,\n        allowColumnReordering: true,\n        enableTaskLimits: false,\n        defaultTaskPriority: 'medium',\n        autoArchiveCompletedTasks: false,\n        ...boardData.settings\n      };\n      \n      const query = `\n        INSERT INTO boards (\n          id, name, description, project_id, visibility, settings, \n          icon, color, position, created_by, created_at, updated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n      `;\n      \n      const params = [\n        id,\n        boardData.name,\n        boardData.description || null,\n        boardData.projectId,\n        boardData.visibility || 'team',\n        JSON.stringify(defaultSettings),\n        boardData.icon || null,\n        boardData.color || '#3B82F6',\n        position,\n        boardData.createdBy,\n        now,\n        now\n      ];\n      \n      await this.databaseAdapter.query(query, params);\n      \n      // Создаем колонки по умолчанию\n      await this.createDefaultColumns(id, boardData.createdBy);\n      \n      const createdBoard = await this.findById(id);\n      if (!createdBoard) {\n        throw new Error('Failed to retrieve created board');\n      }\n      \n      return createdBoard;\n    } catch (error) {\n      console.error('Error creating board:', error);\n      throw new Error(`Failed to create board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async update(id: BoardId, boardData: UpdateBoardDto, updatedBy: UserId): Promise<Board | null> {\n    try {\n      const updateFields: string[] = [];\n      const params: any[] = [];\n      \n      let paramIndex = 1;\n      \n      if (boardData.name !== undefined) {\n        updateFields.push(`name = $${paramIndex++}`);\n        params.push(boardData.name);\n      }\n      \n      if (boardData.description !== undefined) {\n        updateFields.push(`description = $${paramIndex++}`);\n        params.push(boardData.description);\n      }\n      \n      if (boardData.visibility !== undefined) {\n        updateFields.push(`visibility = $${paramIndex++}`);\n        params.push(boardData.visibility);\n      }\n      \n      if (boardData.settings !== undefined) {\n        // Получаем текущие настройки и объединяем с новыми\n        const currentBoard = await this.findById(id);\n        if (currentBoard) {\n          const updatedSettings = { ...currentBoard.settings, ...boardData.settings };\n          updateFields.push(`settings = $${paramIndex++}`);\n          params.push(JSON.stringify(updatedSettings));\n        }\n      }\n      \n      if (boardData.icon !== undefined) {\n        updateFields.push(`icon = $${paramIndex++}`);\n        params.push(boardData.icon);\n      }\n      \n      if (boardData.color !== undefined) {\n        updateFields.push(`color = $${paramIndex++}`);\n        params.push(boardData.color);\n      }\n      \n      if (boardData.position !== undefined) {\n        updateFields.push(`position = $${paramIndex++}`);\n        params.push(boardData.position);\n      }\n      \n      if (updateFields.length === 0) {\n        return await this.findById(id);\n      }\n      \n      updateFields.push(`updated_by = $${paramIndex++}`, `updated_at = $${paramIndex++}`);\n      params.push(updatedBy, new Date());\n      params.push(id);\n      \n      const query = `UPDATE boards SET ${updateFields.join(', ')} WHERE id = $${paramIndex}`;\n      \n      await this.databaseAdapter.query(query, params);\n      \n      return await this.findById(id);\n    } catch (error) {\n      console.error('Error updating board:', error);\n      throw new Error(`Failed to update board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async delete(id: BoardId): Promise<boolean> {\n    try {\n      // Сначала удаляем все связанные данные (задачи, колонки)\n      await this.databaseAdapter.query('DELETE FROM tasks WHERE board_id = $1', [id]);\n      await this.databaseAdapter.query('DELETE FROM columns WHERE board_id = $1', [id]);\n      \n      // Затем удаляем саму доску\n      const query = 'DELETE FROM boards WHERE id = $1';\n      const result = await this.databaseAdapter.query(query, [id]);\n      \n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error deleting board:', error);\n      throw new Error(`Failed to delete board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async archive(id: BoardId, archivedBy: UserId): Promise<boolean> {\n    try {\n      const query = `\n        UPDATE boards \n        SET is_archived = TRUE, archived_at = $1, updated_by = $2, updated_at = $3\n        WHERE id = $4\n      `;\n      \n      const now = new Date();\n      const result = await this.databaseAdapter.query(query, [now, archivedBy, now, id]);\n      \n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error archiving board:', error);\n      throw new Error(`Failed to archive board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async restore(id: BoardId, restoredBy: UserId): Promise<boolean> {\n    try {\n      const query = `\n        UPDATE boards \n        SET is_archived = FALSE, archived_at = NULL, updated_by = $1, updated_at = $2\n        WHERE id = $3\n      `;\n      \n      const now = new Date();\n      const result = await this.databaseAdapter.query(query, [restoredBy, now, id]);\n      \n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error restoring board:', error);\n      throw new Error(`Failed to restore board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async updatePosition(id: BoardId, newPosition: number): Promise<boolean> {\n    try {\n      const query = 'UPDATE boards SET position = $1, updated_at = $2 WHERE id = $3';\n      const result = await this.databaseAdapter.query(query, [newPosition, new Date(), id]);\n      \n      return result.affectedRows > 0;\n    } catch (error) {\n      console.error('Error updating board position:', error);\n      throw new Error(`Failed to update board position: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getMaxPosition(projectId: ProjectId): Promise<number> {\n    try {\n      const query = 'SELECT MAX(position) as maxPosition FROM boards WHERE project_id = $1 AND is_archived = FALSE';\n      const result = await this.databaseAdapter.query(query, [projectId]);\n      \n      return result[0]?.maxPosition || 0;\n    } catch (error) {\n      console.error('Error getting max position:', error);\n      return 0;\n    }\n  }\n\n  async existsByName(name: string, projectId: ProjectId, excludeId?: BoardId): Promise<boolean> {\n    try {\n      let query = 'SELECT COUNT(*) as count FROM boards WHERE name = $1 AND project_id = $2 AND is_archived = FALSE';\n      const params: any[] = [name, projectId];\n      \n      if (excludeId) {\n        query += ' AND id != $3';\n        params.push(excludeId);\n      }\n      \n      const result = await this.databaseAdapter.query(query, params);\n      \n      return result[0]?.count > 0;\n    } catch (error) {\n      console.error('Error checking board name existence:', error);\n      return false;\n    }\n  }\n\n  async countByProject(projectId: ProjectId): Promise<number> {\n    try {\n      const query = 'SELECT COUNT(*) as count FROM boards WHERE project_id = $1 AND is_archived = FALSE';\n      const result = await this.databaseAdapter.query(query, [projectId]);\n      \n      return result[0]?.count || 0;\n    } catch (error) {\n      console.error('Error counting boards by project:', error);\n      return 0;\n    }\n  }\n\n  private async createDefaultColumns(boardId: BoardId, createdBy: UserId): Promise<void> {\n    const defaultColumns = [\n      { title: 'To Do', color: '#EF4444', position: 1 },\n      { title: 'In Progress', color: '#F59E0B', position: 2 },\n      { title: 'Review', color: '#3B82F6', position: 3 },\n      { title: 'Done', color: '#10B981', position: 4 }\n    ];\n    \n    const now = new Date();\n    \n    for (const column of defaultColumns) {\n      const columnId = this.generateId();\n      const query = `\n        INSERT INTO columns (\n          id, title, board_id, position, color, settings, \n          created_by, created_at, updated_at\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n      `;\n      \n      const defaultColumnSettings = {\n        allowTaskCreation: true,\n        autoMoveRules: []\n      };\n      \n      await this.databaseAdapter.query(query, [\n        columnId,\n        column.title,\n        boardId,\n        column.position,\n        column.color,\n        JSON.stringify(defaultColumnSettings),\n        createdBy,\n        now,\n        now\n      ]);\n    }\n  }\n\n  private mapRowToBoard(row: any): Board {\n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      projectId: row.projectId,\n      visibility: row.visibility as BoardVisibility,\n      settings: typeof row.settings === 'string' ? JSON.parse(row.settings) : row.settings,\n      icon: row.icon,\n      color: row.color,\n      position: row.position,\n      createdBy: row.createdBy,\n      updatedBy: row.updatedBy,\n      createdAt: new Date(row.createdAt),\n      updatedAt: new Date(row.updatedAt),\n      isArchived: Boolean(row.isArchived),\n      archivedAt: row.archivedAt ? new Date(row.archivedAt) : undefined\n    };\n  }\n\n  private mapSortField(field: string): string {\n    const fieldMap: Record<string, string> = {\n      'createdAt': 'created_at',\n      'updatedAt': 'updated_at',\n      'priority': 'position',\n      'deadline': 'created_at',\n      'position': 'position',\n      'title': 'name'\n    };\n    \n    return fieldMap[field] || 'created_at';\n  }\n\n  private generateId(): string {\n    // Import crypto for UUID generation\n    const crypto = require('crypto');\n    return crypto.randomUUID();\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2034, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/services/implementations/board.validator.ts"],"sourcesContent":["/**\n * Валидатор для досок\n * Отвечает только за валидацию данных (Single Responsibility)\n */\n\nimport {\n  Board,\n  BoardId,\n  ProjectId,\n  CreateBoardDto,\n  UpdateBoardDto,\n  BoardVisibility,\n  ValidationResult,\n  ValidationError\n} from '../../types/board.types';\n\nimport { IBoardValidator } from '../interfaces/board.service.interface';\n\n/**\n * Реализация валидатора досок\n */\nexport class BoardValidator implements IBoardValidator {\n  \n  async validateCreate(data: CreateBoardDto): Promise<ValidationResult> {\n    const errors: ValidationError[] = [];\n    \n    // Валидация названия\n    const nameValidation = this.validateName(data.name);\n    if (!nameValidation.isValid) {\n      errors.push(...nameValidation.errors);\n    }\n    \n    // Валидация проекта\n    const projectValidation = this.validateProjectId(data.projectId);\n    if (!projectValidation.isValid) {\n      errors.push(...projectValidation.errors);\n    }\n    \n    // Валидация описания\n    if (data.description !== undefined) {\n      const descriptionValidation = this.validateDescription(data.description);\n      if (!descriptionValidation.isValid) {\n        errors.push(...descriptionValidation.errors);\n      }\n    }\n    \n    // Валидация видимости\n    if (data.visibility !== undefined) {\n      const visibilityValidation = this.validateVisibility(data.visibility);\n      if (!visibilityValidation.isValid) {\n        errors.push(...visibilityValidation.errors);\n      }\n    }\n    \n    // Валидация цвета\n    if (data.color !== undefined) {\n      const colorValidation = this.validateColor(data.color);\n      if (!colorValidation.isValid) {\n        errors.push(...colorValidation.errors);\n      }\n    }\n    \n    // Валидация иконки\n    if (data.icon !== undefined) {\n      const iconValidation = this.validateIcon(data.icon);\n      if (!iconValidation.isValid) {\n        errors.push(...iconValidation.errors);\n      }\n    }\n    \n    // Валидация настроек\n    if (data.settings !== undefined) {\n      const settingsValidation = this.validateSettings(data.settings);\n      if (!settingsValidation.isValid) {\n        errors.push(...settingsValidation.errors);\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  async validateCreateData(data: CreateBoardDto): Promise<{ success: boolean; error?: string }> {\n    const validationResult = await this.validateCreate(data);\n    \n    if (validationResult.isValid) {\n      return { success: true };\n    }\n    \n    const errorMessages = validationResult.errors.map(error => error.message).join(', ');\n    return {\n      success: false,\n      error: errorMessages\n    };\n  }\n  \n  async validateUpdate(id: BoardId, data: UpdateBoardDto): Promise<ValidationResult> {\n    const errors: ValidationError[] = [];\n    \n    // Валидация ID\n    const idValidation = this.validateId(id);\n    if (!idValidation.isValid) {\n      errors.push(...idValidation.errors);\n    }\n    \n    // Валидация названия (если предоставлено)\n    if (data.name !== undefined) {\n      const nameValidation = this.validateName(data.name);\n      if (!nameValidation.isValid) {\n        errors.push(...nameValidation.errors);\n      }\n    }\n    \n    // Валидация описания (если предоставлено)\n    if (data.description !== undefined) {\n      const descriptionValidation = this.validateDescription(data.description);\n      if (!descriptionValidation.isValid) {\n        errors.push(...descriptionValidation.errors);\n      }\n    }\n    \n    // Валидация видимости (если предоставлено)\n    if (data.visibility !== undefined) {\n      const visibilityValidation = this.validateVisibility(data.visibility);\n      if (!visibilityValidation.isValid) {\n        errors.push(...visibilityValidation.errors);\n      }\n    }\n    \n    // Валидация цвета (если предоставлено)\n    if (data.color !== undefined) {\n      const colorValidation = this.validateColor(data.color);\n      if (!colorValidation.isValid) {\n        errors.push(...colorValidation.errors);\n      }\n    }\n    \n    // Валидация иконки (если предоставлено)\n    if (data.icon !== undefined) {\n      const iconValidation = this.validateIcon(data.icon);\n      if (!iconValidation.isValid) {\n        errors.push(...iconValidation.errors);\n      }\n    }\n    \n    // Валидация позиции (если предоставлено)\n    if (data.position !== undefined) {\n      const positionValidation = this.validatePosition(data.position);\n      if (!positionValidation.isValid) {\n        errors.push(...positionValidation.errors);\n      }\n    }\n    \n    // Валидация настроек (если предоставлено)\n    if (data.settings !== undefined) {\n      const settingsValidation = this.validateSettings(data.settings);\n      if (!settingsValidation.isValid) {\n        errors.push(...settingsValidation.errors);\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  async validateDelete(id: BoardId): Promise<ValidationResult> {\n    const errors: ValidationError[] = [];\n    \n    // Валидация ID\n    const idValidation = this.validateId(id);\n    if (!idValidation.isValid) {\n      errors.push(...idValidation.errors);\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  async validateArchive(id: BoardId): Promise<ValidationResult> {\n    return this.validateDelete(id); // Те же правила валидации\n  }\n  \n  async validateRestore(id: BoardId): Promise<ValidationResult> {\n    return this.validateDelete(id); // Те же правила валидации\n  }\n  \n  async validateReorder(boardIds: BoardId[], positions: number[]): Promise<ValidationResult> {\n    const errors: ValidationError[] = [];\n    \n    // Проверяем, что количество досок и позиций совпадает\n    if (boardIds.length !== positions.length) {\n      errors.push({\n        field: 'reorder',\n        message: 'Количество досок и позиций должно совпадать',\n        code: 'REORDER_MISMATCH'\n      });\n    }\n    \n    // Валидация каждого ID доски\n    for (const id of boardIds) {\n      const idValidation = this.validateId(id);\n      if (!idValidation.isValid) {\n        errors.push(...idValidation.errors);\n      }\n    }\n    \n    // Валидация каждой позиции\n    for (const position of positions) {\n      const positionValidation = this.validatePosition(position);\n      if (!positionValidation.isValid) {\n        errors.push(...positionValidation.errors);\n      }\n    }\n    \n    // Проверяем уникальность позиций\n    const uniquePositions = new Set(positions);\n    if (uniquePositions.size !== positions.length) {\n      errors.push({\n        field: 'positions',\n        message: 'Позиции должны быть уникальными',\n        code: 'DUPLICATE_POSITIONS'\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  async validateDuplicate(id: BoardId, newName?: string): Promise<ValidationResult> {\n    const errors: ValidationError[] = [];\n    \n    // Валидация исходного ID\n    const idValidation = this.validateId(id);\n    if (!idValidation.isValid) {\n      errors.push(...idValidation.errors);\n    }\n    \n    // Валидация нового названия (если предоставлено)\n    if (newName !== undefined) {\n      const nameValidation = this.validateName(newName);\n      if (!nameValidation.isValid) {\n        errors.push(...nameValidation.errors);\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  // Приватные методы для валидации отдельных полей\n  \n  private validateId(id: BoardId): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (!id) {\n      errors.push({\n        field: 'id',\n        message: 'ID доски обязателен',\n        code: 'REQUIRED'\n      });\n    } else if (typeof id !== 'string') {\n      errors.push({\n        field: 'id',\n        message: 'ID доски должен быть строкой',\n        code: 'INVALID_TYPE'\n      });\n    } else if (id.trim().length === 0) {\n      errors.push({\n        field: 'id',\n        message: 'ID доски не может быть пустым',\n        code: 'EMPTY'\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateName(name: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (!name) {\n      errors.push({\n        field: 'name',\n        message: 'Название доски обязательно',\n        code: 'REQUIRED'\n      });\n    } else if (typeof name !== 'string') {\n      errors.push({\n        field: 'name',\n        message: 'Название доски должно быть строкой',\n        code: 'INVALID_TYPE'\n      });\n    } else {\n      const trimmedName = name.trim();\n      \n      if (trimmedName.length === 0) {\n        errors.push({\n          field: 'name',\n          message: 'Название доски не может быть пустым',\n          code: 'EMPTY'\n        });\n      } else if (trimmedName.length < 2) {\n        errors.push({\n          field: 'name',\n          message: 'Название доски должно содержать минимум 2 символа',\n          code: 'TOO_SHORT'\n        });\n      } else if (trimmedName.length > 100) {\n        errors.push({\n          field: 'name',\n          message: 'Название доски не может превышать 100 символов',\n          code: 'TOO_LONG'\n        });\n      }\n      \n      // Проверка на недопустимые символы\n      const invalidChars = /[<>\"'&]/;\n      if (invalidChars.test(trimmedName)) {\n        errors.push({\n          field: 'name',\n          message: 'Название доски содержит недопустимые символы',\n          code: 'INVALID_CHARACTERS'\n        });\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateDescription(description: string | null): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (description !== null && description !== undefined) {\n      if (typeof description !== 'string') {\n        errors.push({\n          field: 'description',\n          message: 'Описание доски должно быть строкой',\n          code: 'INVALID_TYPE'\n        });\n      } else if (description.length > 1000) {\n        errors.push({\n          field: 'description',\n          message: 'Описание доски не может превышать 1000 символов',\n          code: 'TOO_LONG'\n        });\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateProjectId(projectId: ProjectId): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (!projectId) {\n      errors.push({\n        field: 'projectId',\n        message: 'ID проекта обязателен',\n        code: 'REQUIRED'\n      });\n    } else if (typeof projectId !== 'string') {\n      errors.push({\n        field: 'projectId',\n        message: 'ID проекта должен быть строкой',\n        code: 'INVALID_TYPE'\n      });\n    } else if (projectId.trim().length === 0) {\n      errors.push({\n        field: 'projectId',\n        message: 'ID проекта не может быть пустым',\n        code: 'EMPTY'\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateVisibility(visibility: BoardVisibility): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    const validVisibilities: BoardVisibility[] = ['private', 'team', 'public'];\n    \n    if (!validVisibilities.includes(visibility)) {\n      errors.push({\n        field: 'visibility',\n        message: `Видимость доски должна быть одной из: ${validVisibilities.join(', ')}`,\n        code: 'INVALID_VALUE'\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateColor(color: string): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (typeof color !== 'string') {\n      errors.push({\n        field: 'color',\n        message: 'Цвет доски должен быть строкой',\n        code: 'INVALID_TYPE'\n      });\n    } else {\n      // Проверка формата HEX цвета\n      const hexColorRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n      if (!hexColorRegex.test(color)) {\n        errors.push({\n          field: 'color',\n          message: 'Цвет доски должен быть в формате HEX (#RRGGBB или #RGB)',\n          code: 'INVALID_FORMAT'\n        });\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateIcon(icon: string | null): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (icon !== null && icon !== undefined) {\n      if (typeof icon !== 'string') {\n        errors.push({\n          field: 'icon',\n          message: 'Иконка доски должна быть строкой',\n          code: 'INVALID_TYPE'\n        });\n      } else if (icon.length > 50) {\n        errors.push({\n          field: 'icon',\n          message: 'Иконка доски не может превышать 50 символов',\n          code: 'TOO_LONG'\n        });\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validatePosition(position: number): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (typeof position !== 'number') {\n      errors.push({\n        field: 'position',\n        message: 'Позиция доски должна быть числом',\n        code: 'INVALID_TYPE'\n      });\n    } else if (!Number.isInteger(position)) {\n      errors.push({\n        field: 'position',\n        message: 'Позиция доски должна быть целым числом',\n        code: 'INVALID_VALUE'\n      });\n    } else if (position < 0) {\n      errors.push({\n        field: 'position',\n        message: 'Позиция доски не может быть отрицательной',\n        code: 'INVALID_VALUE'\n      });\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n  \n  private validateSettings(settings: any): ValidationResult {\n    const errors: ValidationError[] = [];\n    \n    if (settings !== null && settings !== undefined) {\n      if (typeof settings !== 'object') {\n        errors.push({\n          field: 'settings',\n          message: 'Настройки доски должны быть объектом',\n          code: 'INVALID_TYPE'\n        });\n      } else {\n        // Валидация конкретных настроек\n        if (settings.allowTaskCreation !== undefined && typeof settings.allowTaskCreation !== 'boolean') {\n          errors.push({\n            field: 'settings.allowTaskCreation',\n            message: 'allowTaskCreation должно быть булевым значением',\n            code: 'INVALID_TYPE'\n          });\n        }\n        \n        if (settings.allowColumnReordering !== undefined && typeof settings.allowColumnReordering !== 'boolean') {\n          errors.push({\n            field: 'settings.allowColumnReordering',\n            message: 'allowColumnReordering должно быть булевым значением',\n            code: 'INVALID_TYPE'\n          });\n        }\n        \n        if (settings.enableTaskLimits !== undefined && typeof settings.enableTaskLimits !== 'boolean') {\n          errors.push({\n            field: 'settings.enableTaskLimits',\n            message: 'enableTaskLimits должно быть булевым значением',\n            code: 'INVALID_TYPE'\n          });\n        }\n        \n        if (settings.defaultTaskPriority !== undefined) {\n          const validPriorities = ['low', 'medium', 'high', 'urgent'];\n          if (!validPriorities.includes(settings.defaultTaskPriority)) {\n            errors.push({\n              field: 'settings.defaultTaskPriority',\n              message: `defaultTaskPriority должно быть одним из: ${validPriorities.join(', ')}`,\n              code: 'INVALID_VALUE'\n            });\n          }\n        }\n        \n        if (settings.autoArchiveCompletedTasks !== undefined && typeof settings.autoArchiveCompletedTasks !== 'boolean') {\n          errors.push({\n            field: 'settings.autoArchiveCompletedTasks',\n            message: 'autoArchiveCompletedTasks должно быть булевым значением',\n            code: 'INVALID_TYPE'\n          });\n        }\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2526, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/services/implementations/permission.service.ts"],"sourcesContent":["/**\n * Реализация сервиса разрешений для досок\n * Управляет правами доступа пользователей к доскам и проектам\n */\n\nimport {\n  BoardId,\n  ProjectId,\n  UserId,\n  BoardPermissions\n} from '../../types/board.types';\n\nimport { IBoardPermissionService } from '../interfaces/board.service.interface';\nimport { IDatabaseAdapter } from '../../lib/database-adapter.interface';\n\nexport class PermissionService implements IBoardPermissionService {\n  constructor(private readonly databaseAdapter: IDatabaseAdapter) {}\n\n  /**\n   * Получает разрешения пользователя для доски\n   */\n  async getUserPermissions(boardId: BoardId, userId: UserId): Promise<BoardPermissions> {\n    try {\n      // Получаем информацию о доске и проекте\n      const boardQuery = `\n        SELECT b.project_id, b.created_by, b.visibility,\n               p.creator_id as project_owner\n        FROM boards b\n        JOIN projects p ON b.project_id = p.id\n        WHERE b.id = $1\n      `;\n      \n      const boardResult = await this.databaseAdapter.query(boardQuery, [boardId]);\n      \n      if (!boardResult.rows || boardResult.rows.length === 0) {\n        return {\n          canView: false,\n          canEdit: false,\n          canDelete: false,\n          canManage: false\n        };\n      }\n\n      const board = boardResult.rows[0];\n      \n      // Проверяем членство в проекте\n      const memberQuery = `\n        SELECT role FROM project_members \n        WHERE project_id = $1 AND user_id = $2\n      `;\n      \n      const memberResult = await this.databaseAdapter.query(memberQuery, [board.project_id, userId]);\n      const userRole = memberResult.rows?.[0]?.role;\n\n      // Определяем разрешения на основе роли и владения\n      const isProjectOwner = board.project_owner === userId;\n      const isBoardCreator = board.created_by === userId;\n      const isPublicBoard = board.visibility === 'public';\n      \n      let canView = false;\n      let canEdit = false;\n      let canDelete = false;\n      let canManage = false;\n\n      if (isProjectOwner) {\n        // Владелец проекта имеет все права\n        canView = true;\n        canEdit = true;\n        canDelete = true;\n        canManage = true;\n      } else if (userRole) {\n        // Член проекта\n        switch (userRole) {\n          case 'admin':\n            canView = true;\n            canEdit = true;\n            canDelete = true;\n            canManage = true;\n            break;\n          case 'member':\n            canView = true;\n            canEdit = true;\n            canDelete = isBoardCreator;\n            canManage = false;\n            break;\n          case 'viewer':\n            canView = true;\n            canEdit = false;\n            canDelete = false;\n            canManage = false;\n            break;\n        }\n      } else if (isPublicBoard) {\n        // Публичная доска - только просмотр\n        canView = true;\n        canEdit = false;\n        canDelete = false;\n        canManage = false;\n      }\n\n      return {\n        canView,\n        canEdit,\n        canDelete,\n        canManage\n      };\n    } catch (error) {\n      console.error('Error getting user permissions:', error);\n      return {\n        canView: false,\n        canEdit: false,\n        canDelete: false,\n        canManage: false\n      };\n    }\n  }\n\n  /**\n   * Проверяет, может ли пользователь просматривать доску\n   */\n  async canUserViewBoard(boardId: BoardId, userId: UserId): Promise<boolean> {\n    const permissions = await this.getUserPermissions(boardId, userId);\n    return permissions.canView;\n  }\n\n  /**\n   * Проверяет, может ли пользователь редактировать доску\n   */\n  async canUserEditBoard(boardId: BoardId, userId: UserId): Promise<boolean> {\n    const permissions = await this.getUserPermissions(boardId, userId);\n    return permissions.canEdit;\n  }\n\n  /**\n   * Проверяет, может ли пользователь удалить доску\n   */\n  async canUserDeleteBoard(boardId: BoardId, userId: UserId): Promise<boolean> {\n    const permissions = await this.getUserPermissions(boardId, userId);\n    return permissions.canDelete;\n  }\n\n  /**\n   * Проверяет, может ли пользователь создавать доски в проекте\n   */\n  async canUserCreateBoard(projectId: ProjectId, userId: UserId): Promise<boolean> {\n    try {\n      console.log('canUserCreateBoard called with:', { projectId, userId });\n      \n      // Проверяем владение проектом\n      const ownerQuery = `\n        SELECT creator_id FROM projects WHERE id = $1\n      `;\n      \n      const ownerResult = await this.databaseAdapter.query(ownerQuery, [projectId]);\n      console.log('Owner query result:', ownerResult);\n      \n      if (!ownerResult || ownerResult.length === 0) {\n        console.log('Project not found');\n        return false;\n      }\n\n      const projectOwner = ownerResult[0].creator_id;\n      console.log('Project owner:', projectOwner, 'Current user:', userId);\n      \n      if (projectOwner === userId) {\n        console.log('User is project owner - allowing board creation');\n        return true;\n      }\n\n      // Проверяем членство в проекте\n      const memberQuery = `\n        SELECT role FROM project_members \n        WHERE project_id = $1 AND user_id = $2\n      `;\n      \n      const memberResult = await this.databaseAdapter.query(memberQuery, [projectId, userId]);\n      console.log('Member query result:', memberResult.rows);\n      const userRole = memberResult.rows?.[0]?.role;\n      console.log('User role in project:', userRole);\n\n      // Определяем права на создание досок\n      switch (userRole) {\n        case 'admin':\n        case 'member':\n          console.log('User has admin/member role - allowing board creation');\n          return true;\n        case 'viewer':\n          console.log('User has viewer role - denying board creation');\n          return false;\n        default:\n          console.log('User has no role in project - denying board creation');\n          return false;\n      }\n    } catch (error) {\n      console.error('Error checking board creation permission:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Проверяет, может ли пользователь редактировать доску\n   */\n  async canUserEditBoard(userId: number, boardId: number): Promise<boolean> {\n    try {\n      const board = await this.dbAdapter.getBoardById(boardId);\n      if (!board) {\n        return false;\n      }\n\n      const user = await this.dbAdapter.getUserById(userId);\n      if (!user) {\n        return false;\n      }\n\n      // Администраторы могут редактировать любые доски\n      if (user.role === 'admin') {\n        return true;\n      }\n\n      // Владелец проекта может редактировать доски\n      const project = await this.dbAdapter.getProjectById(board.projectId);\n      if (project && project.createdBy === userId) {\n        return true;\n      }\n\n      // Создатель доски может редактировать\n      if (board.createdBy === userId) {\n        return true;\n      }\n\n      // Проверяем роль в проекте\n      const projectMember = await this.dbAdapter.getProjectMember(board.projectId, userId);\n      if (projectMember && (projectMember.role === 'admin' || projectMember.role === 'member')) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Error checking board edit permission:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Проверяет, может ли пользователь удалить доску\n   */\n  async canUserDeleteBoard(userId: number, boardId: number): Promise<boolean> {\n    try {\n      const board = await this.dbAdapter.getBoardById(boardId);\n      if (!board) {\n        return false;\n      }\n\n      const user = await this.dbAdapter.getUserById(userId);\n      if (!user) {\n        return false;\n      }\n\n      // Только администраторы могут удалять доски\n      if (user.role === 'admin') {\n        return true;\n      }\n\n      // Владелец проекта может удалять доски\n      const project = await this.dbAdapter.getProjectById(board.projectId);\n      if (project && project.createdBy === userId) {\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Error checking board delete permission:', error);\n      return false;\n    }\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2774, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/lib/database-adapter.ts"],"sourcesContent":["// =====================================================\n// АДАПТЕР ДЛЯ РАБОТЫ С БАЗАМИ ДАННЫХ (PostgreSQL)\n// =====================================================\n\nimport { User, Project, Board, Column, Task, Session } from '@/types';\nimport { getPostgreSQLAdapter, PostgreSQLAdapter } from './postgresql-adapter';\n\n// =====================================================\n// ТИПЫ ДАННЫХ\n// =====================================================\n\nexport type DatabaseType = 'postgresql';\n\nexport interface DatabaseStatus {\n  postgresql: boolean;\n  current: DatabaseType;\n}\n\n// =====================================================\n// КЛАСС АДАПТЕРА БАЗЫ ДАННЫХ\n// =====================================================\n\nexport class DatabaseAdapter {\n  private static instance: DatabaseAdapter;\n  private currentDatabase: DatabaseType = 'postgresql';\n  private isInitialized = false;\n  private postgresqlAdapter: PostgreSQLAdapter;\n\n  private constructor() {\n    this.postgresqlAdapter = getPostgreSQLAdapter();\n    this.currentDatabase = 'postgresql';\n  }\n\n  public static getInstance(): DatabaseAdapter {\n    if (!DatabaseAdapter.instance) {\n      DatabaseAdapter.instance = new DatabaseAdapter();\n    }\n    return DatabaseAdapter.instance;\n  }\n\n  /**\n   * Инициализация адаптера\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      // Используем PostgreSQL\n      await this.postgresqlAdapter.initialize();\n      this.currentDatabase = 'postgresql';\n      console.log('🎯 Database Adapter: Используется PostgreSQL');\n\n      this.isInitialized = true;\n      console.log('✅ Database Adapter: Инициализация завершена');\n    } catch (error) {\n      console.error('❌ Database Adapter: Ошибка инициализации PostgreSQL:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Получение статуса базы данных\n   */\n  public async getDatabaseStatus(): Promise<DatabaseStatus> {\n    const postgresql = await Promise.resolve(this.postgresqlAdapter.initialize()).then(() => true).catch(() => false);\n    \n    return {\n      postgresql,\n      current: this.currentDatabase\n    };\n  }\n\n\n\n  /**\n   * Получение текущей базы данных\n   */\n  public getCurrentDatabase(): DatabaseType {\n    return this.currentDatabase;\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ПОЛЬЗОВАТЕЛЯМИ\n  // =====================================================\n\n  /**\n   * Создание пользователя\n   */\n  public async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {\n    await this.initialize();\n    const { email, password, name, role = 'user' } = userData;\n    return await this.postgresqlAdapter.createUser(email, password, name, role);\n  }\n\n  /**\n   * Получение пользователя по ID\n   */\n  public async getUserById(id: string): Promise<User | null> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getUserById(id);\n  }\n\n  /**\n   * Получение пользователя по email\n   */\n  public async getUserByEmail(email: string): Promise<User | null> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getUserByEmail(email);\n  }\n\n  /**\n   * Получение всех пользователей\n   */\n  public async getAllUsers(): Promise<User[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getAllUsers();\n  }\n\n  /**\n   * Обновление пользователя\n   */\n  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {\n    await this.initialize();\n    return await this.postgresqlAdapter.updateUser(id, updates);\n  }\n\n  /**\n   * Удаление пользователя\n   */\n  public async deleteUser(id: string): Promise<boolean> {\n    await this.initialize();\n    return await this.postgresqlAdapter.deleteUser(id);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С СЕССИЯМИ\n  // =====================================================\n\n  /**\n   * Создание сессии\n   */\n  public async createSession(sessionData: Omit<Session, 'id' | 'created_at'>): Promise<Session> {\n    await this.initialize();\n    const { session_token, user_id, expires_at } = sessionData;\n    return await this.postgresqlAdapter.createSession(session_token, user_id, new Date(expires_at));\n  }\n\n  /**\n   * Получение сессии по токену\n   */\n  public async getSessionByToken(token: string): Promise<Session | null> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getSessionByToken(token);\n  }\n\n  /**\n   * Обновление активности сессии\n   */\n  public async updateSessionActivity(token: string): Promise<boolean> {\n    await this.initialize();\n    // Для PostgreSQL можно реализовать обновление времени последней активности\n    return true;\n  }\n\n  /**\n   * Удаление сессии\n   */\n  public async deleteSession(token: string): Promise<boolean> {\n    await this.initialize();\n    return await this.postgresqlAdapter.deleteSession(token);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ПРОЕКТАМИ\n  // =====================================================\n\n  /**\n   * Создание проекта\n   */\n  public async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {\n    await this.initialize();\n    const { name, description, creator_id, color } = projectData;\n    return await this.postgresqlAdapter.createProject(name, description || '', creator_id, color);\n  }\n\n  /**\n   * Получение проекта по ID\n   */\n  public async getProjectById(id: string): Promise<Project | null> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getProjectById(id);\n  }\n\n  /**\n   * Получение всех проектов\n   */\n  public async getAllProjects(): Promise<Project[]> {\n    await this.initialize();\n    // Для PostgreSQL получаем все проекты через пользователя (требует user_id)\n    // Возвращаем пустой массив, так как метод требует конкретного пользователя\n    return [];\n  }\n\n  /**\n   * Получение проектов пользователя\n   */\n  public async getUserProjects(userId: string): Promise<Project[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getProjectsByUserId(userId);\n  }\n\n  /**\n   * Получение проектов по ID создателя\n   */\n  public async getProjectsByCreatorId(creatorId: string): Promise<Project[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getProjectsByUserId(creatorId);\n  }\n\n  /**\n   * Проверка доступа к проекту\n   */\n  public async hasProjectAccess(userId: string | number, projectId: string): Promise<boolean> {\n    await this.initialize();\n    return await this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ДОСКАМИ\n  // =====================================================\n\n  /**\n   * Получение досок проекта\n   */\n  public async getProjectBoards(projectId: string): Promise<Board[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getBoardsByProjectId(projectId);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С КОЛОНКАМИ\n  // =====================================================\n\n  /**\n   * Получение колонок доски\n   */\n  public async getBoardColumns(boardId: string): Promise<Column[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getColumnsByBoardId(boardId);\n  }\n\n  /**\n   * Создание колонки\n   */\n  public async createColumn(columnData: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {\n    await this.initialize();\n    const { name, board_id, position, color } = columnData;\n    return await this.postgresqlAdapter.createColumn(name, board_id, position, color);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ЗАДАЧАМИ\n  // =====================================================\n\n  /**\n   * Создание задачи\n   */\n  public async createTask(taskData: Omit<Task, 'id' | 'created_at' | 'updated_at'>): Promise<Task> {\n    await this.initialize();\n    return await this.postgresqlAdapter.createTask(taskData);\n  }\n\n  /**\n   * Получение задач колонки\n   */\n  public async getColumnTasks(columnId: string): Promise<Task[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.getTasksByColumnId(columnId);\n  }\n\n  /**\n   * Удаление задачи\n   */\n  public async deleteTask(id: string): Promise<boolean> {\n    await this.initialize();\n    return await this.postgresqlAdapter.deleteTask(id);\n  }\n\n  /**\n   * Выполнение сырого SQL запроса (для совместимости с репозиториями)\n   */\n  public async query(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.initialize();\n    const result = await this.postgresqlAdapter.query(sql, params);\n    return result.rows || [];\n  }\n\n}\n\n\n\n// Экспорт единственного экземпляра\nexport const dbAdapter = DatabaseAdapter.getInstance();"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3005, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/axele/Downloads/encore-tasks/encore-tasks-main/src/app/api/boards/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyAuth } from '@/lib/auth';\nimport { z } from 'zod';\nimport { BoardService } from '@/services/implementations/board.service';\nimport { BoardRepository } from '@/services/implementations/board.repository';\nimport { BoardValidator } from '@/services/implementations/board.validator';\nimport { PermissionService } from '@/services/implementations/permission.service';\nimport { dbAdapter } from '@/lib/database-adapter';\n\nconst createBoardSchema = z.object({\n  name: z.string().min(1, 'Board name is required'),\n  description: z.string().optional(),\n  projectId: z.string().min(1, 'Project ID is required'),\n  visibility: z.enum(['private', 'public']).default('private'),\n  color: z.string().regex(/^#[0-9A-F]{6}$/i, 'Invalid color format').optional(),\n});\n\n// Инициализация сервисов\nconst boardRepository = new BoardRepository(dbAdapter);\nconst boardValidator = new BoardValidator();\nconst permissionService = new PermissionService(dbAdapter);\nconst boardService = new BoardService(\n  boardRepository,\n  boardValidator,\n  permissionService,\n  null,  // event service\n  null   // cache service\n);\n\n// Получение списка досок\nexport async function GET(request: NextRequest) {\n  try {\n    // Проверка авторизации\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = authResult.user!;\n    const { searchParams } = new URL(request.url);\n    const projectId = searchParams.get('projectId');\n\n    if (!projectId || projectId === 'null' || projectId === 'undefined' || projectId.trim() === '') {\n      return NextResponse.json(\n        { error: 'ID проекта обязателен' },\n        { status: 400 }\n      );\n    }\n    \n    // Проверка доступа к проекту\n    const hasAccess = await dbAdapter.hasProjectAccess(userId, projectId);\n    if (!hasAccess) {\n      return NextResponse.json(\n        { error: 'Нет доступа к проекту' },\n        { status: 403 }\n      );\n    }\n\n    // Используем новый сервис для получения досок\n    const result = await boardService.getBoardsByProject(projectId, userId, {\n      includeArchived: searchParams.get('includeArchived') === 'true',\n      sortBy: (searchParams.get('sortBy') as any) || 'position',\n      sortOrder: (searchParams.get('sortOrder') as any) || 'asc'\n    });\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 });\n    }\n\n    return NextResponse.json({ boards: result.data });\n  } catch (error) {\n    console.error('Ошибка получения досок:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}\n\n// Создание новой доски\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = authResult.user!;\n    const body = await request.json();\n    const validatedData = createBoardSchema.parse(body);\n\n    // Проверяем права на создание доски\n    const canCreate = await permissionService.canUserCreateBoard(validatedData.projectId, userId);\n    if (!canCreate) {\n      return NextResponse.json({ error: 'Нет прав на создание досок в этом проекте' }, { status: 403 });\n    }\n\n    // Используем новый сервис для создания доски\n    const result = await boardService.createBoard({\n      name: validatedData.name,\n      description: validatedData.description || null,\n      projectId: validatedData.projectId,\n      visibility: validatedData.visibility,\n      color: validatedData.color || '#3B82F6',\n      settings: {\n        allowTaskCreation: true,\n        allowColumnReordering: true,\n        enableTaskLimits: false,\n        defaultTaskPriority: 'medium',\n        autoArchiveCompletedTasks: false\n      }\n    }, userId);\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 });\n    }\n\n    return NextResponse.json({ board: result.data }, { status: 201 });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Validation error', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    console.error('Error creating board:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// Удаление доски (только для администраторов)\nexport async function DELETE(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { user } = authResult;\n    const { searchParams } = new URL(request.url);\n    const boardId = searchParams.get('boardId');\n\n    if (!boardId) {\n      return NextResponse.json(\n        { error: 'ID доски обязателен' },\n        { status: 400 }\n      );\n    }\n    \n    // Проверка прав на удаление доски\n    const canDelete = await permissionService.canUserDeleteBoard(user.id, Number(boardId));\n    if (!canDelete) {\n      return NextResponse.json(\n        { error: 'Недостаточно прав для удаления доски' },\n        { status: 403 }\n      );\n    }\n\n    // Используем новый сервис для удаления доски\n    const result = await boardService.delete(boardId, user.id);\n\n    if (!result.success) {\n      return NextResponse.json({ error: result.error }, { status: 400 });\n    }\n\n    return NextResponse.json(\n      { message: 'Доска успешно удалена' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Ошибка удаления доски:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}