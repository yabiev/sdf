{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`crypto`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/lib/csrf.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\n// CSRF token configuration\nconst CSRF_TOKEN_LENGTH = 32;\nconst CSRF_HEADER_NAME = 'x-csrf-token';\nconst CSRF_COOKIE_NAME = 'csrf-token';\n\n/**\n * Generate a cryptographically secure CSRF token\n */\nexport function generateCSRFToken(): string {\n  // Check if we're in Node.js environment\n  if (typeof require !== 'undefined') {\n    try {\n      const nodeCrypto = require('crypto');\n      if (nodeCrypto && typeof nodeCrypto.randomBytes === 'function') {\n        return nodeCrypto.randomBytes(CSRF_TOKEN_LENGTH).toString('hex');\n      }\n    } catch (e) {\n      // Fall through to Web Crypto API\n    }\n  }\n  \n  // Use Web Crypto API (browser/edge runtime)\n  const array = new Uint8Array(CSRF_TOKEN_LENGTH);\n  globalThis.crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Verify CSRF token from request\n */\nexport function verifyCSRFToken(request: NextRequest): boolean {\n  // Skip CSRF check for GET, HEAD, OPTIONS requests\n  if (['GET', 'HEAD', 'OPTIONS'].includes(request.method)) {\n    return true;\n  }\n\n  // Get token from header\n  const headerToken = request.headers.get(CSRF_HEADER_NAME);\n  \n  // Get token from cookie\n  const cookieToken = request.cookies.get(CSRF_COOKIE_NAME)?.value;\n\n  // Both tokens must exist and match\n  if (!headerToken || !cookieToken || headerToken !== cookieToken) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Create CSRF cookie options\n */\nexport function getCSRFCookieOptions() {\n  return {\n    name: CSRF_COOKIE_NAME,\n    httpOnly: false, // Must be accessible to JavaScript for header inclusion\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict' as const,\n    path: '/',\n    maxAge: 60 * 60 * 24, // 24 hours\n  };\n}\n\n/**\n * Get CSRF token from request cookies\n */\nexport function getCSRFTokenFromRequest(request: NextRequest): string | null {\n  return request.cookies.get(CSRF_COOKIE_NAME)?.value || null;\n}\n\nexport { CSRF_HEADER_NAME, CSRF_COOKIE_NAME };"],"names":[],"mappings":";;;;;;;;AAEA,2BAA2B;AAC3B,MAAM,oBAAoB;AAC1B,MAAM,mBAAmB;AACzB,MAAM,mBAAmB;AAKlB,SAAS;IACd,wCAAwC;IACxC,wCAAoC;QAClC,IAAI;YACF,MAAM;YACN,IAAI,cAAc,OAAO,WAAW,WAAW,KAAK,YAAY;gBAC9D,OAAO,WAAW,WAAW,CAAC,mBAAmB,QAAQ,CAAC;YAC5D;QACF,EAAE,OAAO,GAAG;QACV,iCAAiC;QACnC;IACF;IAEA,4CAA4C;IAC5C,MAAM,QAAQ,IAAI,WAAW;IAC7B,WAAW,MAAM,CAAC,eAAe,CAAC;IAClC,OAAO,MAAM,IAAI,CAAC,OAAO,CAAA,OAAQ,KAAK,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5E;AAKO,SAAS,gBAAgB,OAAoB;IAClD,kDAAkD;IAClD,IAAI;QAAC;QAAO;QAAQ;KAAU,CAAC,QAAQ,CAAC,QAAQ,MAAM,GAAG;QACvD,OAAO;IACT;IAEA,wBAAwB;IACxB,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC;IAExC,wBAAwB;IACxB,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB;IAE3D,mCAAmC;IACnC,IAAI,CAAC,eAAe,CAAC,eAAe,gBAAgB,aAAa;QAC/D,OAAO;IACT;IAEA,OAAO;AACT;AAKO,SAAS;IACd,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;QACN,QAAQ,KAAK,KAAK;IACpB;AACF;AAKO,SAAS,wBAAwB,OAAoB;IAC1D,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB,SAAS;AACzD"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyCSRFToken } from '@/lib/csrf';\n\nexport function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  \n  // CSRF Protection for API routes (except GET, HEAD, OPTIONS and CSRF endpoint)\n  if (pathname.startsWith('/api/') && !pathname.startsWith('/api/csrf')) {\n    if (!['GET', 'HEAD', 'OPTIONS'].includes(request.method)) {\n      if (!verifyCSRFToken(request)) {\n        return NextResponse.json(\n          { error: 'CSRF token validation failed' },\n          { status: 403 }\n        );\n      }\n    }\n  }\n  \n  const response = NextResponse.next();\n\n  // Security headers\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n\n  // Content Security Policy\n  const csp = [\n    \"default-src 'self'\",\n    \"script-src 'self' 'unsafe-eval' 'unsafe-inline'\",\n    \"style-src 'self' 'unsafe-inline'\",\n    \"img-src 'self' data: blob:\",\n    \"font-src 'self'\",\n    \"connect-src 'self'\",\n    \"frame-ancestors 'none'\",\n  ].join('; ');\n  response.headers.set('Content-Security-Policy', csp);\n\n  // Cache control for different types of requests\n\n  // API routes - no cache for dynamic content\n  if (pathname.startsWith('/api/')) {\n    if (pathname.includes('/auth/') || pathname.includes('/users/') || pathname.includes('/tasks/')) {\n      // Dynamic content - no cache\n      response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n      response.headers.set('Pragma', 'no-cache');\n      response.headers.set('Expires', '0');\n    } else {\n      // Semi-static content - short cache\n      response.headers.set('Cache-Control', 'public, max-age=300, s-maxage=300');\n    }\n  }\n\n  // Static assets - long cache\n  if (pathname.startsWith('/_next/static/') || \n      pathname.startsWith('/favicon.ico') ||\n      pathname.match(/\\.(js|css|png|jpg|jpeg|gif|svg|woff|woff2)$/)) {\n    response.headers.set('Cache-Control', 'public, max-age=31536000, immutable');\n  }\n\n  // HTML pages - short cache with revalidation\n  if (pathname === '/' || (!pathname.startsWith('/api/') && !pathname.startsWith('/_next/'))) {\n    response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');\n  }\n\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!_next/static|_next/image|favicon.ico).*)',\n  ],\n};"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,SAAS,WAAW,OAAoB;IAC7C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,+EAA+E;IAC/E,IAAI,SAAS,UAAU,CAAC,YAAY,CAAC,SAAS,UAAU,CAAC,cAAc;QACrE,IAAI,CAAC;YAAC;YAAO;YAAQ;SAAU,CAAC,QAAQ,CAAC,QAAQ,MAAM,GAAG;YACxD,IAAI,CAAC,CAAA,GAAA,0HAAA,CAAA,kBAAe,AAAD,EAAE,UAAU;gBAC7B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAA+B,GACxC;oBAAE,QAAQ;gBAAI;YAElB;QACF;IACF;IAEA,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;IAElC,mBAAmB;IACnB,SAAS,OAAO,CAAC,GAAG,CAAC,0BAA0B;IAC/C,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAAC,oBAAoB;IACzC,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;IACxC,SAAS,OAAO,CAAC,GAAG,CAAC,sBAAsB;IAE3C,0BAA0B;IAC1B,MAAM,MAAM;QACV;QACA;QACA;QACA;QACA;QACA;QACA;KACD,CAAC,IAAI,CAAC;IACP,SAAS,OAAO,CAAC,GAAG,CAAC,2BAA2B;IAEhD,gDAAgD;IAEhD,4CAA4C;IAC5C,IAAI,SAAS,UAAU,CAAC,UAAU;QAChC,IAAI,SAAS,QAAQ,CAAC,aAAa,SAAS,QAAQ,CAAC,cAAc,SAAS,QAAQ,CAAC,YAAY;YAC/F,6BAA6B;YAC7B,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;YACtC,SAAS,OAAO,CAAC,GAAG,CAAC,UAAU;YAC/B,SAAS,OAAO,CAAC,GAAG,CAAC,WAAW;QAClC,OAAO;YACL,oCAAoC;YACpC,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;QACxC;IACF;IAEA,6BAA6B;IAC7B,IAAI,SAAS,UAAU,CAAC,qBACpB,SAAS,UAAU,CAAC,mBACpB,SAAS,KAAK,CAAC,gDAAgD;QACjE,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;IACxC;IAEA,6CAA6C;IAC7C,IAAI,aAAa,OAAQ,CAAC,SAAS,UAAU,CAAC,YAAY,CAAC,SAAS,UAAU,CAAC,YAAa;QAC1F,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;IACxC;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;KAKC,GACD;KACD;AACH"}}]
}