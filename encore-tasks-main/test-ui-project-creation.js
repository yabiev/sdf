const puppeteer = require('puppeteer');

async function testUIProjectCreation() {
  let browser;
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ UI...');
    
    browser = await puppeteer.launch({ 
      headless: false,
      defaultViewport: { width: 1280, height: 720 }
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const currentUrl = page.url();
    console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
    
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    
    const allLinks = await page.$$('a');
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
    for (const link of allLinks) {
      const text = await page.evaluate(el => el.textContent?.trim(), link);
      const href = await page.evaluate(el => el.href, link);
      if (text) {
        console.log(`  - "${text}" -> ${href}`);
      }
    }
    
    const allButtons = await page.$$('button');
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:');
    for (const button of allButtons) {
      const text = await page.evaluate(el => el.textContent?.trim(), button);
      const className = await page.evaluate(el => el.className, button);
      if (text) {
        console.log(`  - "${text}" (class: ${className})`);
      }
    }
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–ª—é—Å–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    const allElements = await page.$$('*');
    console.log('\nüîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è...');
    for (const element of allElements) {
      const text = await page.evaluate(el => el.textContent?.trim(), element);
      const tagName = await page.evaluate(el => el.tagName, element);
      const className = await page.evaluate(el => el.className, element);
      
      if (text && (text.includes('+') || text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || text.toLowerCase().includes('–Ω–æ–≤—ã–π') || text.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å'))) {
        console.log(`  - ${tagName}: "${text}" (class: ${className})`);
      }
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–î–æ—Å–∫–∏" –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª "–î–æ—Å–∫–∏"...');
    const boardsLink = await page.$('a[href*="boards"], a[href*="projects"]');
    if (!boardsLink) {
      // –ò—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
      const allLinks2 = await page.$$('a');
      for (const link of allLinks2) {
        const text = await page.evaluate(el => el.textContent?.trim(), link);
        if (text && (text.toLowerCase().includes('–¥–æ—Å–∫–∏') || text.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç—ã'))) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: "${text}"`);
          await link.click();
          await new Promise(resolve => setTimeout(resolve, 3000));
          break;
        }
      }
    } else {
      await boardsLink.click();
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const newUrl = page.url();
    console.log(`üìç –ù–æ–≤—ã–π URL: ${newUrl}`);
    
    // –°–Ω–æ–≤–∞ –∏—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\nüîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    const newButtons = await page.$$('button');
    for (const button of newButtons) {
      const text = await page.evaluate(el => el.textContent?.trim(), button);
      const className = await page.evaluate(el => el.className, button);
      if (text) {
        console.log(`  - "${text}" (class: ${className})`);
        
        if (text.includes('+') || text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || text.toLowerCase().includes('–Ω–æ–≤—ã–π') || text.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å')) {
          console.log(`üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: "${text}"`);
          
          try {
            await button.click();
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ñ–æ—Ä–º–∞
            const modals = await page.$$('[role="dialog"], .modal, .popup');
            const forms = await page.$$('form');
            const inputs = await page.$$('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]');
            
            if (modals.length > 0 || forms.length > 0 || inputs.length > 0) {
              console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!');
              
              // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
              const nameInput = await page.$('input[name="name"]') || await page.$('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"]');
              if (nameInput) {
                const testProjectName = `UI Test Project ${Date.now()}`;
                await nameInput.type(testProjectName);
                console.log(`üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: ${testProjectName}`);
                
                // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                const submitButtons = await page.$$('button[type="submit"], button');
                for (const submitBtn of submitButtons) {
                  const btnText = await page.evaluate(el => el.textContent?.trim(), submitBtn);
                  if (btnText && (btnText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || btnText.toLowerCase().includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') || btnText.toLowerCase().includes('ok'))) {
                    console.log(`üíæ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É: "${btnText}"`);
                    await submitBtn.click();
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    const pageText = await page.evaluate(() => document.body.textContent);
                    if (pageText.includes(testProjectName)) {
                      console.log('üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!');
                      return;
                    }
                    break;
                  }
                }
              }
            } else {
              console.log('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å');
            }
          } catch (e) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: ${e.message}`);
          }
        }
      }
    }
    
    console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ UI:', error.message);
  } finally {
    if (browser) {
      // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      console.log('\nüîç –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
      await new Promise(resolve => setTimeout(resolve, 30000)); // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testUIProjectCreation().catch(console.error);