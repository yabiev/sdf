const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
require('dotenv').config();

async function checkAdmin() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const result = await pool.query(
      'SELECT id, email, password_hash, role, approval_status FROM users WHERE email = $1',
      ['axelencore@mail.ru']
    );

    if (result.rows.length === 0) {
      console.log('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const admin = result.rows[0];
    console.log('üë§ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
    console.log('  ID:', admin.id);
    console.log('  Email:', admin.email);
    console.log('  Role:', admin.role);
    console.log('  Approval status:', admin.approval_status);
    console.log('  Password hash:', admin.password_hash ? admin.password_hash.substring(0, 30) + '...' : 'null');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const testPassword = 'Ad580dc6axelencore';
    const isValid = await bcrypt.compare(testPassword, admin.password_hash);
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:');
    console.log('  –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', testPassword);
    console.log('  –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', isValid);

    if (!isValid) {
      console.log('\nüîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è...');
      const newHash = await bcrypt.hash(testPassword, 10);
      console.log('  –ù–æ–≤—ã–π —Ö–µ—à:', newHash);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
      await pool.query(
        'UPDATE users SET password_hash = $1 WHERE email = $2',
        [newHash, 'axelencore@mail.ru']
      );
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

checkAdmin();