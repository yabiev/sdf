const puppeteer = require('puppeteer');

async function debugAfterLogin() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...');
    const loginTabButton = await page.$('button');
    if (loginTabButton) {
      const buttonText = await page.evaluate(btn => btn.textContent, loginTabButton);
      console.log('üìã –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏:', buttonText);
      if (buttonText.includes('–í—Ö–æ–¥')) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í—Ö–æ–¥", –∫–ª–∏–∫–∞–µ–º...');
        await loginTabButton.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    
    // –ò—â–µ–º –ø–æ–ª–µ email
    const emailInput = await page.$('input[type="email"]');
    if (emailInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email');
      await emailInput.click();
      await emailInput.type('test@example.com');
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    const passwordInput = await page.$('input[type="password"]');
    if (passwordInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è');
      await passwordInput.click();
      await passwordInput.type('password123');
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    const submitButtons = await page.$$('button[type="submit"]');
    for (const btn of submitButtons) {
      const text = await page.evaluate(b => b.textContent, btn);
      if (text.includes('–í–æ–π—Ç–∏')) {
        console.log('‚úÖ –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"');
        await btn.click();
        break;
      }
    }
    
    // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–ê–ù–ò–¶–´ –ü–û–°–õ–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:');
    
    // –ü–æ–ª—É—á–∞–µ–º URL
    const currentUrl = page.url();
    console.log('üìç –¢–µ–∫—É—â–∏–π URL:', currentUrl);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = await page.title();
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', title);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map((btn, index) => ({
        index: index,
        text: btn.textContent?.trim() || '',
        type: btn.type || '',
        className: btn.className || '',
        id: btn.id || '',
        disabled: btn.disabled,
        innerHTML: btn.innerHTML.substring(0, 100) + '...'
      }));
    });
    
    console.log('\nüìã –í—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    allButtons.forEach((btn) => {
      console.log(`${btn.index + 1}. "${btn.text}" (type: ${btn.type}, disabled: ${btn.disabled})`);
      console.log(`   className: "${btn.className}", id: "${btn.id}"`);
      console.log('---');
    });
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüîç –ü–û–ò–°–ö –ö–ù–û–ü–û–ö –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê:');
    
    const projectButtons = allButtons.filter(btn => 
      btn.text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || 
      btn.text.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') ||
      btn.text.toLowerCase().includes('create') ||
      btn.text.toLowerCase().includes('project') ||
      btn.text.toLowerCase().includes('–Ω–æ–≤—ã–π') ||
      btn.text.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å') ||
      btn.text.toLowerCase().includes('+') ||
      btn.className.includes('create') ||
      btn.className.includes('add')
    );
    
    if (projectButtons.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
      projectButtons.forEach(btn => {
        console.log(`   ${btn.index + 1}. "${btn.text}" (className: "${btn.className}")`);
      });
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
    const allLinks = await page.evaluate(() => {
      const links = Array.from(document.querySelectorAll('a'));
      return links.map((link, index) => ({
        index: index,
        text: link.textContent?.trim() || '',
        href: link.href || '',
        className: link.className || '',
        id: link.id || ''
      }));
    });
    
    console.log('\nüìã –í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    allLinks.forEach((link) => {
      console.log(`${link.index + 1}. "${link.text}" -> ${link.href}`);
      console.log(`   className: "${link.className}", id: "${link.id}"`);
      console.log('---');
    });
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    const textContent = await page.evaluate(() => {
      return document.body.textContent || '';
    });
    
    console.log('\nüìù –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    const projectKeywords = ['–ø—Ä–æ–µ–∫—Ç', '—Å–æ–∑–¥–∞—Ç—å', '–¥–æ–±–∞–≤–∏—Ç—å', '–Ω–æ–≤—ã–π', 'project', 'create', 'add', 'new'];
    const foundKeywords = projectKeywords.filter(keyword => 
      textContent.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (foundKeywords.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', foundKeywords.join(', '));
    } else {
      console.log('‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navElements = await page.evaluate(() => {
      const navs = Array.from(document.querySelectorAll('nav, .nav, [role="navigation"]'));
      return navs.map((nav, index) => ({
        index: index,
        text: nav.textContent?.trim().substring(0, 100) || '',
        className: nav.className || '',
        id: nav.id || ''
      }));
    });
    
    if (navElements.length > 0) {
      console.log('\nüìã –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:');
      navElements.forEach((nav) => {
        console.log(`${nav.index + 1}. "${nav.text}..."`);
        console.log(`   className: "${nav.className}", id: "${nav.id}"`);
        console.log('---');
      });
    }
    
    console.log('\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    await page.screenshot({ path: 'debug-after-login-screenshot.png', fullPage: true });
    console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-after-login-screenshot.png');
    
    console.log('\n‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (60 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 60000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    await browser.close();
  }
}

debugAfterLogin().catch(console.error);