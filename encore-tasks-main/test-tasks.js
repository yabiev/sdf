const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  user: {
    email: `test_tasks_user_${Date.now()}@example.com`,
    name: 'Tasks Test User',
    password_hash: 'hashed_password_123'
  },
  project: {
    name: 'Test Tasks Project',
    description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
    color: '#10B981'
  },
  board: {
    name: 'Test Board',
    description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á',
    position: 1
  },
  tasks: [
    {
      title: '–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏',
      priority: 'medium',
      position: 1
    },
    {
      title: '–í—Ç–æ—Ä–∞—è –∑–∞–¥–∞—á–∞',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏',
      priority: 'high',
      position: 2
    },
    {
      title: '–¢—Ä–µ—Ç—å—è –∑–∞–¥–∞—á–∞',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏',
      priority: 'low',
      position: 3
    }
  ]
};

let testUserId = null;
let testProjectId = null;
let testBoardId = null;
let testTaskIds = [];

async function testTasks() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò');
    console.log('=' .repeat(60));
    
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const createUserResult = await client.query(`
         INSERT INTO users (email, name, password_hash)
         VALUES ($1, $2, $3)
         RETURNING id, email, created_at
       `, [
          testData.user.email,
          testData.user.name,
          testData.user.password_hash
        ]);
      
      testUserId = createUserResult.rows[0].id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testUserId}`);
      console.log(`   Email: ${createUserResult.rows[0].email}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüìÅ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const createProjectResult = await client.query(`
        INSERT INTO projects (name, description, owner_id, color)
        VALUES ($1, $2, $3, $4)
        RETURNING id, name, description
      `, [
        testData.project.name,
        testData.project.description,
        testUserId,
        testData.project.color
      ]);
      
      testProjectId = createProjectResult.rows[0].id;
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testProjectId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createProjectResult.rows[0].name}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    console.log('\nüìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
    try {
      const createBoardResult = await client.query(`
        INSERT INTO boards (name, description, project_id, position)
        VALUES ($1, $2, $3, $4)
        RETURNING id, name, description
      `, [
        testData.board.name,
        testData.board.description,
        testProjectId,
        testData.board.position
      ]);
      
      testBoardId = createBoardResult.rows[0].id;
      console.log(`‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testBoardId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createBoardResult.rows[0].name}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏: ${error.message}`);
      throw error;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã tasks
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã tasks...');
    try {
      const tasksStructure = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns
        WHERE table_name = 'tasks'
        ORDER BY ordinal_position
      `);
      
      if (tasksStructure.rows.length === 0) {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É tasks –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏');
        return;
      }
      
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tasks:');
      tasksStructure.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã tasks: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    console.log('\nüìù –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
    for (let i = 0; i < testData.tasks.length; i++) {
      const task = testData.tasks[i];
      try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        const createTaskResult = await client.query(`
          INSERT INTO tasks (title, description, project_id, board_id, position, priority, created_by)
          VALUES ($1, $2, $3, $4, $5, $6, $7)
          RETURNING id, title, description, project_id, board_id, position, priority, created_at
        `, [
          task.title,
          task.description,
          1, // project_id –∫–∞–∫ integer
          testBoardId,
          task.position,
          task.priority,
          testUserId
        ]);
        
        const taskId = createTaskResult.rows[0].id;
        testTaskIds.push(taskId);
        
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
        console.log(`   ID: ${taskId}`);
        console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${createTaskResult.rows[0].title}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${createTaskResult.rows[0].description}`);
        console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${createTaskResult.rows[0].project_id}`);
        console.log(`   –î–æ—Å–∫–∞ ID: ${createTaskResult.rows[0].board_id}`);
        console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${createTaskResult.rows[0].position}`);
        console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${createTaskResult.rows[0].priority}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${createTaskResult.rows[0].created_at}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ "${task.title}": ${error.message}`);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        if (error.message.includes('–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
          console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...');
          try {
            const simpleTaskResult = await client.query(`
              INSERT INTO tasks (title, description, project_id, board_id)
              VALUES ($1, $2, $3, $4)
              RETURNING id, title, description, project_id, board_id, created_at
            `, [
              task.title,
              task.description,
              1, // project_id –∫–∞–∫ integer
              testBoardId
            ]);
            
            const taskId = simpleTaskResult.rows[0].id;
            testTaskIds.push(taskId);
            
            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ "${task.title}" —Å–æ–∑–¥–∞–Ω–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:`);
            console.log(`   ID: ${taskId}`);
            console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${simpleTaskResult.rows[0].title}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${simpleTaskResult.rows[0].description}`);
            console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${simpleTaskResult.rows[0].project_id}`);
            console.log(`   –î–æ—Å–∫–∞ ID: ${simpleTaskResult.rows[0].board_id}`);
          } catch (simpleError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ${simpleError.message}`);
            throw simpleError;
          }
        } else {
          throw error;
        }
      }
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏
    console.log('\nüîç –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏...');
    try {
      const getTasksResult = await client.query(`
        SELECT 
          t.*,
          u.name as creator_name,
          b.name as board_name
        FROM tasks t
        LEFT JOIN users u ON t.created_by = u.id
        JOIN boards b ON t.board_id = b.id
        WHERE t.board_id = $1
        ORDER BY t.position ASC, t.created_at ASC
      `, [testBoardId]);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${getTasksResult.rows.length}`);
      getTasksResult.rows.forEach((task, index) => {
        console.log(`   ${index + 1}. "${task.title}" (ID: ${task.id})`);
        console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`);
        console.log(`      –î–æ—Å–∫–∞: ${task.board_name}`);
        console.log(`      –°–æ–∑–¥–∞—Ç–µ–ª—å: ${task.creator_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
        if (task.priority) console.log(`      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority}`);
        if (task.position) console.log(`      –ü–æ–∑–∏—Ü–∏—è: ${task.position}`);
        console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${task.created_at}`);
        console.log('');
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${error.message}`);
    }

    // –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('\n‚úèÔ∏è –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    if (testTaskIds.length > 0) {
      try {
        const updatedTitle = testData.tasks[0].title + ' (–û–±–Ω–æ–≤–ª–µ–Ω–∞)';
        const updatedDescription = testData.tasks[0].description + ' - –æ–±–Ω–æ–≤–ª–µ–Ω–æ';
        
        const updateTaskResult = await client.query(`
          UPDATE tasks 
          SET title = $1, description = $2, updated_at = NOW()
          WHERE id = $3
          RETURNING id, title, description, updated_at
        `, [updatedTitle, updatedDescription, testTaskIds[0]]);
        
        if (updateTaskResult.rows.length > 0) {
          const task = updateTaskResult.rows[0];
          console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
          console.log(`   ID: ${task.id}`);
          console.log(`   –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${task.title}`);
          console.log(`   –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`);
          console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${task.updated_at}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      }
    }

    // –¢–µ—Å—Ç 7: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞—á
    console.log('\nüîÑ –¢–µ—Å—Ç 7: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞—á...');
    if (testTaskIds.length >= 2) {
      try {
        // –ü–æ–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –∑–∞–¥–∞—á—É
        await client.query(`
          UPDATE tasks SET position = $1, updated_at = NOW() WHERE id = $2
        `, [99, testTaskIds[0]]); // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        await client.query(`
          UPDATE tasks SET position = $1, updated_at = NOW() WHERE id = $2
        `, [1, testTaskIds[1]]);
        
        await client.query(`
          UPDATE tasks SET position = $1, updated_at = NOW() WHERE id = $2
        `, [2, testTaskIds[0]]);
        
        console.log(`‚úÖ –ü–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
        const newOrderResult = await client.query(`
          SELECT id, title, position
          FROM tasks
          WHERE board_id = $1
          ORDER BY position ASC, created_at ASC
        `, [testBoardId]);
        
        console.log('   –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –∑–∞–¥–∞—á:');
        newOrderResult.rows.forEach((task, index) => {
          console.log(`   ${index + 1}. "${task.title}" (–ü–æ–∑–∏—Ü–∏—è: ${task.position || '–Ω–µ –∑–∞–¥–∞–Ω–∞'})`);
        });
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∑–∞–¥–∞—á: ${error.message}`);
      }
    }

    // –û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
      if (testTaskIds.length > 0) {
        const deleteTasksResult = await client.query(
          `DELETE FROM tasks WHERE id = ANY($1)`,
          [testTaskIds]
        );
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${deleteTasksResult.rowCount}`);
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
      if (testBoardId) {
        await client.query('DELETE FROM boards WHERE id = $1', [testBoardId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      if (testProjectId) {
        await client.query('DELETE FROM projects WHERE id = $1', [testProjectId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (testUserId) {
        await client.query('DELETE FROM users WHERE id = $1', [testUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }

    client.release();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–î–ê–ß:');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã tasks: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º –∑–∞–¥–∞—á: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û');
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–î–ê–ß –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(`   ${error.message}`);
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tasks');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ tasks');
    console.log('   4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ');
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testTasks()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}