const { SQLiteAdapter } = require('./src/lib/sqlite-adapter.ts');
const path = require('path');

try {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLite Adapter...');
  
  const dbPath = path.join(__dirname, 'database.db');
  const adapter = new SQLiteAdapter(dbPath);
  
  console.log('üìã Adapter —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  
  // –¢–µ—Å—Ç getUserByEmail
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ getUserByEmail...');
  
  adapter.getUserByEmail('test@example.com')
    .then(user => {
      console.log('‚úÖ getUserByEmail –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç:', user);
      
      if (user) {
        console.log('üìã –î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log('  ID:', user.id);
        console.log('  Email:', user.email);
        console.log('  Name:', user.name);
        console.log('  Password hash:', user.password_hash ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('  Role:', user.role);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserByEmail:', error.message);
      console.error('‚ùå Stack trace:', error.stack);
    });
    
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è adapter:', error.message);
  console.error('‚ùå Stack trace:', error.stack);
}