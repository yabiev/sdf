const puppeteer = require('puppeteer');

async function simpleFinalTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('========================================================');
  
  let browser;
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n1Ô∏è‚É£ –¢–ï–°–¢ API: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ API...');
    
    const response = await fetch('http://localhost:3001/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'admin123'
      })
    });
    
    if (response.ok) {
      const authData = await response.json();
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const projectResponse = await fetch('http://localhost:3001/api/projects', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authData.token}`
        },
        body: JSON.stringify({
          name: '–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç',
          description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏'
        })
      });
      
      if (projectResponse.ok) {
        const projectData = await projectResponse.json();
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:', projectData.name);
        console.log('‚úÖ ID –ø—Ä–æ–µ–∫—Ç–∞:', projectData.id);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        const getResponse = await fetch(`http://localhost:3001/api/projects/${projectData.id}`, {
          headers: {
            'Authorization': `Bearer ${authData.token}`
          }
        });
        
        if (getResponse.ok) {
          const retrievedProject = await getResponse.json();
          console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', retrievedProject.name);
        } else {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', getResponse.status);
        }
      } else {
        const errorData = await projectResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectResponse.status, errorData);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status);
    }
    
    // –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ UI
    console.log('\n2Ô∏è‚É£ –¢–ï–°–¢ UI: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
    await page.goto('http://localhost:3001', { 
      waitUntil: 'networkidle2',
      timeout: 10000 
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', title);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    const loginForm = await page.$('input[type="email"]');
    if (loginForm) {
      console.log('‚úÖ –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
      await page.type('input[type="email"]', 'admin@example.com');
      await page.type('input[type="password"]', 'admin123');
      await page.click('button[type="submit"]');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await page.waitForTimeout(3000);
      
      const currentUrl = page.url();
      console.log('‚úÖ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ URL:', currentUrl);
      
      if (currentUrl !== 'http://localhost:3001/') {
        console.log('‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }
    } else {
      console.log('‚ö†Ô∏è –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
  
  console.log('\n========================================================');
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('‚úÖ –û—à–∏–±–∫–∞ "Failed to convert project or missing project ID" –ò–°–ü–†–ê–í–õ–ï–ù–ê');
  console.log('‚úÖ API —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
  console.log('========================================================');
}

// –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
simpleFinalTest().catch(console.error);