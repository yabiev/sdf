const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã user_sessions...');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        envVars[key.trim()] = value.trim().replace(/["']/g, '');
      }
    });
    
    console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env:');
    console.log(`  - DB_HOST: ${envVars.DB_HOST}`);
    console.log(`  - DB_PORT: ${envVars.DB_PORT}`);
    console.log(`  - DB_NAME: ${envVars.DB_NAME}`);
    console.log(`  - DB_USER: ${envVars.DB_USER}`);
    console.log(`  - DB_PASSWORD: ${envVars.DB_PASSWORD ? '[–°–ö–†–´–¢]' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
    
    return envVars;
  } else {
    console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return {};
  }
}

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
function createPool(envVars) {
  const config = {
    host: envVars.DB_HOST || 'localhost',
    port: parseInt(envVars.DB_PORT || '5432'),
    database: envVars.DB_NAME || 'encore_tasks',
    user: envVars.DB_USER || 'postgres',
    password: envVars.DB_PASSWORD || 'password',
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    connectionTimeoutMillis: 5000,
    idleTimeoutMillis: 10000,
    max: 1
  };
  
  console.log('\nüîó –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  console.log(`  - –•–æ—Å—Ç: ${config.host}:${config.port}`);
  console.log(`  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.database}`);
  console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${config.user}`);
  
  return new Pool(config);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
async function diagnosePgSessions() {
  const envVars = loadEnvFile();
  const pool = createPool(envVars);
  
  try {
    console.log('\n1. üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
    const versionResult = await client.query('SELECT version()');
    console.log(`üìä –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version}`);
    
    console.log('\n2. üóÉÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    const tablesQuery = `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('users', 'user_sessions', 'sessions')
      ORDER BY table_name
    `;
    
    const tablesResult = await client.query(tablesQuery);
    const existingTables = tablesResult.rows.map(row => row.table_name);
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
    ['users', 'user_sessions', 'sessions'].forEach(tableName => {
      const exists = existingTables.includes(tableName);
      console.log(`  - ${tableName}: ${exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}`);
    });
    
    console.log('\n3. üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã user_sessions...');
    
    if (existingTables.includes('user_sessions')) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_sessions
      const structureQuery = `
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'user_sessions'
        ORDER BY ordinal_position
      `;
      
      const structureResult = await client.query(structureQuery);
      
      console.log('üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_sessions:');
      structureResult.rows.forEach(column => {
        console.log(`  - ${column.column_name}: ${column.data_type} ${column.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${column.column_default ? `DEFAULT ${column.column_default}` : ''}`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ session_token
      const hasSessionToken = structureResult.rows.some(col => col.column_name === 'session_token');
      console.log(`\nüîë –ü–æ–ª–µ session_token: ${hasSessionToken ? '‚úÖ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      
      console.log('\n4. üìà –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ user_sessions...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      const countResult = await client.query('SELECT COUNT(*) as count FROM user_sessions');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ user_sessions: ${countResult.rows[0].count}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      const dataQuery = `
        SELECT 
          id,
          user_id,
          session_token,
          expires_at,
          created_at
        FROM user_sessions 
        ORDER BY created_at DESC 
        LIMIT 5
      `;
      
      const dataResult = await client.query(dataQuery);
      
      if (dataResult.rows.length > 0) {
        console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ user_sessions:');
        dataResult.rows.forEach((session, index) => {
          console.log(`  ${index + 1}. ID: ${session.id}, User: ${session.user_id}, Token: ${session.session_token?.substring(0, 20)}..., Expires: ${session.expires_at}`);
        });
      } else {
        console.log('\nüìã –¢–∞–±–ª–∏—Ü–∞ user_sessions –ø—É—Å—Ç–∞');
      }
      
      console.log('\n5. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await client.query('SELECT id, email FROM users LIMIT 1');
      
      if (usersResult.rows.length > 0) {
        const testUser = usersResult.rows[0];
        console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.email} (ID: ${testUser.id})`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        const testToken = 'test_session_' + Date.now();
        const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
        
        const insertSessionQuery = `
          INSERT INTO user_sessions (user_id, session_token, expires_at, created_at)
          VALUES ($1, $2, $3, NOW())
          RETURNING id, session_token
        `;
        
        const insertResult = await client.query(insertSessionQuery, [testUser.id, testToken, expiresAt]);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ID ${insertResult.rows[0].id}`);
        
        // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        const findSessionQuery = `
          SELECT 
            us.id,
            us.user_id,
            us.session_token,
            us.expires_at,
            u.email
          FROM user_sessions us
          JOIN users u ON us.user_id = u.id
          WHERE us.session_token = $1
          AND us.expires_at > NOW()
        `;
        
        const findResult = await client.query(findSessionQuery, [testToken]);
        
        if (findResult.rows.length > 0) {
          const foundSession = findResult.rows[0];
          console.log(`‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: User ${foundSession.email}, Expires: ${foundSession.expires_at}`);
        } else {
          console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞');
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        await client.query('DELETE FROM user_sessions WHERE session_token = $1', [testToken]);
        console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
        
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
      
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ user_sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É user_sessions —Å –ø–æ–º–æ—â—å—é –º–∏–≥—Ä–∞—Ü–∏–∏');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è: id, user_id, session_token, expires_at, created_at');
    }
    
    console.log('\n6. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã sessions (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)...');
    
    if (existingTables.includes('sessions')) {
      const sessionsStructureQuery = `
        SELECT 
          column_name,
          data_type,
          is_nullable
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'sessions'
        ORDER BY ordinal_position
      `;
      
      const sessionsStructureResult = await client.query(sessionsStructureQuery);
      
      console.log('üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã sessions:');
      sessionsStructureResult.rows.forEach(column => {
        console.log(`  - ${column.column_name}: ${column.data_type} ${column.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'}`);
      });
      
      const sessionsCountResult = await client.query('SELECT COUNT(*) as count FROM sessions');
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ sessions: ${sessionsCountResult.rows[0].count}`);
    }
    
    client.release();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ PostgreSQL:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('1. PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env');
      console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º');
    } else if (error.code === '28P01') {
      console.log('\nüí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ .env');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ PostgreSQL');
    } else if (error.code === '3D000') {
      console.log('\nüí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:');
      console.log('1. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∏–º–µ–Ω–µ–º –∏–∑ .env');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnosePgSessions().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
});