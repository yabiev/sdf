const Database = require('better-sqlite3');
const path = require('path');

async function debugTokenMismatch() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–æ–≤...');
    
    // –¢–æ–∫–µ–Ω –∏–∑ test-board-creation.js
    const expectedToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJkMDEyYjA3OS01Nzk4LTQ5ZDUtOGNmZi0wZTFkYmVhNTgyMmUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwidGltZXN0YW1wIjoxNzU2MjM0NjkzNzQwLCJyYW5kb20iOiIxY2RheHBtcGkwdCIsImlhdCI6MTc1NjIzNDY5MywiZXhwIjoxNzU2ODM5NDkzfQ.H_rjpq61Mld2b7LaUxcVQl9Rf6qQgwBcmtPDByQNylo';
    
    console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω:');
    console.log('–î–ª–∏–Ω–∞:', expectedToken.length);
    console.log('–ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤:', expectedToken.substring(0, 50));
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–∏–º–≤–æ–ª–æ–≤:', expectedToken.substring(expectedToken.length - 50));
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbPath = path.join(__dirname, 'database.sqlite');
    const db = new Database(dbPath);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ—Å—Å–∏–∏
    const sessions = db.prepare(`
      SELECT id, user_id, token, created_at, expires_at 
      FROM sessions 
      ORDER BY created_at DESC 
      LIMIT 3
    `).all();
    
    console.log('\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–µ—Å—Å–∏–∏ –≤ –ë–î:');
    sessions.forEach((session, index) => {
      console.log(`\n${index + 1}. –°–µ—Å—Å–∏—è ID: ${session.id}`);
      console.log(`   User ID: ${session.user_id}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${session.created_at}`);
      console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${session.expires_at}`);
      
      if (session.token) {
        console.log(`   –¢–æ–∫–µ–Ω –¥–ª–∏–Ω–∞: ${session.token.length}`);
        console.log(`   –¢–æ–∫–µ–Ω –ø–µ—Ä–≤—ã–µ 50: ${session.token.substring(0, 50)}`);
        console.log(`   –¢–æ–∫–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50: ${session.token.substring(session.token.length - 50)}`);
        
        const matches = session.token === expectedToken;
        console.log(`   ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º: ${matches ? '–î–ê' : '–ù–ï–¢'}`);
        
        if (!matches) {
          console.log(`   üîç –†–∞–∑–ª–∏—á–∏—è –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö:`);
          for (let i = 0; i < Math.max(session.token.length, expectedToken.length); i++) {
            if (session.token[i] !== expectedToken[i]) {
              console.log(`      –ü–æ–∑–∏—Ü–∏—è ${i}: –ë–î='${session.token[i] || 'undefined'}' vs –û–∂–∏–¥–∞–µ–º—ã–π='${expectedToken[i] || 'undefined'}'`);
              if (i > 5) break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–ª–∏—á–∏–π
            }
          }
        }
      } else {
        console.log(`   ‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (null)`);
      }
    });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const exactMatch = db.prepare('SELECT * FROM sessions WHERE token = ?