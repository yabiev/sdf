const { Client } = require('pg');
const jwt = require('jsonwebtoken');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
const dbConfig = {
  host: 'localhost',
  port: 5432,
  database: 'encore_tasks',
  user: 'postgres',
  password: 'postgres'
};

// JWT Secret
const JWT_SECRET = 'your-super-secret-jwt-key-here-change-in-production';

async function createPostgresSession() {
  const client = new Client(dbConfig);
  
  try {
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ò—â–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ PostgreSQL id –∏–º–µ–µ—Ç —Ç–∏–ø INTEGER)
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL...');
    let userQuery = 'SELECT * FROM users LIMIT 1';
    let userResult = await client.query(userQuery);
    
    if (userResult.rows.length === 0) {
      throw new Error('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const user = userResult.rows[0];
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role
    });
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = {
      userId: user.id,
      email: user.email,
      role: user.role,
      name: user.name
    };
    
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });
    console.log('üîë –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω:', token);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deleteQuery = 'DELETE FROM sessions WHERE user_id = $1';
    const deleteResult = await client.query(deleteQuery, [user.id]);
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π:', deleteResult.rowCount);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π session_token
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    const insertQuery = `
      INSERT INTO sessions (session_token, user_id, expires_at, created_at) 
      VALUES ($1, $2, $3, NOW()) 
      RETURNING id
    `;
    
    const insertResult = await client.query(insertQuery, [token, user.id, expiresAt]);
    const sessionId = insertResult.rows[0].id;
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, ID:', sessionId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const checkQuery = 'SELECT session_token, user_id, expires_at FROM sessions WHERE id = $1';
    const checkResult = await client.query(checkQuery, [sessionId]);
    
    if (checkResult.rows.length > 0) {
      const session = checkResult.rows[0];
      console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ PostgreSQL:', {
        session_token: session.session_token.substring(0, 50) + '...',
        user_id: session.user_id,
        expires_at: session.expires_at
      });
    }
    
    console.log('\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(token);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await client.end();
  }
}

createPostgresSession();