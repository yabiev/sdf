"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/refactored/business/services/project.service.client.ts":
/*!********************************************************************!*\
  !*** ./src/refactored/business/services/project.service.client.ts ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientProjectService: () => (/* binding */ ClientProjectService),\n/* harmony export */   clientProjectService: () => (/* binding */ clientProjectService)\n/* harmony export */ });\nclass ClientProjectService {\n    async getProjects() {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        var _filters_pagination, _filters_pagination1;\n        const params = new URLSearchParams();\n        if (filters.status) params.append('status', filters.status);\n        if (filters.search) params.append('query', filters.search);\n        if (filters.sortBy) params.append('sortBy', filters.sortBy);\n        if (filters.sortOrder) params.append('sortOrder', filters.sortOrder);\n        if (filters.showArchived !== undefined) params.append('showArchived', filters.showArchived.toString());\n        if ((_filters_pagination = filters.pagination) === null || _filters_pagination === void 0 ? void 0 : _filters_pagination.page) params.append('page', filters.pagination.page.toString());\n        if ((_filters_pagination1 = filters.pagination) === null || _filters_pagination1 === void 0 ? void 0 : _filters_pagination1.limit) params.append('limit', filters.pagination.limit.toString());\n        const response = await fetch(\"\".concat(this.baseUrl, \"?\").concat(params));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch projects: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async getById(id, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id));\n        if (!response.ok) {\n            if (response.status === 404) throw new Error('Project not found');\n            throw new Error(\"Failed to fetch project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async create(projectData, userId) {\n        const response = await fetch(this.baseUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                ...projectData,\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to create project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async update(id, updates, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id), {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                ...updates,\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to update project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async delete(id, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id), {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to delete project: \".concat(response.statusText));\n        }\n    }\n    async archive(id, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id, \"/archive\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to archive project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async restore(id, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id, \"/restore\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to restore project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async getByUserId(userId, filters) {\n        const params = new URLSearchParams();\n        if (filters === null || filters === void 0 ? void 0 : filters.statuses) params.append('statuses', filters.statuses.join(','));\n        if (filters === null || filters === void 0 ? void 0 : filters.query) params.append('query', filters.query);\n        const response = await fetch(\"\".concat(this.baseUrl, \"?\").concat(params));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch user projects: \".concat(response.statusText));\n        }\n        const result = await response.json();\n        return result.data || result;\n    }\n    async getProjectMembers(projectId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(projectId, \"/members\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch project members: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async addMember(projectId, memberData, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(projectId, \"/members\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                ...memberData,\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to add project member: \".concat(response.statusText));\n        }\n    }\n    async removeMember(projectId, memberId, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(projectId, \"/members/\").concat(memberId), {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to remove project member: \".concat(response.statusText));\n        }\n    }\n    async duplicate(id, newName, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id, \"/duplicate\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                newName,\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to duplicate project: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async updateMemberRole(projectId, memberId, role, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(projectId, \"/members/\").concat(memberId, \"/role\"), {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                role,\n                userId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to update member role: \".concat(response.statusText));\n        }\n    }\n    async getStatistics(id, userId) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(id, \"/statistics\"), {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Failed to get project statistics: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    async checkPermissions(projectId, userId, permission) {\n        const response = await fetch(\"\".concat(this.baseUrl, \"/\").concat(projectId, \"/permissions/\").concat(userId, \"/\").concat(permission));\n        if (!response.ok) {\n            throw new Error(\"Failed to check permissions: \".concat(response.statusText));\n        }\n        const result = await response.json();\n        return result.hasPermission || false;\n    }\n    constructor(){\n        this.baseUrl = '/api/projects';\n    }\n}\nconst clientProjectService = new ClientProjectService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/refactored/business/services/project.service.client.ts\n"));

/***/ })

});