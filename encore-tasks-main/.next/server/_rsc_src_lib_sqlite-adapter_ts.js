"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_sqlite-adapter_ts";
exports.ids = ["_rsc_src_lib_sqlite-adapter_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/sqlite-adapter.ts":
/*!***********************************!*\
  !*** ./src/lib/sqlite-adapter.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SQLiteAdapter: () => (/* binding */ SQLiteAdapter),\n/* harmony export */   sqliteAdapter: () => (/* binding */ sqliteAdapter)\n/* harmony export */ });\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-sqlite3 */ \"better-sqlite3\");\n/* harmony import */ var better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(better_sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// =====================================================\n// SQLite –ê–î–ê–ü–¢–ï–† –î–õ–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø\n// =====================================================\n\n\n\nclass SQLiteAdapter {\n    constructor(){\n        this.isInitialized = false;\n        const dbPath = path__WEBPACK_IMPORTED_MODULE_1__.join(process.cwd(), 'database.sqlite');\n        this.db = new (better_sqlite3__WEBPACK_IMPORTED_MODULE_0___default())(dbPath);\n    }\n    static getInstance() {\n        if (!SQLiteAdapter.instance) {\n            SQLiteAdapter.instance = new SQLiteAdapter();\n        }\n        return SQLiteAdapter.instance;\n    }\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü\n            const tables = this.db.prepare(\"SELECT name FROM sqlite_master WHERE type='table'\").all();\n            console.log('‚úÖ SQLite –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');\n            console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.map((t)=>t.name));\n            this.isInitialized = true;\n        } catch (error) {\n            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –∞–¥–∞–ø—Ç–µ—Ä–∞:', error);\n            throw error;\n        }\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò\n    // =====================================================\n    async createUser(userData) {\n        try {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const now = new Date().toISOString();\n            const { email, name, avatar, role = 'user', isApproved = false, password_hash } = userData;\n            const stmt = this.db.prepare(`\n        INSERT INTO users (id, email, name, avatar_url, role, approval_status, password_hash, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º isApproved –≤ —á–∏—Å–ª–æ –¥–ª—è approval_status (BOOLEAN –≤ SQLite)\n            const approvalStatus = isApproved ? 1 : 0;\n            // –ò—Å–ø–æ–ª—å–∑—É–µ–º avatar –∫–∞–∫ avatar_url –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ SQLite\n            stmt.run(id, email, name, avatar || null, role, approvalStatus, password_hash, now, now);\n            return {\n                id,\n                email: email || '',\n                name: name || '',\n                avatar,\n                role,\n                isApproved,\n                created_at: now,\n                updated_at: now\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);\n            throw new Error(`Failed to create user: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getUserById(id) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM users WHERE id = ?');\n            const dbUser = stmt.get(id);\n            if (!dbUser) return null;\n            return {\n                id: dbUser.id,\n                name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],\n                email: dbUser.email,\n                avatar: dbUser.avatar || dbUser.avatar_url,\n                role: dbUser.role || 'user',\n                isApproved: dbUser.isApproved || dbUser.is_approved || dbUser.approval_status,\n                lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,\n                created_at: dbUser.created_at,\n                updated_at: dbUser.updated_at,\n                password_hash: dbUser.password_hash\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error);\n            throw new Error(`Failed to get user by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getUserByEmail(email) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM users WHERE email = ?');\n            const dbUser = stmt.get(email);\n            if (!dbUser) return null;\n            return {\n                id: dbUser.id,\n                name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],\n                email: dbUser.email,\n                avatar: dbUser.avatar || dbUser.avatar_url,\n                role: dbUser.role || 'user',\n                isApproved: dbUser.isApproved || dbUser.is_approved || dbUser.approval_status,\n                lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,\n                created_at: dbUser.created_at,\n                updated_at: dbUser.updated_at,\n                password_hash: dbUser.password_hash\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', error);\n            throw new Error(`Failed to get user by email: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getAllUsers() {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM users');\n            const dbUsers = stmt.all();\n            return dbUsers.map((dbUser)=>({\n                    id: dbUser.id,\n                    name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],\n                    email: dbUser.email,\n                    avatar: dbUser.avatar || dbUser.avatar_url,\n                    role: dbUser.role || 'user',\n                    isApproved: dbUser.isApproved || dbUser.is_approved,\n                    lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,\n                    created_at: dbUser.created_at,\n                    updated_at: dbUser.updated_at,\n                    password_hash: dbUser.password_hash\n                }));\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);\n            throw new Error(`Failed to get all users: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async updateUser(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id');\n        if (fields.length === 0) return null;\n        const setClause = fields.map((field)=>`${field} = ?`).join(', ');\n        const values = fields.map((field)=>updates[field]);\n        values.push(new Date().toISOString()); // updated_at\n        values.push(id);\n        const stmt = this.db.prepare(`\n      UPDATE users SET ${setClause}, updated_at = ? WHERE id = ?\n    `);\n        stmt.run(...values);\n        return this.getUserById(id);\n    }\n    async deleteUser(id) {\n        const stmt = this.db.prepare('DELETE FROM users WHERE id = ?');\n        const result = stmt.run(id);\n        return result.changes > 0;\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –°–ï–°–°–ò–Ø–ú–ò\n    // =====================================================\n    async createSession(sessionData) {\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const now = new Date().toISOString();\n        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ expires_at —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π\n        if (!sessionData.expires_at) {\n            throw new Error('Invalid expires_at date provided');\n        }\n        console.log('üîê SQLite: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', {\n            token: sessionData.token ? 'present' : 'missing',\n            userId: sessionData.user_id,\n            expires_at: sessionData.expires_at\n        });\n        const stmt = this.db.prepare(`\n      INSERT INTO sessions (id, token, user_id, expires_at, created_at)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n        stmt.run(id, sessionData.token, sessionData.user_id, sessionData.expires_at, now);\n        return {\n            id,\n            token: sessionData.token,\n            user_id: sessionData.user_id,\n            expires_at: sessionData.expires_at,\n            created_at: now\n        };\n    }\n    async getSessionByToken(token) {\n        try {\n            console.log('üîç SQLite: –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É:', token);\n            const stmt = this.db.prepare('SELECT * FROM sessions WHERE token = ? AND expires_at > datetime(\\'now\\')');\n            const dbSession = stmt.get(token);\n            if (!dbSession) {\n                console.log('üìä SQLite: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');\n                return null;\n            }\n            console.log('üìä SQLite: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', dbSession);\n            return {\n                id: dbSession.id,\n                token: dbSession.token,\n                user_id: dbSession.user_id,\n                expires_at: dbSession.expires_at,\n                created_at: dbSession.created_at\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É:', error);\n            throw new Error(`Failed to get session by token: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async deleteSession(token) {\n        try {\n            const stmt = this.db.prepare('DELETE FROM sessions WHERE token = ?');\n            const result = stmt.run(token);\n            return result.changes > 0;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);\n            throw new Error(`Failed to delete session: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async deleteUserSessions(userId) {\n        try {\n            const stmt = this.db.prepare('DELETE FROM sessions WHERE user_id = ?');\n            const result = stmt.run(userId);\n            return result.changes;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);\n            throw new Error(`Failed to delete user sessions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async deleteExpiredSessions() {\n        try {\n            const now = new Date().toISOString();\n            const stmt = this.db.prepare('DELETE FROM sessions WHERE expires_at < ?');\n            const result = stmt.run(now);\n            return result.changes;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', error);\n            throw new Error(`Failed to delete expired sessions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ï–ö–¢–ê–ú–ò\n    // =====================================================\n    async createProject(projectData) {\n        try {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const now = new Date().toISOString();\n            const { name, description, created_by, color, icon_url, telegram_chat_id, telegram_topic_id } = projectData;\n            const stmt = this.db.prepare(`\n        INSERT INTO projects (id, name, description, creator_id, color, icon, telegram_chat_id, telegram_topic_id, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n            stmt.run(id, name, description, created_by, color || '#3B82F6', icon_url || 'üìã', telegram_chat_id, telegram_topic_id, now, now);\n            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞\n            const memberStmt = this.db.prepare(`\n        INSERT INTO project_members (id, project_id, user_id, role, joined_at)\n        VALUES (?, ?, ?, ?, ?)\n      `);\n            const memberId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            memberStmt.run(memberId, id, created_by, 'owner', now);\n            return {\n                id,\n                name: name || '',\n                description: description || '',\n                created_by: created_by || '',\n                color: color || '#3B82F6',\n                icon_url: icon_url || 'üìã',\n                telegram_chat_id: telegram_chat_id || null,\n                telegram_topic_id: telegram_topic_id || null,\n                created_at: now,\n                updated_at: now\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);\n            throw new Error(`Failed to create project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getProjectById(id) {\n        const stmt = this.db.prepare('SELECT * FROM projects WHERE id = ?');\n        const dbProject = stmt.get(id);\n        if (!dbProject) return null;\n        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n        const project = {\n            id: dbProject.id,\n            name: dbProject.name,\n            description: dbProject.description,\n            created_by: dbProject.creator_id,\n            color: dbProject.color,\n            icon_url: dbProject.icon || 'üìã',\n            created_at: dbProject.created_at,\n            updated_at: dbProject.updated_at\n        };\n        return project;\n    }\n    async getUserProjects(userId) {\n        const stmt = this.db.prepare(`\n      SELECT * FROM projects WHERE creator_id = ?\n    `);\n        const dbProjects = stmt.all(userId);\n        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n        return dbProjects.map((dbProject)=>({\n                id: dbProject.id,\n                name: dbProject.name,\n                description: dbProject.description,\n                created_by: dbProject.creator_id,\n                color: dbProject.color,\n                icon_url: dbProject.icon || 'üìã',\n                created_at: dbProject.created_at,\n                updated_at: dbProject.updated_at\n            }));\n    }\n    async getAllProjects() {\n        const stmt = this.db.prepare('SELECT * FROM projects');\n        const dbProjects = stmt.all();\n        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç\n        return dbProjects.map((dbProject)=>({\n                id: dbProject.id,\n                name: dbProject.name,\n                description: dbProject.description,\n                color: dbProject.color,\n                icon_url: dbProject.icon || 'üìã',\n                created_by: dbProject.creator_id,\n                created_at: dbProject.created_at,\n                updated_at: dbProject.updated_at\n            }));\n    }\n    async deleteProject(id) {\n        try {\n            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è\n            this.db.exec('BEGIN TRANSACTION');\n            // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞\n            const deleteTasksStmt = this.db.prepare('DELETE FROM tasks WHERE project_id = ?');\n            deleteTasksStmt.run(id);\n            // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞\n            const deleteColumnsStmt = this.db.prepare(`\n        DELETE FROM columns WHERE board_id IN (\n          SELECT id FROM boards WHERE project_id = ?\n        )\n      `);\n            deleteColumnsStmt.run(id);\n            // –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n            const deleteBoardsStmt = this.db.prepare('DELETE FROM boards WHERE project_id = ?');\n            deleteBoardsStmt.run(id);\n            // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n            const deleteMembersStmt = this.db.prepare('DELETE FROM project_members WHERE project_id = ?');\n            deleteMembersStmt.run(id);\n            // –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç\n            const deleteProjectStmt = this.db.prepare('DELETE FROM projects WHERE id = ?');\n            const result = deleteProjectStmt.run(id);\n            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n            this.db.exec('COMMIT');\n            return result.changes > 0;\n        } catch (error) {\n            // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏\n            this.db.exec('ROLLBACK');\n            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);\n            throw error;\n        }\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –î–û–°–ö–ê–ú–ò\n    // =====================================================\n    async createBoard(boardData) {\n        try {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const now = new Date().toISOString();\n            const { name, description, project_id, created_by } = boardData;\n            const stmt = this.db.prepare(`\n        INSERT INTO boards (id, name, description, project_id, created_by, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n      `);\n            stmt.run(id, name, description, project_id, created_by, now, now);\n            return {\n                id,\n                name: name || '',\n                description: description || '',\n                project_id: project_id || '',\n                created_by: created_by || '',\n                created_at: now,\n                updated_at: now\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', error);\n            throw new Error(`Failed to create board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getBoardById(id) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM boards WHERE id = ?');\n            const row = stmt.get(id);\n            if (!row) return null;\n            return {\n                id: row.id,\n                name: row.name,\n                description: row.description,\n                project_id: row.project_id,\n                created_by: row.created_by,\n                created_at: row.created_at,\n                updated_at: row.updated_at\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏ –ø–æ ID:', error);\n            throw new Error(`Failed to get board by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getProjectBoards(projectId) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM boards WHERE project_id = ? ORDER BY created_at DESC');\n            const dbBoards = stmt.all(projectId);\n            return dbBoards.map((row)=>({\n                    id: row.id,\n                    name: row.name,\n                    description: row.description,\n                    project_id: row.project_id,\n                    created_by: row.created_by,\n                    created_at: row.created_at,\n                    updated_at: row.updated_at\n                }));\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', error);\n            throw new Error(`Failed to get project boards: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async deleteBoard(id) {\n        try {\n            const deleteBoard = this.db.transaction(()=>{\n                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏\n                const deleteTasksStmt = this.db.prepare(`\n          DELETE FROM tasks \n          WHERE column_id IN (\n            SELECT id FROM columns WHERE board_id = ?\n          )\n        `);\n                deleteTasksStmt.run(id);\n                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏\n                const deleteColumnsStmt = this.db.prepare('DELETE FROM columns WHERE board_id = ?');\n                deleteColumnsStmt.run(id);\n                // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –¥–æ—Å–∫—É\n                const deleteBoardStmt = this.db.prepare('DELETE FROM boards WHERE id = ?');\n                const result = deleteBoardStmt.run(id);\n                return result.changes > 0;\n            });\n            return deleteBoard();\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);\n            throw new Error(`Failed to delete board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–õ–û–ù–ö–ê–ú–ò\n    // =====================================================\n    async createColumn(column) {\n        try {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const now = new Date().toISOString();\n            const stmt = this.db.prepare(`\n        INSERT INTO columns (id, name, board_id, position, color, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n      `);\n            stmt.run(id, column.name, column.board_id, column.position, column.color, now, now);\n            return {\n                id,\n                name: column.name,\n                board_id: column.board_id,\n                position: column.position,\n                color: column.color,\n                created_at: now,\n                updated_at: now\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error);\n            throw new Error(`Failed to create column: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getBoardColumns(boardId) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM columns WHERE board_id = ? ORDER BY position');\n            const rows = stmt.all(boardId);\n            return rows.map((row)=>({\n                    id: row.id,\n                    name: row.name,\n                    board_id: row.board_id,\n                    position: row.position,\n                    color: row.color,\n                    created_at: row.created_at,\n                    updated_at: row.updated_at\n                }));\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏:', error);\n            throw new Error(`Failed to get board columns: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò\n    // =====================================================\n    async createTask(taskData) {\n        try {\n            const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n            const now = new Date().toISOString();\n            const { title, description, status = 'todo', priority = 'medium', column_id, due_date, estimated_hours, position = 0 } = taskData;\n            const stmt = this.db.prepare(`\n        INSERT INTO tasks (id, title, description, status, priority, column_id, due_date, estimated_hours, position, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `);\n            stmt.run(id, title, description, status, priority, column_id, due_date, estimated_hours, position, now, now);\n            return {\n                id,\n                title: title || '',\n                description: description || '',\n                status,\n                priority,\n                column_id,\n                due_date,\n                estimated_hours,\n                position,\n                created_at: now,\n                updated_at: now\n            };\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);\n            throw new Error(`Failed to create task: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getTaskById(id) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM tasks WHERE id = ?');\n            const task = stmt.get(id);\n            return task || null;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID:', error);\n            throw new Error(`Failed to get task by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async getColumnTasks(columnId) {\n        try {\n            const stmt = this.db.prepare('SELECT * FROM tasks WHERE column_id = ? ORDER BY position ASC, created_at DESC');\n            return stmt.all(columnId);\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–æ–ª–æ–Ω–∫–∏:', error);\n            throw new Error(`Failed to get column tasks: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async deleteTask(id) {\n        try {\n            const stmt = this.db.prepare('DELETE FROM tasks WHERE id = ?');\n            const result = stmt.run(id);\n            return result.changes > 0;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);\n            throw new Error(`Failed to delete task: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ü–†–û–ï–ö–¢–ê–ú\n    // =====================================================\n    async hasProjectAccess(userId, projectId) {\n        try {\n            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞\n            const ownerStmt = this.db.prepare('SELECT id FROM projects WHERE id = ? AND creator_id = ?');\n            const isOwner = ownerStmt.get(projectId, userId);\n            if (isOwner) {\n                console.log('üîç SQLite: User is project owner');\n                return true;\n            }\n            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∞\n            const memberStmt = this.db.prepare('SELECT id FROM project_members WHERE project_id = ? AND user_id = ?');\n            const isMember = memberStmt.get(projectId, userId);\n            console.log('üîç SQLite: Project access check:', {\n                userId,\n                projectId,\n                isOwner: !!isOwner,\n                isMember: !!isMember\n            });\n            return !!isMember;\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É:', error);\n            throw new Error(`Failed to check project access: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø\n    // =====================================================\n    async updateTask(id, updates) {\n        try {\n            const fields = Object.keys(updates).filter((key)=>key !== 'id' && key !== 'created_at');\n            if (fields.length === 0) return null;\n            const setClause = fields.map((field)=>`${field} = ?`).join(', ');\n            const values = fields.map((field)=>updates[field]);\n            values.push(new Date().toISOString()); // updated_at\n            values.push(id);\n            const stmt = this.db.prepare(`\n        UPDATE tasks SET ${setClause}, updated_at = ? WHERE id = ?\n      `);\n            const result = stmt.run(...values);\n            if (result.changes === 0) return null;\n            return this.getTaskById(id);\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);\n            throw new Error(`Failed to update task: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async updateBoard(id, updates) {\n        try {\n            const fields = Object.keys(updates).filter((key)=>key !== 'id' && key !== 'created_at');\n            if (fields.length === 0) return null;\n            const setClause = fields.map((field)=>`${field} = ?`).join(', ');\n            const values = fields.map((field)=>updates[field]);\n            values.push(new Date().toISOString()); // updated_at\n            values.push(id);\n            const stmt = this.db.prepare(`\n        UPDATE boards SET ${setClause}, updated_at = ? WHERE id = ?\n      `);\n            const result = stmt.run(...values);\n            if (result.changes === 0) return null;\n            return this.getBoardById(id);\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);\n            throw new Error(`Failed to update board: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    async updateProject(id, updates) {\n        try {\n            const fields = Object.keys(updates).filter((key)=>key !== 'id' && key !== 'created_at');\n            if (fields.length === 0) return null;\n            const setClause = fields.map((field)=>`${field} = ?`).join(', ');\n            const values = fields.map((field)=>updates[field]);\n            values.push(new Date().toISOString()); // updated_at\n            values.push(id);\n            const stmt = this.db.prepare(`\n        UPDATE projects SET ${setClause}, updated_at = ? WHERE id = ?\n      `);\n            const result = stmt.run(...values);\n            if (result.changes === 0) return null;\n            return this.getProjectById(id);\n        } catch (error) {\n            console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);\n            throw new Error(`Failed to update project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n    }\n    // =====================================================\n    // –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–õ–¨–ù–´–• SQL –ó–ê–ü–†–û–°–û–í\n    // =====================================================\n    async query(sql, params) {\n        if (!this.db) throw new Error('Database not initialized');\n        try {\n            const stmt = this.db.prepare(sql);\n            const trimmedSql = sql.trim().toUpperCase();\n            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø SQL –∫–æ–º–∞–Ω–¥—ã\n            const isSelectQuery = trimmedSql.startsWith('SELECT') || trimmedSql.startsWith('WITH');\n            if (isSelectQuery) {\n                // –î–ª—è SELECT –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º all()\n                let rows;\n                if (params && params.length > 0) {\n                    rows = stmt.all(...params);\n                } else {\n                    rows = stmt.all();\n                }\n                return {\n                    rows\n                };\n            } else {\n                // –î–ª—è INSERT, UPDATE, DELETE, BEGIN, COMMIT, ROLLBACK –∏—Å–ø–æ–ª—å–∑—É–µ–º run()\n                let result;\n                if (params && params.length > 0) {\n                    result = stmt.run(...params);\n                } else {\n                    result = stmt.run();\n                }\n                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n                return {\n                    rows: []\n                };\n            }\n        } catch (error) {\n            console.error('‚ùå SQLite query error:', error);\n            throw error;\n        }\n    }\n    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n    close() {\n        if (this.db) {\n            this.db.close();\n        }\n    }\n}\n// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞\nconst sqliteAdapter = SQLiteAdapter.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/sqlite-adapter.ts\n");

/***/ })

};
;