{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/lib/postgresql-adapter.ts"],"sourcesContent":["import { Pool, PoolClient } from 'pg';\nimport bcrypt from 'bcryptjs';\nimport { User, Project, Board, Column, Task, Comment, Attachment, Tag, Session } from '../types';\n\n// Интерфейс для конфигурации базы данных\ninterface DatabaseConfig {\n  host: string;\n  port: number;\n  database: string;\n  user: string;\n  password: string;\n  ssl?: boolean;\n}\n\n// Класс для работы с PostgreSQL\nexport class PostgreSQLAdapter {\n  private static instance: PostgreSQLAdapter | null = null;\n  private pool: Pool;\n  private isInitialized = false;\n\n  constructor(config: DatabaseConfig) {\n    this.pool = new Pool({\n      host: config.host,\n      port: config.port,\n      database: config.database,\n      user: config.user,\n      password: config.password,\n      ssl: config.ssl ? { rejectUnauthorized: false } : false,\n      max: 20, // максимальное количество соединений в пуле\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n  }\n\n  // Инициализация базы данных\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      const client = await this.pool.connect();\n      \n      // Проверяем подключение\n      await client.query('SELECT NOW()');\n      \n      console.log('✅ PostgreSQL подключение установлено');\n      client.release();\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('❌ Ошибка подключения к PostgreSQL:', error);\n      throw error;\n    }\n  }\n\n  // Закрытие пула соединений\n  async close(): Promise<void> {\n    await this.pool.end();\n    this.isInitialized = false;\n  }\n\n  // Получение клиента для транзакций\n  async getClient(): Promise<PoolClient> {\n    return await this.pool.connect();\n  }\n\n  // Выполнение запроса\n  async query(text: string, params?: any[]): Promise<any> {\n    const client = await this.pool.connect();\n    try {\n      console.log('SQL Query:', text);\n      console.log('SQL Params:', params);\n      const result = await client.query(text, params);\n      return result;\n    } finally {\n      client.release();\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ===\n\n  async createUser(email: string, password: string, name: string, role: string = 'user'): Promise<User> {\n    const hashedPassword = await bcrypt.hash(password, 12);\n    const result = await this.query(\n      `INSERT INTO users (email, password_hash, name, role, approval_status) \n       VALUES ($1, $2, $3, $4, $5) \n       RETURNING *`,\n      [email, hashedPassword, name, role, 'pending']\n    );\n    return result.rows[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const result = await this.query(\n      'SELECT * FROM users WHERE email = $1',\n      [email]\n    );\n    const row = result.rows[0];\n    if (!row) return null;\n    \n    // Маппинг полей базы данных в User интерфейс\n    return {\n      id: row.id,\n      userId: row.id, // Добавляем userId для совместимости\n      name: row.name,\n      email: row.email,\n      role: row.role,\n      status: row.is_active ? 'active' : 'inactive',\n      approval_status: row.approval_status,\n      avatar: row.avatar,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      lastLoginAt: row.last_login_at,\n      is_active: row.is_active,\n      created_at: row.created_at,\n      updated_at: row.updated_at,\n      last_login_at: row.last_login_at,\n      password_hash: row.password_hash // Добавляем password_hash для аутентификации\n    };\n  }\n\n  async getUserById(id: string): Promise<User | null> {\n    const result = await this.query(\n      'SELECT * FROM users WHERE id = $1',\n      [id]\n    );\n    const row = result.rows[0];\n    if (!row) return null;\n    \n    // Маппинг полей базы данных в User интерфейс\n    return {\n      id: row.id,\n      userId: row.id, // Добавляем userId для совместимости\n      name: row.name,\n      email: row.email,\n      role: row.role,\n      status: row.is_active ? 'active' : 'inactive',\n      approval_status: row.approval_status,\n      avatar: row.avatar,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      lastLoginAt: row.last_login_at,\n      is_active: row.is_active,\n      created_at: row.created_at,\n      updated_at: row.updated_at,\n      last_login_at: row.last_login_at\n    };\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof User]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getUserById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE users SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const result = await this.query(\n      'SELECT * FROM users ORDER BY created_at DESC'\n    );\n    return result.rows;\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    const result = await this.query(\n      'DELETE FROM users WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ПРОЕКТОВ ===\n\n  async createProject(name: string, description: string, ownerId: string, color?: string): Promise<Project> {\n    const result = await this.query(\n      `INSERT INTO projects (name, description, creator_id, color)\n     VALUES ($1, $2, $3, $4) RETURNING *`,\n      [name, description, ownerId, color || '#3B82F6']\n    );\n    return result.rows[0];\n  }\n\n  async getProjectById(id: string): Promise<Project | null> {\n    const result = await this.query(\n      'SELECT * FROM projects WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getProjectsByUserId(userId: string): Promise<Project[]> {\n    const result = await this.query(\n      `SELECT DISTINCT p.* FROM projects p \n       LEFT JOIN project_members pm ON p.id = pm.project_id \n       WHERE (p.creator_id = $1 OR pm.user_id = $1) AND p.deleted_at IS NULL \n       ORDER BY p.created_at DESC`,\n      [userId]\n    );\n    return result.rows;\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    const result = await this.query(\n      'SELECT * FROM projects WHERE deleted_at IS NULL ORDER BY created_at DESC'\n    );\n    return result.rows;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Project]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getProjectById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE projects SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE projects SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  async hasProjectAccess(userId: string, projectId: string): Promise<boolean> {\n    try {\n      // Проверяем, является ли пользователь владельцем проекта\n      const ownerResult = await this.query(\n        'SELECT creator_id FROM projects WHERE id = $1 AND deleted_at IS NULL',\n        [projectId]\n      );\n      \n      if (ownerResult.rows.length === 0) {\n        return false; // Проект не найден\n      }\n      \n      const projectOwner = ownerResult.rows[0].creator_id;\n      if (projectOwner === userId) {\n        return true; // Пользователь является владельцем\n      }\n      \n      // Проверяем членство в проекте\n      const memberResult = await this.query(\n        'SELECT 1 FROM project_members WHERE project_id = $1 AND user_id = $2',\n        [projectId, userId]\n      );\n      \n      return memberResult.rows.length > 0;\n    } catch (error) {\n      console.error('Error checking project access:', error);\n      return false;\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ДОСОК ===\n\n  async createBoard(name: string, description: string, projectId: string): Promise<Board> {\n    const result = await this.query(\n      `INSERT INTO boards (name, project_id) \n       VALUES ($1, $2) \n       RETURNING *`,\n      [name, projectId]\n    );\n    return result.rows[0];\n  }\n\n  async getBoardById(id: string): Promise<Board | null> {\n    const result = await this.query(\n      'SELECT * FROM boards WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getBoardsByProjectId(projectId: string): Promise<Board[]> {\n    const result = await this.query(\n      'SELECT * FROM boards WHERE project_id = $1 AND deleted_at IS NULL ORDER BY position ASC, created_at DESC',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async updateBoard(id: string, updates: Partial<Board>): Promise<Board | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Board]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getBoardById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE boards SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteBoard(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE boards SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ КОЛОНОК ===\n\n  async createColumn(name: string, boardId: string, position?: number, color?: string): Promise<Column> {\n\n    const result = await this.query(\n      `INSERT INTO columns (title, board_id, position, color) \n       VALUES ($1, $2, $3, $4) \n       RETURNING *`,\n      [name, boardId, position || 0, color || '#6B7280']\n    );\n    return result.rows[0];\n  }\n\n  async getColumnById(id: string): Promise<Column | null> {\n    const result = await this.query(\n      'SELECT * FROM columns WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getColumnsByBoardId(boardId: string): Promise<Column[]> {\n    const result = await this.query(\n      'SELECT * FROM columns WHERE board_id = $1 AND deleted_at IS NULL ORDER BY position ASC, created_at DESC',\n      [boardId]\n    );\n    return result.rows;\n  }\n\n  async updateColumn(id: string, updates: Partial<Column>): Promise<Column | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Column]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getColumnById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE columns SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteColumn(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE columns SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ЗАДАЧ ===\n\n  async createTask(taskData: Partial<Task>): Promise<Task> {\n    const {\n      title,\n      description,\n      status = 'todo',\n      priority = 'medium',\n      project_id,\n      board_id,\n      column_id,\n      assignee_id,\n      reporter_id,\n      position = 0\n    } = taskData;\n\n    const result = await this.query(\n      `INSERT INTO tasks (title, description, status, priority, project_id, board_id, column_id, assignee_id, reporter_id, position) \n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) \n       RETURNING *`,\n      [title, description, status, priority, project_id, board_id, column_id, assignee_id, reporter_id, position]\n    );\n    return result.rows[0];\n  }\n\n  async getTaskById(id: string): Promise<Task | null> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE id = $1 AND deleted_at IS NULL',\n      [id]\n    );\n    return result.rows[0] || null;\n  }\n\n  async getTasksByProjectId(projectId: string): Promise<Task[]> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE project_id = $1 AND deleted_at IS NULL ORDER BY position ASC, created_at DESC',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async getTasksByColumnId(columnId: string): Promise<Task[]> {\n    const result = await this.query(\n      'SELECT * FROM tasks WHERE column_id = $1 AND deleted_at IS NULL ORDER BY position ASC, created_at DESC',\n      [columnId]\n    );\n    return result.rows;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task | null> {\n    const fields = Object.keys(updates).filter(key => key !== 'id');\n    const values = fields.map(field => updates[field as keyof Task]);\n    const setClause = fields.map((field, index) => `${field} = $${index + 2}`).join(', ');\n    \n    if (fields.length === 0) {\n      return await this.getTaskById(id);\n    }\n\n    const result = await this.query(\n      `UPDATE tasks SET ${setClause} WHERE id = $1 RETURNING *`,\n      [id, ...values]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE tasks SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ СЕССИЙ ===\n\n  async createSession(sessionToken: string, userId: string, expiresAt: Date): Promise<Session> {\n    \n    const result = await this.query(\n      `INSERT INTO user_sessions (session_token, user_id, expires_at)\n     VALUES ($1, $2, $3)\n     RETURNING *`,\n      [sessionToken, userId, expiresAt]\n    );\n    \n    const row = result.rows[0];\n    return {\n      id: row.id,\n      userId: row.user_id,\n      token: row.session_token,\n      expiresAt: new Date(row.expires_at),\n      isActive: true,\n      userAgent: row.user_agent,\n      ipAddress: row.ip_address,\n      lastActivityAt: new Date(row.last_activity_at || row.created_at),\n      createdAt: new Date(row.created_at),\n      updatedAt: new Date(row.updated_at || row.created_at)\n    };\n  }\n\n  async getSessionByToken(sessionToken: string): Promise<Session | null> {\n    const result = await this.query(\n      'SELECT * FROM user_sessions WHERE session_token = $1 AND expires_at > NOW()',\n      [sessionToken]\n    );\n    \n    if (!result.rows[0]) return null;\n    \n    const row = result.rows[0];\n    return {\n      id: row.id,\n      userId: row.user_id,\n      token: row.session_token,\n      expiresAt: new Date(row.expires_at),\n      isActive: true,\n      userAgent: row.user_agent,\n      ipAddress: row.ip_address,\n      lastActivityAt: new Date(row.last_activity_at || row.created_at),\n      createdAt: new Date(row.created_at),\n      updatedAt: new Date(row.updated_at || row.created_at)\n    };\n  }\n\n  async deleteSession(sessionToken: string): Promise<boolean> {\n    const result = await this.query(\n      'DELETE FROM user_sessions WHERE session_token = $1',\n      [sessionToken]\n    );\n    return result.rowCount > 0;\n  }\n\n  async deleteExpiredSessions(): Promise<number> {\n    const result = await this.query(\n      'DELETE FROM user_sessions WHERE expires_at <= NOW()'\n    );\n    return result.rowCount;\n  }\n\n  // === МЕТОДЫ ДЛЯ КОММЕНТАРИЕВ ===\n\n  async createComment(content: string, taskId: string, authorId: string): Promise<Comment> {\n    const result = await this.query(\n      `INSERT INTO comments (content, task_id, author_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`,\n      [content, taskId, authorId]\n    );\n    return result.rows[0];\n  }\n\n  async getCommentsByTaskId(taskId: string): Promise<Comment[]> {\n    const result = await this.query(\n      'SELECT * FROM comments WHERE task_id = $1 AND deleted_at IS NULL ORDER BY created_at',\n      [taskId]\n    );\n    return result.rows;\n  }\n\n  async updateComment(id: string, content: string): Promise<Comment | null> {\n    const result = await this.query(\n      'UPDATE comments SET content = $2 WHERE id = $1 RETURNING *',\n      [id, content]\n    );\n    return result.rows[0] || null;\n  }\n\n  async deleteComment(id: string): Promise<boolean> {\n    const result = await this.query(\n      'UPDATE comments SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1',\n      [id]\n    );\n    return result.rowCount > 0;\n  }\n\n  // === МЕТОДЫ ДЛЯ ТЕГОВ ===\n\n  async createTag(name: string, color: string, projectId?: string): Promise<Tag> {\n    const result = await this.query(\n      `INSERT INTO tags (name, color, project_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`,\n      [name, color, projectId]\n    );\n    return result.rows[0];\n  }\n\n  async getTagsByProjectId(projectId: string): Promise<Tag[]> {\n    const result = await this.query(\n      'SELECT * FROM tags WHERE project_id = $1 ORDER BY name',\n      [projectId]\n    );\n    return result.rows;\n  }\n\n  async addTagToTask(taskId: string, tagId: string): Promise<boolean> {\n    try {\n      await this.query(\n        'INSERT INTO task_tags (task_id, tag_id) VALUES ($1, $2)',\n        [taskId, tagId]\n      );\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async removeTagFromTask(taskId: string, tagId: string): Promise<boolean> {\n    const result = await this.query(\n      'DELETE FROM task_tags WHERE task_id = $1 AND tag_id = $2',\n      [taskId, tagId]\n    );\n    return result.rowCount > 0;\n  }\n\n  async getTagsByTaskId(taskId: string): Promise<Tag[]> {\n    const result = await this.query(\n      `SELECT t.* FROM tags t \n       JOIN task_tags tt ON t.id = tt.tag_id \n       WHERE tt.task_id = $1`,\n      [taskId]\n    );\n    return result.rows;\n  }\n\n  // Статический метод для получения экземпляра (Singleton)\n  static getInstance(): PostgreSQLAdapter {\n    if (!PostgreSQLAdapter.instance) {\n      const config: DatabaseConfig = {\n        host: process.env.DB_HOST || 'localhost',\n        port: parseInt(process.env.DB_PORT || '5432'),\n        database: process.env.DB_NAME || 'encore_tasks',\n        user: process.env.DB_USER || 'postgres',\n        password: process.env.DB_PASSWORD || 'password',\n        ssl: process.env.DB_SSL === 'true'\n      };\n      \n      PostgreSQLAdapter.instance = new PostgreSQLAdapter(config);\n    }\n    \n    return PostgreSQLAdapter.instance;\n  }\n}\n\n// Экспорт экземпляра адаптера\nlet dbAdapter: PostgreSQLAdapter | null = null;\n\nexport function getPostgreSQLAdapter(): PostgreSQLAdapter {\n  if (!dbAdapter) {\n    const config: DatabaseConfig = {\n      host: process.env.DB_HOST || 'localhost',\n      port: parseInt(process.env.DB_PORT || '5432'),\n      database: process.env.DB_NAME || 'encore_tasks',\n      user: process.env.DB_USER || 'postgres',\n      password: process.env.DB_PASSWORD || 'password',\n      ssl: process.env.DB_SSL === 'true'\n    };\n    \n    dbAdapter = new PostgreSQLAdapter(config);\n  }\n  \n  return dbAdapter;\n}\n\nexport default getPostgreSQLAdapter;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/lib/database-adapter.ts"],"sourcesContent":["// =====================================================\n// АДАПТЕР ДЛЯ РАБОТЫ С БАЗАМИ ДАННЫХ (ИСПРАВЛЕННЫЙ)\n// =====================================================\n\nimport { User, Project, Board, Column, Task, Session } from '@/types';\nimport { PostgreSQLAdapter } from './postgresql-adapter';\n\n// =====================================================\n// ТИПЫ ДАННЫХ\n// =====================================================\n\nexport type DatabaseType = 'postgresql';\n\nexport interface DatabaseStatus {\n  postgresql: boolean;\n  current: DatabaseType;\n}\n\n// =====================================================\n// КЛАСС АДАПТЕРА БАЗЫ ДАННЫХ\n// =====================================================\n\nexport class DatabaseAdapter {\n  private static instance: DatabaseAdapter;\n  private currentDatabase: DatabaseType = 'postgresql';\n  private isInitialized = false;\n  private postgresqlAdapter: PostgreSQLAdapter;\n  private initializationPromise: Promise<void> | null = null;\n\n  private constructor() {\n    this.postgresqlAdapter = PostgreSQLAdapter.getInstance();\n    this.currentDatabase = 'postgresql';\n  }\n\n  public static getInstance(): DatabaseAdapter {\n    if (!DatabaseAdapter.instance) {\n      DatabaseAdapter.instance = new DatabaseAdapter();\n    }\n    return DatabaseAdapter.instance;\n  }\n\n  /**\n   * Инициализация адаптера\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    this.initializationPromise = this.performInitialization();\n    return this.initializationPromise;\n  }\n\n  private async performInitialization(): Promise<void> {\n    try {\n      await this.postgresqlAdapter.initialize();\n      this.isInitialized = true;\n      console.log('✅ Database Adapter инициализирован с PostgreSQL');\n    } catch (error) {\n      console.error('❌ Ошибка инициализации Database Adapter:', error);\n      this.initializationPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка инициализации перед выполнением операций\n   */\n  private async ensureInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  /**\n   * Получение статуса базы данных\n   */\n  public async getDatabaseStatus(): Promise<DatabaseStatus> {\n    const postgresql = await Promise.resolve(this.postgresqlAdapter.initialize()).then(() => true).catch(() => false);\n    \n    return {\n      postgresql,\n      current: this.currentDatabase\n    };\n  }\n\n  /**\n   * Получение текущей базы данных\n   */\n  public getCurrentDatabase(): DatabaseType {\n    return this.currentDatabase;\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ПОЛЬЗОВАТЕЛЯМИ\n  // =====================================================\n\n  /**\n   * Создание пользователя\n   */\n  public async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.createUser(userData.email, userData.password, userData.name, userData.role || 'user');\n  }\n\n  /**\n   * Получение пользователя по ID\n   */\n  public async getUserById(id: string): Promise<User | null> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getUserById(id);\n  }\n\n  /**\n   * Получение пользователя по email\n   */\n  public async getUserByEmail(email: string): Promise<User | null> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getUserByEmail(email);\n  }\n\n  /**\n   * Получение всех пользователей\n   */\n  public async getAllUsers(): Promise<User[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getAllUsers();\n  }\n\n  /**\n   * Обновление пользователя\n   */\n  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.updateUser(id, updates);\n  }\n\n  /**\n   * Удаление пользователя\n   */\n  public async deleteUser(id: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.deleteUser(id);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С СЕССИЯМИ (ИСПРАВЛЕНО)\n  // =====================================================\n\n  /**\n   * Создание сессии\n   */\n  public async createSession(sessionData: Omit<Session, 'id' | 'created_at'>): Promise<Session> {\n    await this.ensureInitialized();\n    console.log('🔐 DatabaseAdapter: Создание сессии через PostgreSQL адаптер');\n    console.log('🔐 SessionData:', {\n      token: sessionData.token ? 'present' : 'missing',\n      userId: sessionData.userId,\n      expiresAt: sessionData.expiresAt\n    });\n    return await this.postgresqlAdapter.createSession(sessionData.token, sessionData.userId, sessionData.expiresAt);\n  }\n\n  /**\n   * Получение сессии по токену\n   */\n  public async getSessionByToken(token: string): Promise<Session | null> {\n    await this.ensureInitialized();\n    console.log('🔍 DatabaseAdapter: Поиск сессии по токену через PostgreSQL адаптер');\n    const session = await this.postgresqlAdapter.getSessionByToken(token);\n    console.log('📊 DatabaseAdapter: Результат поиска сессии:', session ? 'найдена' : 'не найдена');\n    return session;\n  }\n\n  /**\n   * Обновление активности сессии\n   */\n  public async updateSessionActivity(token: string): Promise<boolean> {\n    await this.ensureInitialized();\n    // Для PostgreSQL можно реализовать обновление времени последней активности\n    return true;\n  }\n\n  /**\n   * Удаление сессии\n   */\n  public async deleteSession(token: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.deleteSession(token);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ПРОЕКТАМИ\n  // =====================================================\n\n  /**\n   * Создание проекта\n   */\n  public async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {\n    await this.ensureInitialized();\n    const { name, description, createdBy, color } = projectData;\n    return await this.postgresqlAdapter.createProject(name, description || '', createdBy, color);\n  }\n\n  /**\n   * Получение проекта по ID\n   */\n  public async getProjectById(id: string): Promise<Project | null> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getProjectById(id);\n  }\n\n  /**\n   * Получение всех проектов\n   */\n  public async getAllProjects(): Promise<Project[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getAllProjects();\n  }\n\n  /**\n   * Получение проектов пользователя\n   */\n  public async getUserProjects(userId: string): Promise<Project[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getUserProjects(userId);\n  }\n\n  /**\n   * Получение проектов по ID создателя\n   */\n  public async getProjectsByCreatorId(creatorId: string): Promise<Project[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getUserProjects(creatorId);\n  }\n\n  /**\n   * Проверка доступа к проекту\n   */\n  public async hasProjectAccess(userId: string | number, projectId: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ДОСКАМИ\n  // =====================================================\n\n  /**\n   * Создание доски\n   */\n  public async createBoard(boardData: Omit<Board, 'id' | 'created_at' | 'updated_at'>): Promise<Board> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.createBoard(boardData.name, boardData.description || '', boardData.projectId);\n  }\n\n  /**\n   * Получение доски по ID\n   */\n  public async getBoardById(id: string): Promise<Board | null> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getBoardById(id);\n  }\n\n  /**\n   * Получение досок проекта\n   */\n  public async getProjectBoards(projectId: string): Promise<Board[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getProjectBoards(projectId);\n  }\n\n  /**\n   * Удаление доски\n   */\n  public async deleteBoard(id: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.deleteBoard(id);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С КОЛОНКАМИ\n  // =====================================================\n\n  /**\n   * Получение колонок доски\n   */\n  public async getBoardColumns(boardId: string): Promise<Column[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getBoardColumns(boardId);\n  }\n\n  /**\n   * Создание колонки\n   */\n  public async createColumn(columnData: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.createColumn(columnData.name, columnData.boardId, columnData.position || 0);\n  }\n\n  // =====================================================\n  // ОПЕРАЦИИ С ЗАДАЧАМИ\n  // =====================================================\n\n  /**\n   * Создание задачи\n   */\n  public async createTask(taskData: Omit<Task, 'id' | 'created_at' | 'updated_at'>): Promise<Task> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.createTask(\n      taskData.title,\n      taskData.description || '',\n      taskData.columnId,\n      taskData.assignedTo,\n      taskData.priority || 'medium',\n      taskData.position || 0\n    );\n  }\n\n  /**\n   * Получение задач колонки\n   */\n  public async getColumnTasks(columnId: string): Promise<Task[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.getColumnTasks(columnId);\n  }\n\n  /**\n   * Удаление задачи\n   */\n  public async deleteTask(id: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.deleteTask(id);\n  }\n\n  /**\n   * Выполнение сырого SQL запроса (для совместимости с репозиториями)\n   */\n  public async query(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.ensureInitialized();\n    return await this.postgresqlAdapter.query(sql, params);\n  }\n}\n\n// Экспорт единственного экземпляра\nexport const dbAdapter = DatabaseAdapter.getInstance();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/lib/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport jwt from 'jsonwebtoken';\nimport { DatabaseAdapter } from './database-adapter';\nconst databaseAdapter = DatabaseAdapter.getInstance();\n\ninterface AuthResult {\n  success: boolean;\n  user?: {\n    userId: string;\n    email: string;\n    role: string;\n    name: string;\n  };\n  error?: string;\n}\n\nexport async function verifyAuth(request: NextRequest): Promise<AuthResult> {\n  try {\n    // Получение токена из cookie или заголовка Authorization\n    const token = request.cookies.get('auth-token')?.value || \n                  request.headers.get('authorization')?.replace('Bearer ', '');\n\n    console.log('Auth token found:', !!token);\n    if (!token) {\n      console.log('No auth token found in cookies or headers');\n      return {\n        success: false,\n        error: 'Токен аутентификации не найден'\n      };\n    }\n\n    // Проверка JWT токена\n    let decoded: any;\n    try {\n      decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');\n      console.log('JWT verified successfully for user:', decoded.userId);\n    } catch (jwtError) {\n      console.log('JWT verification failed:', jwtError);\n      return {\n        success: false,\n        error: 'Невалидный токен'\n      };\n    }\n\n    // Используем оптимизированный адаптер для работы с сессиями\n    await databaseAdapter.initialize();\n\n    try {\n        // Ищем сессию через адаптер\n         const session = await databaseAdapter.getSessionByToken(token);\n         console.log('Session found:', !!session);\n         console.log('Session object:', session);\n         console.log('Session userId:', session?.userId);\n\n         if (!session) {\n           console.log('Session not found or expired for token');\n           return { success: false, error: 'Сессия не найдена или истекла' };\n         }\n\n       // Получаем пользователя через адаптер\n       const user = await databaseAdapter.getUserById(session.userId);\n\n      if (!user) {\n        return { success: false, error: 'Пользователь не найден' };\n      }\n\n      // Проверяем статус одобрения пользователя\n      console.log('User data:', user);\n      console.log('User isApproved:', user.isApproved, 'type:', typeof user.isApproved);\n      console.log('User role:', user.role);\n      \n      // Используем approval_status для PostgreSQL\n      const isApproved = user.isApproved !== undefined ? Boolean(user.isApproved) : true;\n      console.log('Final isApproved:', isApproved);\n      \n      if (!isApproved && user.role !== 'admin') {\n        console.log('User not approved and not admin');\n        return {\n          success: false,\n          error: 'Пользователь не одобрен'\n        };\n      }\n\n      return {\n        success: true,\n        user: {\n          userId: String(user.id),\n          email: user.email,\n          role: user.role,\n          name: user.name\n        }\n      };\n    } catch (error) {\n      console.error('Auth error:', error);\n      return { success: false, error: 'Ошибка аутентификации' };\n    }\n\n  } catch (error) {\n    console.error('Ошибка проверки аутентификации:', error);\n    return {\n      success: false,\n      error: 'Внутренняя ошибка сервера'\n    };\n  }\n}\n\n// Проверка прав доступа к проекту\nexport async function verifyProjectAccess(\n  userId: string, \n  projectId: string, \n  requiredRole?: 'owner' | 'admin' | 'member'\n): Promise<{ hasAccess: boolean; userRole?: string }> {\n  try {\n    await databaseAdapter.initialize();\n\n    // Получаем проекты через адаптер\n     const projects = await databaseAdapter.getAllProjects();\n     const project = projects.find(p => p.id === projectId);\n\n     if (!project) {\n       return { hasAccess: false };\n     }\n\n     // Проверяем, является ли пользователь владельцем\n     if (project.createdBy === userId) {\n       return { hasAccess: true, userRole: 'owner' };\n     }\n\n     // Получаем участников проекта через getUserProjects\n     const userProjects = await databaseAdapter.getUserProjects(userId);\n     const hasAccess = userProjects.some((p: any) => p.id === projectId);\n\n    if (!hasAccess) {\n       return { hasAccess: false };\n     }\n\n     // Для упрощения, считаем что у пользователя есть доступ как участник\n     const userRole = 'member';\n\n     // Проверка требуемой роли\n    if (requiredRole) {\n      const roleHierarchy = { owner: 3, admin: 2, member: 1 };\n      const userRoleLevel = roleHierarchy[userRole as keyof typeof roleHierarchy] || 0;\n      const requiredRoleLevel = roleHierarchy[requiredRole];\n      \n      if (userRoleLevel < requiredRoleLevel) {\n        return { hasAccess: false, userRole };\n      }\n    }\n\n    return { hasAccess: true, userRole };\n\n  } catch (error) {\n    console.error('Ошибка проверки доступа к проекту:', error);\n    return { hasAccess: false };\n  }\n}\n\n// Middleware для проверки роли администратора\nexport async function requireAdmin(request: NextRequest) {\n  const authResult = await verifyAuth(request);\n  \n  if (!authResult.success) {\n    return { success: false, error: authResult.error };\n  }\n\n  if (authResult.user!.role !== 'admin') {\n    return { success: false, error: 'Требуются права администратора' };\n  }\n\n  return { success: true, user: authResult.user };\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1083, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/lib/database-adapter-optimized.ts"],"sourcesContent":["import { PostgreSQLAdapter } from './postgresql-adapter';\nimport { User, Project, Board, Column, Task, Session } from '@/types';\n\n/**\n * Оптимизированный адаптер базы данных\n * Исправляет проблемы:\n * - Устраняет повторную инициализацию при каждом запросе\n * - Использует Singleton паттерн для управления соединениями\n * - Добавляет правильную обработку ошибок\n * - Оптимизирует производительность\n */\nclass DatabaseAdapterOptimized {\n  private static instance: DatabaseAdapterOptimized;\n  private postgresqlAdapter: PostgreSQLAdapter;\n  private isInitialized = false;\n  private initializationPromise: Promise<void> | null = null;\n\n  private constructor() {\n    this.postgresqlAdapter = PostgreSQLAdapter.getInstance();\n  }\n\n  public static getInstance(): DatabaseAdapterOptimized {\n    if (!DatabaseAdapterOptimized.instance) {\n      DatabaseAdapterOptimized.instance = new DatabaseAdapterOptimized();\n    }\n    return DatabaseAdapterOptimized.instance;\n  }\n\n  /**\n   * Инициализация адаптера (вызывается только один раз)\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    if (this.initializationPromise) {\n      return this.initializationPromise;\n    }\n\n    this.initializationPromise = this.performInitialization();\n    return this.initializationPromise;\n  }\n\n  private async performInitialization(): Promise<void> {\n    try {\n      await this.postgresqlAdapter.initialize();\n      this.isInitialized = true;\n      console.log('✅ Database Adapter оптимизирован и готов к работе');\n    } catch (error) {\n      console.error('❌ Ошибка инициализации Database Adapter:', error);\n      this.initializationPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Проверка инициализации перед выполнением операций\n   */\n  private async ensureInitialized(): Promise<void> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n  }\n\n  // === МЕТОДЫ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ===\n  async createUser(email: string, password: string, name: string, role: string = 'user'): Promise<User> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createUser(email, password, name, role);\n  }\n\n  async getUserById(id: string | number): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserById(id.toString());\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserByEmail(email);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllUsers();\n  }\n\n  async getUsers(): Promise<User[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllUsers();\n  }\n\n  async updateUser(id: string | number, updates: Partial<User>): Promise<User | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.updateUser(id.toString(), updates);\n  }\n\n  async deleteUser(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteUser(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ СЕССИЙ ===\n  async createSession(sessionData: Omit<Session, 'id' | 'created_at' | 'last_activity_at'>): Promise<Session> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createSession(sessionData.token, sessionData.userId, sessionData.expiresAt);\n  }\n\n  async getSessionByToken(token: string): Promise<Session | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getSessionByToken(token);\n  }\n\n  async deleteSession(token: string): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteSession(token);\n  }\n\n  // === МЕТОДЫ ДЛЯ ПРОЕКТОВ ===\n  async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {\n    await this.ensureInitialized();\n    const { name, description, createdBy, color } = projectData;\n    return this.postgresqlAdapter.createProject(name, description || '', createdBy, color);\n  }\n\n  async getProjectById(id: string | number): Promise<Project | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectById(id.toString());\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getAllProjects();\n  }\n\n  async getUserProjects(userId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserProjects(userId.toString());\n  }\n\n  async getProjectsByUserId(userId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getUserProjects(userId.toString());\n  }\n\n  async getProjectsByCreatorId(creatorId: string | number): Promise<Project[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectsByCreatorId(creatorId.toString());\n  }\n\n  async hasProjectAccess(userId: string | number, projectId: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId.toString());\n  }\n\n  async updateProject(id: string | number, updateData: Partial<Project>): Promise<Project | null> {\n    await this.ensureInitialized();\n    const result = await this.postgresqlAdapter.updateProject(id.toString(), updateData);\n    return result;\n  }\n\n  async deleteProject(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteProject(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ ДОСОК ===\n  async createBoard(name: string, description: string, projectId: string): Promise<Board> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createBoard(name, description, projectId);\n  }\n\n  async getBoardById(id: string | number): Promise<Board | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getBoardById(id.toString());\n  }\n\n  async getProjectBoards(projectId: string | number): Promise<Board[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getProjectBoards(projectId.toString());\n  }\n\n  async deleteBoard(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteBoard(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ КОЛОНОК ===\n  async createColumn(name: string, boardId: string, position?: number, color?: string): Promise<Column> {\n    await this.ensureInitialized();\n\n    return this.postgresqlAdapter.createColumn(name, boardId, position, color);\n  }\n\n  async getColumnById(id: string | number): Promise<Column | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getColumnById(id.toString());\n  }\n\n  async getBoardColumns(boardId: string | number): Promise<Column[]> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getBoardColumns(boardId.toString());\n  }\n\n  async deleteColumn(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteColumn(id.toString());\n  }\n\n  // === МЕТОДЫ ДЛЯ ЗАДАЧ ===\n  async createTask(taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>): Promise<Task> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.createTask(taskData);\n  }\n\n  async getTaskById(id: string | number): Promise<Task | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.getTaskById(id.toString());\n  }\n\n  async getTasks(filters: { projectId?: string | number; boardId?: string | number; status?: string; assigneeId?: string | number; priority?: string; columnId?: string | number } = {}): Promise<Task[]> {\n    await this.ensureInitialized();\n    const postgresFilters = {\n      projectId: filters.projectId ? filters.projectId.toString() : undefined,\n      boardId: filters.boardId ? filters.boardId.toString() : undefined,\n      assigneeId: filters.assigneeId ? filters.assigneeId.toString() : undefined,\n      columnId: filters.columnId ? filters.columnId.toString() : undefined\n    };\n    return this.postgresqlAdapter.getTasks(postgresFilters);\n  }\n\n  async updateTask(id: string | number, updates: Partial<Task>): Promise<Task | null> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.updateTask(id.toString(), updates);\n  }\n\n  async deleteTask(id: string | number): Promise<boolean> {\n    await this.ensureInitialized();\n    return this.postgresqlAdapter.deleteTask(id.toString());\n  }\n\n  // === СЛУЖЕБНЫЕ МЕТОДЫ ===\n  \n  /**\n   * Проверка состояния адаптера\n   */\n  isReady(): boolean {\n    return this.isInitialized;\n  }\n\n  /**\n   * Получение статистики использования\n   */\n  async getStats(): Promise<{\n    isInitialized: boolean;\n    adapterType: string;\n    connectionStatus: string;\n  }> {\n    return {\n      isInitialized: this.isInitialized,\n      adapterType: 'PostgreSQL Optimized',\n      connectionStatus: this.isInitialized ? 'Connected' : 'Disconnected'\n    };\n  }\n\n  /**\n   * Очистка ресурсов\n   */\n  async cleanup(): Promise<void> {\n    if (this.isInitialized) {\n      await this.postgresqlAdapter.close();\n      this.isInitialized = false;\n      this.initializationPromise = null;\n      console.log('✅ Database Adapter очищен');\n    }\n  }\n\n  /**\n   * Полная переинициализация адаптера\n   */\n  async reinitialize(): Promise<void> {\n    await this.cleanup();\n    await this.initialize();\n  }\n\n  /**\n   * Выполнение сырого SQL запроса (для совместимости с PostgreSQL API)\n   */\n  async executeRawQuery(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.query(sql, params);\n  }\n\n  /**\n   * Выполнение SQL запроса (для совместимости с репозиториями)\n   */\n  async query(sql: string, params?: unknown[]): Promise<unknown[]> {\n    await this.initialize();\n    return await this.postgresqlAdapter.query(sql, params);\n  }\n\n\n}\n\n// Экспортируем singleton instance\nconst databaseAdapter = DatabaseAdapterOptimized.getInstance();\nexport default databaseAdapter;\n\n// Также экспортируем класс для тестирования\nexport { DatabaseAdapterOptimized };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1341, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/app/api/projects/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { verifyAuth } from '@/lib/auth';\nimport databaseAdapter from '@/lib/database-adapter-optimized';\n\n// Получение списка проектов\nexport async function GET(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { userId, role } = authResult.user!;\n\n    let projects;\n    if (role === 'admin') {\n      // Админы видят все проекты\n      projects = await databaseAdapter.getAllProjects();\n    } else {\n      // Обычные пользователи видят только свои проекты\n      projects = await databaseAdapter.getProjectsByUserId(Number(userId));\n    }\n\n    // Преобразование в формат API с правильной типизацией\n    const projectsResult = projects.map(project => ({\n      id: project.id, // Оставляем ID как строку для совместимости с API удаления\n      name: project.name,\n      description: project.description || null,\n      status: project.status || 'active',\n      color: project.color || '#3B82F6',\n      createdAt: project.createdAt,\n      updatedAt: project.updatedAt,\n      userId: Number(project.createdBy) // Используем createdBy из схемы БД\n    }));\n\n    return NextResponse.json({ projects: projectsResult });\n  } catch (error) {\n    console.error('Projects API error:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}\n\n// Создание нового проекта\nexport async function POST(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { userId } = authResult.user!;\n    const { name, description, color, icon } = await request.json();\n\n    if (!name) {\n      return NextResponse.json(\n        { error: 'Название проекта обязательно' },\n        { status: 400 }\n      );\n    }\n    \n    if (!userId) {\n      return NextResponse.json(\n        { error: 'Пользователь не авторизован' },\n        { status: 401 }\n      );\n    }\n\n    const projectData = {\n      name,\n      description: description || null,\n      createdBy: userId, // userId уже является UUID строкой\n      color: color || '#3B82F6'\n    };\n    const project = await databaseAdapter.createProject(projectData);\n    \n    // Проверяем, что проект был создан успешно\n    if (!project || !project.id) {\n      console.error('Failed to create project - no project ID returned');\n      return NextResponse.json(\n        { error: 'Ошибка создания проекта' },\n        { status: 500 }\n      );\n    }\n\n    // Создаем доску по умолчанию для нового проекта\n    const board = await databaseAdapter.createBoard(\n      `Доска проекта ${name}`,\n      '', // description не используется в схеме\n      project.id\n    );\n    \n    console.log('Created board:', board);\n    console.log('Board ID:', board.id, 'Type:', typeof board.id);\n\n    // Создаем колонки по умолчанию\n    const defaultColumns = [\n      { name: 'К выполнению', color: '#ef4444', position: 0 },\n      { name: 'В работе', color: '#f59e0b', position: 1 },\n      { name: 'На проверке', color: '#3b82f6', position: 2 },\n      { name: 'Выполнено', color: '#10b981', position: 3 }\n    ];\n\n    for (const column of defaultColumns) {\n      await databaseAdapter.createColumn(\n        column.name,\n        board.id,\n        column.position,\n        column.color\n      );\n    }\n\n    // Преобразование в формат API с правильной типизацией\n    const projectResult = {\n      id: project.id,\n      name: project.name,\n      description: project.description || null,\n      status: project.status || 'active',\n      color: project.color || '#3B82F6',\n      createdAt: project.createdAt,\n      updatedAt: project.updatedAt,\n      userId: project.createdBy\n    };\n\n    return NextResponse.json(\n      { project: projectResult },\n      { status: 201 }\n    );\n\n  } catch (error) {\n    console.error('Ошибка создания проекта:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}\n\n// Удаление проекта (только для администраторов)\nexport async function DELETE(request: NextRequest) {\n  try {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n      return NextResponse.json(\n        { error: authResult.error },\n        { status: 401 }\n      );\n    }\n\n    const { user } = authResult;\n    \n    // Проверка прав администратора\n    if (user.role !== 'admin') {\n      return NextResponse.json(\n        { error: 'Недостаточно прав для удаления проекта' },\n        { status: 403 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const projectId = searchParams.get('projectId');\n\n    if (!projectId) {\n      return NextResponse.json(\n        { error: 'ID проекта обязателен' },\n        { status: 400 }\n      );\n    }\n\n    // Проверка существования проекта\n    const project = await databaseAdapter.getProjectById(projectId);\n    if (!project) {\n      return NextResponse.json(\n        { error: 'Проект не найден' },\n        { status: 404 }\n      );\n    }\n\n    // Удаление проекта\n    await databaseAdapter.deleteProject(projectId);\n\n    return NextResponse.json(\n      { message: 'Проект успешно удален' },\n      { status: 200 }\n    );\n\n  } catch (error) {\n    console.error('Ошибка удаления проекта:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}