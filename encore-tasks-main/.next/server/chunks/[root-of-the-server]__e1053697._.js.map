{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/lib/csrf.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\n// CSRF token configuration\nconst CSRF_TOKEN_LENGTH = 32;\nconst CSRF_HEADER_NAME = 'x-csrf-token';\nconst CSRF_COOKIE_NAME = 'csrf-token';\n\n/**\n * Generate a cryptographically secure CSRF token\n */\nexport function generateCSRFToken(): string {\n  // Check if we're in Node.js environment\n  if (typeof require !== 'undefined') {\n    try {\n      const nodeCrypto = require('crypto');\n      if (nodeCrypto && typeof nodeCrypto.randomBytes === 'function') {\n        return nodeCrypto.randomBytes(CSRF_TOKEN_LENGTH).toString('hex');\n      }\n    } catch (e) {\n      // Fall through to Web Crypto API\n    }\n  }\n  \n  // Use Web Crypto API (browser/edge runtime)\n  const array = new Uint8Array(CSRF_TOKEN_LENGTH);\n  globalThis.crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Verify CSRF token from request\n */\nexport function verifyCSRFToken(request: NextRequest): boolean {\n  // Skip CSRF check for GET, HEAD, OPTIONS requests\n  if (['GET', 'HEAD', 'OPTIONS'].includes(request.method)) {\n    return true;\n  }\n\n  // Get token from header\n  const headerToken = request.headers.get(CSRF_HEADER_NAME);\n  \n  // Get token from cookie\n  const cookieToken = request.cookies.get(CSRF_COOKIE_NAME)?.value;\n\n  // Both tokens must exist and match\n  if (!headerToken || !cookieToken || headerToken !== cookieToken) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Create CSRF cookie options\n */\nexport function getCSRFCookieOptions() {\n  return {\n    name: CSRF_COOKIE_NAME,\n    httpOnly: false, // Must be accessible to JavaScript for header inclusion\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict' as const,\n    path: '/',\n    maxAge: 60 * 60 * 24, // 24 hours\n  };\n}\n\n/**\n * Get CSRF token from request cookies\n */\nexport function getCSRFTokenFromRequest(request: NextRequest): string | null {\n  return request.cookies.get(CSRF_COOKIE_NAME)?.value || null;\n}\n\nexport { CSRF_HEADER_NAME, CSRF_COOKIE_NAME };"],"names":[],"mappings":";;;;;;;;AAEA,2BAA2B;AAC3B,MAAM,oBAAoB;AAC1B,MAAM,mBAAmB;AACzB,MAAM,mBAAmB;AAKlB,SAAS;IACd,wCAAwC;IACxC,wCAAoC;QAClC,IAAI;YACF,MAAM;YACN,IAAI,cAAc,OAAO,WAAW,WAAW,KAAK,YAAY;gBAC9D,OAAO,WAAW,WAAW,CAAC,mBAAmB,QAAQ,CAAC;YAC5D;QACF,EAAE,OAAO,GAAG;QACV,iCAAiC;QACnC;IACF;IAEA,4CAA4C;IAC5C,MAAM,QAAQ,IAAI,WAAW;IAC7B,WAAW,MAAM,CAAC,eAAe,CAAC;IAClC,OAAO,MAAM,IAAI,CAAC,OAAO,CAAA,OAAQ,KAAK,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC;AAC5E;AAKO,SAAS,gBAAgB,OAAoB;IAClD,kDAAkD;IAClD,IAAI;QAAC;QAAO;QAAQ;KAAU,CAAC,QAAQ,CAAC,QAAQ,MAAM,GAAG;QACvD,OAAO;IACT;IAEA,wBAAwB;IACxB,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC;IAExC,wBAAwB;IACxB,MAAM,cAAc,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB;IAE3D,mCAAmC;IACnC,IAAI,CAAC,eAAe,CAAC,eAAe,gBAAgB,aAAa;QAC/D,OAAO;IACT;IAEA,OAAO;AACT;AAKO,SAAS;IACd,OAAO;QACL,MAAM;QACN,UAAU;QACV,QAAQ,oDAAyB;QACjC,UAAU;QACV,MAAM;QACN,QAAQ,KAAK,KAAK;IACpB;AACF;AAKO,SAAS,wBAAwB,OAAoB;IAC1D,OAAO,QAAQ,OAAO,CAAC,GAAG,CAAC,mBAAmB,SAAS;AACzD","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///E:/Projects/encore-tasks/encore-tasks-main/src/app/api/csrf/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { generateCSRFToken, getCSRFCookieOptions } from '@/lib/csrf';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Generate new CSRF token\n    const csrfToken = generateCSRFToken();\n    \n    // Create response with token\n    const response = NextResponse.json({ csrfToken });\n    \n    // Set CSRF token cookie\n    const cookieOptions = getCSRFCookieOptions();\n    response.cookies.set(cookieOptions.name, csrfToken, {\n      httpOnly: cookieOptions.httpOnly,\n      secure: cookieOptions.secure,\n      sameSite: cookieOptions.sameSite,\n      path: cookieOptions.path,\n      maxAge: cookieOptions.maxAge,\n    });\n    \n    // Set cache headers to prevent caching\n    response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n    response.headers.set('Pragma', 'no-cache');\n    response.headers.set('Expires', '0');\n    \n    return response;\n  } catch (error) {\n    console.error('Error generating CSRF token:', error);\n    return NextResponse.json(\n      { error: 'Внутренняя ошибка сервера' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,0BAA0B;QAC1B,MAAM,YAAY,CAAA,GAAA,oHAAA,CAAA,oBAAiB,AAAD;QAElC,6BAA6B;QAC7B,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAU;QAE/C,wBAAwB;QACxB,MAAM,gBAAgB,CAAA,GAAA,oHAAA,CAAA,uBAAoB,AAAD;QACzC,SAAS,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,EAAE,WAAW;YAClD,UAAU,cAAc,QAAQ;YAChC,QAAQ,cAAc,MAAM;YAC5B,UAAU,cAAc,QAAQ;YAChC,MAAM,cAAc,IAAI;YACxB,QAAQ,cAAc,MAAM;QAC9B;QAEA,uCAAuC;QACvC,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;QACtC,SAAS,OAAO,CAAC,GAAG,CAAC,UAAU;QAC/B,SAAS,OAAO,CAAC,GAAG,CAAC,WAAW;QAEhC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}