/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/projects/route";
exports.ids = ["app/api/projects/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var E_Projects_encore_tasks_encore_tasks_main_src_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/projects/route.ts */ \"(rsc)/./src/app/api/projects/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([E_Projects_encore_tasks_encore_tasks_main_src_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\nE_Projects_encore_tasks_encore_tasks_main_src_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/projects/route\",\n        pathname: \"/api/projects\",\n        filename: \"route\",\n        bundlePath: \"app/api/projects/route\"\n    },\n    resolvedPagePath: \"E:\\\\Projects\\\\encore-tasks\\\\encore-tasks-main\\\\src\\\\app\\\\api\\\\projects\\\\route.ts\",\n    nextConfigOutput,\n    userland: E_Projects_encore_tasks_encore_tasks_main_src_app_api_projects_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZwcm9qZWN0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcHJvamVjdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwcm9qZWN0cyUyRnJvdXRlLnRzJmFwcERpcj1FJTNBJTVDUHJvamVjdHMlNUNlbmNvcmUtdGFza3MlNUNlbmNvcmUtdGFza3MtbWFpbiU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RSUzQSU1Q1Byb2plY3RzJTVDZW5jb3JlLXRhc2tzJTVDZW5jb3JlLXRhc2tzLW1haW4maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ2dDO0FBQzdHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRixxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJFOlxcXFxQcm9qZWN0c1xcXFxlbmNvcmUtdGFza3NcXFxcZW5jb3JlLXRhc2tzLW1haW5cXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHJvamVjdHNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3Byb2plY3RzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcHJvamVjdHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Byb2plY3RzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRTpcXFxcUHJvamVjdHNcXFxcZW5jb3JlLXRhc2tzXFxcXGVuY29yZS10YXNrcy1tYWluXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHByb2plY3RzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/projects/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/projects/route.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var _lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database-adapter */ \"(rsc)/./src/lib/database-adapter.ts\");\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth */ \"(rsc)/./src/lib/auth.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__, _lib_auth__WEBPACK_IMPORTED_MODULE_2__]);\n([_lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__, _lib_auth__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst databaseAdapter = _lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__.dbAdapter;\n\n// Схемы валидации\nconst createProjectSchema = zod__WEBPACK_IMPORTED_MODULE_3__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1, 'Название проекта обязательно').max(100, 'Название слишком длинное'),\n    description: zod__WEBPACK_IMPORTED_MODULE_3__.string().max(500, 'Описание слишком длинное').optional(),\n    color: zod__WEBPACK_IMPORTED_MODULE_3__.string().regex(/^#[0-9A-F]{6}$/i, 'Неверный формат цвета').optional().default('#3B82F6'),\n    icon_url: zod__WEBPACK_IMPORTED_MODULE_3__.string().min(1, 'Иконка обязательна').optional().default('📋'),\n    visibility: zod__WEBPACK_IMPORTED_MODULE_3__[\"enum\"]([\n        'private',\n        'public'\n    ]).optional().default('private'),\n    telegram_chat_id: zod__WEBPACK_IMPORTED_MODULE_3__.string().nullable().optional(),\n    telegram_topic_id: zod__WEBPACK_IMPORTED_MODULE_3__.string().nullable().optional(),\n    member_ids: zod__WEBPACK_IMPORTED_MODULE_3__.array(zod__WEBPACK_IMPORTED_MODULE_3__.string()).optional().default([])\n});\n// updateProjectSchema удален - используем схему из validation.ts\n// GET /api/projects - Получить все проекты пользователя\nasync function GET(request) {\n    try {\n        const authResult = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_2__.verifyAuth)(request);\n        if (!authResult.success || !authResult.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        // Получаем все проекты пользователя\n        const projects = await databaseAdapter.getUserProjects(authResult.user.userId);\n        // Преобразуем в нужный формат\n        const projectsWithStats = projects.map((project)=>({\n                id: project.id,\n                name: project.name,\n                description: project.description,\n                color: project.color || '#3B82F6',\n                icon: project.icon_url || '📋',\n                status: 'active',\n                visibility: 'private',\n                telegram_chat_id: null,\n                telegram_topic_id: null,\n                settings: null,\n                created_at: project.created_at,\n                updated_at: project.updated_at,\n                created_by: project.created_by,\n                created_by_username: 'admin',\n                members_count: 1,\n                boards_count: 0,\n                tasks_count: 0\n            }));\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                projects: projectsWithStats,\n                pagination: {\n                    page: 1,\n                    limit: 20,\n                    total: projectsWithStats.length,\n                    total_pages: 1\n                }\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching projects:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/projects - Создать новый проект\nasync function POST(request) {\n    try {\n        const authResult = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_2__.verifyAuth)(request);\n        if (!authResult.success || !authResult.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        console.log('📊 Received project data:', JSON.stringify(body, null, 2));\n        const validationResult = createProjectSchema.safeParse(body);\n        console.log('🔍 Validation result:', validationResult.success);\n        if (!validationResult.success) {\n            console.log('❌ Validation errors:', validationResult.error);\n            console.log('❌ Validation error details:', JSON.stringify(validationResult.error.issues, null, 2));\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Validation failed',\n                details: validationResult.error.issues\n            }, {\n                status: 400\n            });\n        }\n        const projectData = validationResult.data;\n        // Создаем проект используя PostgreSQL адаптер\n        const project = await databaseAdapter.createProject({\n            name: projectData.name,\n            description: projectData.description || '',\n            created_by: authResult.user.userId,\n            color: projectData.color || '#3B82F6',\n            icon_url: projectData.icon || '📋',\n            telegram_chat_id: projectData.telegram_chat_id || null,\n            telegram_topic_id: projectData.telegram_topic_id || null\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            data: {\n                id: project.id,\n                name: project.name,\n                description: project.description,\n                color: project.color,\n                icon: project.icon_url || '📋',\n                status: 'active',\n                visibility: 'private',\n                telegram_chat_id: project.telegram_chat_id,\n                telegram_topic_id: project.telegram_topic_id,\n                settings: null,\n                created_at: project.created_at,\n                updated_at: project.updated_at,\n                created_by: project.created_by,\n                created_by_username: 'admin',\n                members_count: 1,\n                boards_count: 0,\n                tasks_count: 0\n            },\n            message: 'Проект успешно создан'\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Error creating project:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n// DELETE /api/projects - Удалить проекты (только для админов)\nasync function DELETE(request) {\n    try {\n        const authResult = await (0,_lib_auth__WEBPACK_IMPORTED_MODULE_2__.verifyAuth)(request);\n        if (!authResult.success || !authResult.user) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        if (authResult.user.role !== 'admin') {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'Forbidden: Admin access required'\n            }, {\n                status: 403\n            });\n        }\n        const { searchParams } = new URL(request.url);\n        const projectIds = searchParams.get('ids')?.split(',') || [];\n        if (projectIds.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: 'No project IDs provided'\n            }, {\n                status: 400\n            });\n        }\n        // Удаление проектов пока не реализовано\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Project deletion not implemented'\n        }, {\n            status: 501\n        });\n    } catch (error) {\n        console.error('Error deleting projects:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: 'Internal server error'\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UTtZQUFJO1FBRWxCO1FBRUEsSUFBSUwsV0FBV0UsSUFBSSxDQUFDeUMsSUFBSSxLQUFLLFNBQVM7WUFDcEMsT0FBT3JFLHFEQUFZQSxDQUFDNkIsSUFBSSxDQUN0QjtnQkFBRUYsU0FBUztnQkFBT0csT0FBTztZQUFtQyxHQUM1RDtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTSxFQUFFdUMsWUFBWSxFQUFFLEdBQUcsSUFBSUMsSUFBSTlDLFFBQVErQyxHQUFHO1FBQzVDLE1BQU1DLGFBQWFILGFBQWFJLEdBQUcsQ0FBQyxRQUFRQyxNQUFNLFFBQVEsRUFBRTtRQUU1RCxJQUFJRixXQUFXcEIsTUFBTSxLQUFLLEdBQUc7WUFDM0IsT0FBT3JELHFEQUFZQSxDQUFDNkIsSUFBSSxDQUN0QjtnQkFBRUYsU0FBUztnQkFBT0csT0FBTztZQUEwQixHQUNuRDtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsd0NBQXdDO1FBQ3hDLE9BQU8vQixxREFBWUEsQ0FBQzZCLElBQUksQ0FBQztZQUN2QkYsU0FBUztZQUNURyxPQUFPO1FBQ1QsR0FBRztZQUFFQyxRQUFRO1FBQUk7SUFFbkIsRUFBRSxPQUFPRCxPQUFPO1FBQ2R5QixRQUFRekIsS0FBSyxDQUFDLDRCQUE0QkE7UUFDMUMsT0FBTzlCLHFEQUFZQSxDQUFDNkIsSUFBSSxDQUN0QjtZQUFFRixTQUFTO1lBQU9HLE9BQU87UUFBd0IsR0FDakQ7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIkU6XFxQcm9qZWN0c1xcZW5jb3JlLXRhc2tzXFxlbmNvcmUtdGFza3MtbWFpblxcc3JjXFxhcHBcXGFwaVxccHJvamVjdHNcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IGRiQWRhcHRlciB9IGZyb20gJ0AvbGliL2RhdGFiYXNlLWFkYXB0ZXInO1xuXG5jb25zdCBkYXRhYmFzZUFkYXB0ZXIgPSBkYkFkYXB0ZXI7XG5pbXBvcnQgeyB2ZXJpZnlBdXRoIH0gZnJvbSAnQC9saWIvYXV0aCc7XG5pbXBvcnQgeyBDcmVhdGVQcm9qZWN0RHRvLCBQcm9qZWN0V2l0aFN0YXRzIH0gZnJvbSAnQC90eXBlcy9jb3JlLnR5cGVzJztcblxuLy8g0KHRhdC10LzRiyDQstCw0LvQuNC00LDRhtC40LhcbmNvbnN0IGNyZWF0ZVByb2plY3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsICfQndCw0LfQstCw0L3QuNC1INC/0YDQvtC10LrRgtCwINC+0LHRj9C30LDRgtC10LvRjNC90L4nKS5tYXgoMTAwLCAn0J3QsNC30LLQsNC90LjQtSDRgdC70LjRiNC60L7QvCDQtNC70LjQvdC90L7QtScpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5tYXgoNTAwLCAn0J7Qv9C40YHQsNC90LjQtSDRgdC70LjRiNC60L7QvCDQtNC70LjQvdC90L7QtScpLm9wdGlvbmFsKCksXG4gIGNvbG9yOiB6LnN0cmluZygpLnJlZ2V4KC9eI1swLTlBLUZdezZ9JC9pLCAn0J3QtdCy0LXRgNC90YvQuSDRhNC+0YDQvNCw0YIg0YbQstC10YLQsCcpLm9wdGlvbmFsKCkuZGVmYXVsdCgnIzNCODJGNicpLFxuICBpY29uX3VybDogei5zdHJpbmcoKS5taW4oMSwgJ9CY0LrQvtC90LrQsCDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdCwJykub3B0aW9uYWwoKS5kZWZhdWx0KCfwn5OLJyksXG4gIHZpc2liaWxpdHk6IHouZW51bShbJ3ByaXZhdGUnLCAncHVibGljJ10pLm9wdGlvbmFsKCkuZGVmYXVsdCgncHJpdmF0ZScpLFxuICB0ZWxlZ3JhbV9jaGF0X2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgdGVsZWdyYW1fdG9waWNfaWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICBtZW1iZXJfaWRzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkuZGVmYXVsdChbXSlcbn0pO1xuXG4vLyB1cGRhdGVQcm9qZWN0U2NoZW1hINGD0LTQsNC70LXQvSAtINC40YHQv9C+0LvRjNC30YPQtdC8INGB0YXQtdC80YMg0LjQtyB2YWxpZGF0aW9uLnRzXG5cbi8vIEdFVCAvYXBpL3Byb2plY3RzIC0g0J/QvtC70YPRh9C40YLRjCDQstGB0LUg0L/RgNC+0LXQutGC0Ysg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IHZlcmlmeUF1dGgocmVxdWVzdCk7XG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MgfHwgIWF1dGhSZXN1bHQudXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vINCf0L7Qu9GD0YfQsNC10Lwg0LLRgdC1INC/0YDQvtC10LrRgtGLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgIGNvbnN0IHByb2plY3RzID0gYXdhaXQgZGF0YWJhc2VBZGFwdGVyLmdldFVzZXJQcm9qZWN0cyhhdXRoUmVzdWx0LnVzZXIudXNlcklkKTtcblxuICAgIC8vINCf0YDQtdC+0LHRgNCw0LfRg9C10Lwg0LIg0L3Rg9C20L3Ri9C5INGE0L7RgNC80LDRglxuICAgIGNvbnN0IHByb2plY3RzV2l0aFN0YXRzID0gcHJvamVjdHMubWFwKHByb2plY3QgPT4gKHtcbiAgICAgIGlkOiBwcm9qZWN0LmlkLFxuICAgICAgbmFtZTogcHJvamVjdC5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHByb2plY3QuZGVzY3JpcHRpb24sXG4gICAgICBjb2xvcjogcHJvamVjdC5jb2xvciB8fCAnIzNCODJGNicsXG4gICAgICBpY29uOiBwcm9qZWN0Lmljb25fdXJsIHx8ICfwn5OLJyxcbiAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICB2aXNpYmlsaXR5OiAncHJpdmF0ZScsXG4gICAgICB0ZWxlZ3JhbV9jaGF0X2lkOiBudWxsLFxuICAgICAgdGVsZWdyYW1fdG9waWNfaWQ6IG51bGwsXG4gICAgICBzZXR0aW5nczogbnVsbCxcbiAgICAgIGNyZWF0ZWRfYXQ6IHByb2plY3QuY3JlYXRlZF9hdCxcbiAgICAgIHVwZGF0ZWRfYXQ6IHByb2plY3QudXBkYXRlZF9hdCxcbiAgICAgIGNyZWF0ZWRfYnk6IHByb2plY3QuY3JlYXRlZF9ieSxcbiAgICAgIGNyZWF0ZWRfYnlfdXNlcm5hbWU6ICdhZG1pbicsXG4gICAgICBtZW1iZXJzX2NvdW50OiAxLFxuICAgICAgYm9hcmRzX2NvdW50OiAwLFxuICAgICAgdGFza3NfY291bnQ6IDBcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcHJvamVjdHM6IHByb2plY3RzV2l0aFN0YXRzLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICBsaW1pdDogMjAsXG4gICAgICAgICAgdG90YWw6IHByb2plY3RzV2l0aFN0YXRzLmxlbmd0aCxcbiAgICAgICAgICB0b3RhbF9wYWdlczogMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBwcm9qZWN0czonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbi8vIFBPU1QgL2FwaS9wcm9qZWN0cyAtINCh0L7Qt9C00LDRgtGMINC90L7QstGL0Lkg0L/RgNC+0LXQutGCXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGF1dGhSZXN1bHQgPSBhd2FpdCB2ZXJpZnlBdXRoKHJlcXVlc3QpO1xuICAgIGlmICghYXV0aFJlc3VsdC5zdWNjZXNzIHx8ICFhdXRoUmVzdWx0LnVzZXIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdVbmF1dGhvcml6ZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc29sZS5sb2coJ/Cfk4ogUmVjZWl2ZWQgcHJvamVjdCBkYXRhOicsIEpTT04uc3RyaW5naWZ5KGJvZHksIG51bGwsIDIpKTtcbiAgICBcbiAgICBjb25zdCB2YWxpZGF0aW9uUmVzdWx0ID0gY3JlYXRlUHJvamVjdFNjaGVtYS5zYWZlUGFyc2UoYm9keSk7XG4gICAgY29uc29sZS5sb2coJ/CflI0gVmFsaWRhdGlvbiByZXN1bHQ6JywgdmFsaWRhdGlvblJlc3VsdC5zdWNjZXNzKTtcblxuICAgIGlmICghdmFsaWRhdGlvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICBjb25zb2xlLmxvZygn4p2MIFZhbGlkYXRpb24gZXJyb3JzOicsIHZhbGlkYXRpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgY29uc29sZS5sb2coJ+KdjCBWYWxpZGF0aW9uIGVycm9yIGRldGFpbHM6JywgSlNPTi5zdHJpbmdpZnkodmFsaWRhdGlvblJlc3VsdC5lcnJvci5pc3N1ZXMsIG51bGwsIDIpKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgIGVycm9yOiAnVmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgICAgIGRldGFpbHM6IHZhbGlkYXRpb25SZXN1bHQuZXJyb3IuaXNzdWVzXG4gICAgICAgIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9qZWN0RGF0YTogQ3JlYXRlUHJvamVjdER0byA9IHZhbGlkYXRpb25SZXN1bHQuZGF0YTtcblxuICAgIC8vINCh0L7Qt9C00LDQtdC8INC/0YDQvtC10LrRgiDQuNGB0L/QvtC70YzQt9GD0Y8gUG9zdGdyZVNRTCDQsNC00LDQv9GC0LXRgFxuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBkYXRhYmFzZUFkYXB0ZXIuY3JlYXRlUHJvamVjdCh7XG4gICAgICBuYW1lOiBwcm9qZWN0RGF0YS5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHByb2plY3REYXRhLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgY3JlYXRlZF9ieTogYXV0aFJlc3VsdC51c2VyLnVzZXJJZCxcbiAgICAgIGNvbG9yOiBwcm9qZWN0RGF0YS5jb2xvciB8fCAnIzNCODJGNicsXG4gICAgICBpY29uX3VybDogcHJvamVjdERhdGEuaWNvbiB8fCAn8J+TiycsXG4gICAgICB0ZWxlZ3JhbV9jaGF0X2lkOiBwcm9qZWN0RGF0YS50ZWxlZ3JhbV9jaGF0X2lkIHx8IG51bGwsXG4gICAgICB0ZWxlZ3JhbV90b3BpY19pZDogcHJvamVjdERhdGEudGVsZWdyYW1fdG9waWNfaWQgfHwgbnVsbFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGlkOiBwcm9qZWN0LmlkLFxuICAgICAgICBuYW1lOiBwcm9qZWN0Lm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBwcm9qZWN0LmRlc2NyaXB0aW9uLFxuICAgICAgICBjb2xvcjogcHJvamVjdC5jb2xvcixcbiAgICAgICAgaWNvbjogcHJvamVjdC5pY29uX3VybCB8fCAn8J+TiycsXG4gICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgIHZpc2liaWxpdHk6ICdwcml2YXRlJyxcbiAgICAgICAgdGVsZWdyYW1fY2hhdF9pZDogcHJvamVjdC50ZWxlZ3JhbV9jaGF0X2lkLFxuICAgICAgICB0ZWxlZ3JhbV90b3BpY19pZDogcHJvamVjdC50ZWxlZ3JhbV90b3BpY19pZCxcbiAgICAgICAgc2V0dGluZ3M6IG51bGwsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IHByb2plY3QuY3JlYXRlZF9hdCxcbiAgICAgICAgdXBkYXRlZF9hdDogcHJvamVjdC51cGRhdGVkX2F0LFxuICAgICAgICBjcmVhdGVkX2J5OiBwcm9qZWN0LmNyZWF0ZWRfYnksXG4gICAgICAgIGNyZWF0ZWRfYnlfdXNlcm5hbWU6ICdhZG1pbicsXG4gICAgICAgIG1lbWJlcnNfY291bnQ6IDEsXG4gICAgICAgIGJvYXJkc19jb3VudDogMCxcbiAgICAgICAgdGFza3NfY291bnQ6IDBcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiAn0J/RgNC+0LXQutGCINGD0YHQv9C10YjQvdC+INGB0L7Qt9C00LDQvSdcbiAgICB9LCB7IHN0YXR1czogMjAxIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgcHJvamVjdDonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59XG5cbi8vIERFTEVURSAvYXBpL3Byb2plY3RzIC0g0KPQtNCw0LvQuNGC0Ywg0L/RgNC+0LXQutGC0YsgKNGC0L7Qu9GM0LrQviDQtNC70Y8g0LDQtNC80LjQvdC+0LIpXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gREVMRVRFKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXV0aFJlc3VsdCA9IGF3YWl0IHZlcmlmeUF1dGgocmVxdWVzdCk7XG4gICAgaWYgKCFhdXRoUmVzdWx0LnN1Y2Nlc3MgfHwgIWF1dGhSZXN1bHQudXNlcikge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ1VuYXV0aG9yaXplZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChhdXRoUmVzdWx0LnVzZXIucm9sZSAhPT0gJ2FkbWluJykge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ZvcmJpZGRlbjogQWRtaW4gYWNjZXNzIHJlcXVpcmVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAzIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGNvbnN0IHByb2plY3RJZHMgPSBzZWFyY2hQYXJhbXMuZ2V0KCdpZHMnKT8uc3BsaXQoJywnKSB8fCBbXTtcblxuICAgIGlmIChwcm9qZWN0SWRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ05vIHByb2plY3QgSURzIHByb3ZpZGVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8g0KPQtNCw0LvQtdC90LjQtSDQv9GA0L7QtdC60YLQvtCyINC/0L7QutCwINC90LUg0YDQtdCw0LvQuNC30L7QstCw0L3QvlxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnUHJvamVjdCBkZWxldGlvbiBub3QgaW1wbGVtZW50ZWQnXG4gICAgfSwgeyBzdGF0dXM6IDUwMSB9KTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRlbGV0aW5nIHByb2plY3RzOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwieiIsImRiQWRhcHRlciIsImRhdGFiYXNlQWRhcHRlciIsInZlcmlmeUF1dGgiLCJjcmVhdGVQcm9qZWN0U2NoZW1hIiwib2JqZWN0IiwibmFtZSIsInN0cmluZyIsIm1pbiIsIm1heCIsImRlc2NyaXB0aW9uIiwib3B0aW9uYWwiLCJjb2xvciIsInJlZ2V4IiwiZGVmYXVsdCIsImljb25fdXJsIiwidmlzaWJpbGl0eSIsImVudW0iLCJ0ZWxlZ3JhbV9jaGF0X2lkIiwibnVsbGFibGUiLCJ0ZWxlZ3JhbV90b3BpY19pZCIsIm1lbWJlcl9pZHMiLCJhcnJheSIsIkdFVCIsInJlcXVlc3QiLCJhdXRoUmVzdWx0Iiwic3VjY2VzcyIsInVzZXIiLCJqc29uIiwiZXJyb3IiLCJzdGF0dXMiLCJwcm9qZWN0cyIsImdldFVzZXJQcm9qZWN0cyIsInVzZXJJZCIsInByb2plY3RzV2l0aFN0YXRzIiwibWFwIiwicHJvamVjdCIsImlkIiwiaWNvbiIsInNldHRpbmdzIiwiY3JlYXRlZF9hdCIsInVwZGF0ZWRfYXQiLCJjcmVhdGVkX2J5IiwiY3JlYXRlZF9ieV91c2VybmFtZSIsIm1lbWJlcnNfY291bnQiLCJib2FyZHNfY291bnQiLCJ0YXNrc19jb3VudCIsImRhdGEiLCJwYWdpbmF0aW9uIiwicGFnZSIsImxpbWl0IiwidG90YWwiLCJsZW5ndGgiLCJ0b3RhbF9wYWdlcyIsImNvbnNvbGUiLCJQT1NUIiwiYm9keSIsImxvZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ2YWxpZGF0aW9uUmVzdWx0Iiwic2FmZVBhcnNlIiwiaXNzdWVzIiwiZGV0YWlscyIsInByb2plY3REYXRhIiwiY3JlYXRlUHJvamVjdCIsIm1lc3NhZ2UiLCJERUxFVEUiLCJyb2xlIiwic2VhcmNoUGFyYW1zIiwiVVJMIiwidXJsIiwicHJvamVjdElkcyIsImdldCIsInNwbGl0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/projects/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/adapters/postgresql-adapter.ts":
/*!************************************************!*\
  !*** ./src/lib/adapters/postgresql-adapter.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostgreSQLAdapter: () => (/* binding */ PostgreSQLAdapter)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// =====================================================\n// POSTGRESQL ADAPTER FOR ENCORE TASKS\n// =====================================================\n\n\n\nclass PostgreSQLAdapter {\n    constructor(){\n        this.isInitialized = false;\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n            host: process.env.DB_HOST || 'localhost',\n            port: parseInt(process.env.DB_PORT || '5432'),\n            database: process.env.DB_NAME || 'encore_tasks',\n            user: process.env.DB_USER || 'encore_user',\n            password: process.env.DB_PASSWORD || 'encore_password',\n            ssl: process.env.DB_SSL === 'true' ? {\n                rejectUnauthorized: false\n            } : false,\n            max: parseInt(process.env.DB_POOL_MAX || '20'),\n            idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n            connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT || '2000')\n        });\n    }\n    async initialize() {\n        try {\n            // Test connection\n            const client = await this.pool.connect();\n            await client.query('SELECT NOW()');\n            client.release();\n            this.isInitialized = true;\n            console.log('✅ PostgreSQL adapter initialized successfully');\n        } catch (error) {\n            console.error('❌ PostgreSQL adapter initialization failed:', error);\n            throw error;\n        }\n    }\n    isConnected() {\n        return this.isInitialized;\n    }\n    async executeRawQuery(query, params = []) {\n        const client = await this.pool.connect();\n        try {\n            const result = await client.query(query, params);\n            return result;\n        } finally{\n            client.release();\n        }\n    }\n    async query(sql, params) {\n        return this.executeRawQuery(sql, params);\n    }\n    // =====================================================\n    // USER OPERATIONS\n    // =====================================================\n    async createUser(userData) {\n        const { email, password, name, role = 'user' } = userData;\n        const hashedPassword = await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(password, 12);\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const query = `\n      INSERT INTO users (id, email, password_hash, name, role, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, $5, NOW(), NOW())\n      RETURNING id, email, name, role, created_at, updated_at\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            email,\n            hashedPassword,\n            name,\n            role\n        ]);\n        return result.rows[0];\n    }\n    async getUserById(id) {\n        const query = 'SELECT id, email, name, role, created_at, updated_at FROM users WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getUserByEmail(email) {\n        const query = 'SELECT * FROM users WHERE email = $1';\n        const result = await this.executeRawQuery(query, [\n            email\n        ]);\n        return result.rows[0] || null;\n    }\n    async updateUser(id, userData) {\n        const fields = [];\n        const values = [];\n        let paramIndex = 1;\n        for (const [key, value] of Object.entries(userData)){\n            if (key === 'password') {\n                fields.push(`password_hash = $${paramIndex}`);\n                values.push(await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(value, 12));\n            } else if (key !== 'id') {\n                fields.push(`${key} = $${paramIndex}`);\n                values.push(value);\n            }\n            paramIndex++;\n        }\n        if (fields.length === 0) {\n            throw new Error('No fields to update');\n        }\n        fields.push(`updated_at = NOW()`);\n        values.push(id);\n        const query = `\n      UPDATE users \n      SET ${fields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING id, email, name, role, created_at, updated_at\n    `;\n        const result = await this.executeRawQuery(query, values);\n        return result.rows[0];\n    }\n    async deleteUser(id) {\n        const query = 'DELETE FROM users WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    async getAllUsers() {\n        const query = 'SELECT id, email, name, role, created_at, updated_at FROM users ORDER BY created_at DESC';\n        const result = await this.executeRawQuery(query);\n        return result.rows;\n    }\n    // =====================================================\n    // SESSION OPERATIONS\n    // =====================================================\n    async createSession(sessionData) {\n        const { userId, user_id, token, expiresAt, expires_at } = sessionData;\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        // Поддерживаем оба формата названий полей\n        const userIdValue = userId || user_id;\n        const expiresAtValue = expiresAt || expires_at;\n        const query = `\n      INSERT INTO sessions (id, user_id, token, expires_at, created_at)\n      VALUES ($1, $2, $3, $4, NOW())\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            userIdValue,\n            token,\n            expiresAtValue\n        ]);\n        return result.rows[0];\n    }\n    async getSessionByToken(token) {\n        const query = `\n      SELECT s.*, u.id as user_id, u.email, u.name, u.role\n      FROM sessions s\n      JOIN users u ON s.user_id = u.id\n      WHERE s.token = $1 AND s.expires_at > NOW()\n    `;\n        const result = await this.executeRawQuery(query, [\n            token\n        ]);\n        return result.rows[0] || null;\n    }\n    async deleteSession(token) {\n        const query = 'DELETE FROM sessions WHERE token = $1';\n        const result = await this.executeRawQuery(query, [\n            token\n        ]);\n        return result.rowCount > 0;\n    }\n    async deleteUserSessions(userId) {\n        const query = 'DELETE FROM sessions WHERE user_id = $1';\n        const result = await this.executeRawQuery(query, [\n            userId\n        ]);\n        return result.rowCount > 0;\n    }\n    // =====================================================\n    // PROJECT OPERATIONS\n    // =====================================================\n    async createProject(projectData) {\n        const { name, description, created_by, color, icon_url } = projectData;\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const query = `\n      INSERT INTO projects (id, name, description, creator_id, color, icon, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, $5, $6, NOW(), NOW())\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            name,\n            description,\n            created_by,\n            color,\n            icon_url\n        ]);\n        return result.rows[0];\n    }\n    async getProjectById(id) {\n        const query = `\n      SELECT p.*, u.name as owner_name\n      FROM projects p\n      JOIN users u ON p.creator_id = u.id\n      WHERE p.id = $1\n    `;\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getUserProjects(userId) {\n        const query = `\n      SELECT p.*, u.name as owner_name\n      FROM projects p\n      JOIN users u ON p.creator_id = u.id\n      WHERE p.creator_id = $1\n      ORDER BY p.created_at DESC\n    `;\n        const result = await this.executeRawQuery(query, [\n            userId\n        ]);\n        return result.rows;\n    }\n    async updateProject(id, projectData) {\n        const fields = [];\n        const values = [];\n        let paramIndex = 1;\n        for (const [key, value] of Object.entries(projectData)){\n            if (key !== 'id') {\n                fields.push(`${key} = $${paramIndex}`);\n                values.push(value);\n                paramIndex++;\n            }\n        }\n        if (fields.length === 0) {\n            throw new Error('No fields to update');\n        }\n        fields.push(`updated_at = NOW()`);\n        values.push(id);\n        const query = `\n      UPDATE projects \n      SET ${fields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, values);\n        return result.rows[0];\n    }\n    async deleteProject(id) {\n        const query = 'DELETE FROM projects WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // =====================================================\n    // BOARD OPERATIONS\n    // =====================================================\n    async createBoard(boardData) {\n        const { name, description, projectId, position } = boardData;\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const query = `\n      INSERT INTO boards (id, name, description, project_id, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, NOW(), NOW())\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            name,\n            description,\n            projectId\n        ]);\n        return result.rows[0];\n    }\n    async getBoardById(id) {\n        const query = 'SELECT * FROM boards WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getProjectBoards(projectId) {\n        const query = 'SELECT * FROM boards WHERE project_id = $1 ORDER BY created_at ASC';\n        const result = await this.executeRawQuery(query, [\n            projectId\n        ]);\n        return result.rows;\n    }\n    async updateBoard(id, updates) {\n        const fields = [];\n        const values = [];\n        let paramIndex = 1;\n        for (const [key, value] of Object.entries(updates)){\n            if (key !== 'id') {\n                fields.push(`${key} = $${paramIndex}`);\n                values.push(value);\n                paramIndex++;\n            }\n        }\n        if (fields.length === 0) {\n            throw new Error('No fields to update');\n        }\n        fields.push(`updated_at = NOW()`);\n        values.push(id);\n        const query = `\n      UPDATE boards \n      SET ${fields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, values);\n        return result.rows[0];\n    }\n    async deleteBoard(id) {\n        const query = 'DELETE FROM boards WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // =====================================================\n    // COLUMN OPERATIONS\n    // =====================================================\n    async createColumn(columnData) {\n        const { name, boardId, position } = columnData;\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const query = `\n      INSERT INTO columns (id, title, board_id, position, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, NOW(), NOW())\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            name,\n            boardId,\n            position || 0\n        ]);\n        return result.rows[0];\n    }\n    async getColumnById(id) {\n        const query = 'SELECT * FROM columns WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getBoardColumns(boardId) {\n        const query = 'SELECT * FROM columns WHERE board_id = $1 ORDER BY position ASC, created_at ASC';\n        const result = await this.executeRawQuery(query, [\n            boardId\n        ]);\n        return result.rows;\n    }\n    async updateColumn(id, updates) {\n        const fields = [];\n        const values = [];\n        let paramIndex = 1;\n        for (const [key, value] of Object.entries(updates)){\n            if (key !== 'id') {\n                fields.push(`${key} = $${paramIndex}`);\n                values.push(value);\n                paramIndex++;\n            }\n        }\n        if (fields.length === 0) {\n            throw new Error('No fields to update');\n        }\n        fields.push(`updated_at = NOW()`);\n        values.push(id);\n        const query = `\n      UPDATE columns \n      SET ${fields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, values);\n        return result.rows[0];\n    }\n    async deleteColumn(id) {\n        const query = 'DELETE FROM columns WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // =====================================================\n    // TASK OPERATIONS\n    // =====================================================\n    async createTask(taskData) {\n        const { title, description, columnId, projectId, assigneeId, priority, dueDate, position } = taskData;\n        const id = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const query = `\n      INSERT INTO tasks (id, title, description, column_id, project_id, assignee_id, priority, due_date, position, status, created_at, updated_at)\n      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, 'todo', NOW(), NOW())\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, [\n            id,\n            title,\n            description,\n            columnId,\n            projectId,\n            assigneeId,\n            priority || 'medium',\n            dueDate,\n            position || 0\n        ]);\n        return result.rows[0];\n    }\n    async getTaskById(id) {\n        const query = `\n      SELECT t.*, u.name as assignee_name, c.name as column_name\n      FROM tasks t\n      LEFT JOIN users u ON t.assignee_id = u.id\n      LEFT JOIN columns c ON t.column_id = c.id\n      WHERE t.id = $1\n    `;\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getProjectTasks(projectId) {\n        const query = `\n      SELECT t.*, u.name as assignee_name, c.name as column_name\n      FROM tasks t\n      LEFT JOIN users u ON t.assignee_id = u.id\n      LEFT JOIN columns c ON t.column_id = c.id\n      WHERE t.project_id = $1\n      ORDER BY t.position ASC, t.created_at ASC\n    `;\n        const result = await this.executeRawQuery(query, [\n            projectId\n        ]);\n        return result.rows;\n    }\n    async getBoardTasks(boardId) {\n        const query = `\n      SELECT t.*, u.name as assignee_name, c.name as column_name\n      FROM tasks t\n      LEFT JOIN users u ON t.assignee_id = u.id\n      LEFT JOIN columns c ON t.column_id = c.id\n      WHERE c.board_id = $1\n      ORDER BY t.position ASC, t.created_at ASC\n    `;\n        const result = await this.executeRawQuery(query, [\n            boardId\n        ]);\n        return result.rows;\n    }\n    async getColumnTasks(columnId) {\n        const query = `\n      SELECT t.*, u.name as assignee_name\n      FROM tasks t\n      LEFT JOIN users u ON t.assignee_id = u.id\n      WHERE t.column_id = $1\n      ORDER BY t.position ASC, t.created_at ASC\n    `;\n        const result = await this.executeRawQuery(query, [\n            columnId\n        ]);\n        return result.rows;\n    }\n    async updateTask(id, updates) {\n        const fields = [];\n        const values = [];\n        let paramIndex = 1;\n        for (const [key, value] of Object.entries(updates)){\n            if (key !== 'id') {\n                fields.push(`${key} = $${paramIndex}`);\n                values.push(value);\n                paramIndex++;\n            }\n        }\n        if (fields.length === 0) {\n            throw new Error('No fields to update');\n        }\n        fields.push(`updated_at = NOW()`);\n        values.push(id);\n        const query = `\n      UPDATE tasks \n      SET ${fields.join(', ')}\n      WHERE id = $${paramIndex}\n      RETURNING *\n    `;\n        const result = await this.executeRawQuery(query, values);\n        return result.rows[0];\n    }\n    async deleteTask(id) {\n        const query = 'DELETE FROM tasks WHERE id = $1';\n        const result = await this.executeRawQuery(query, [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // =====================================================\n    // PROJECT ACCESS OPERATIONS\n    // =====================================================\n    async hasProjectAccess(userId, projectId) {\n        // Check if user is the creator of the project\n        const query = `\n      SELECT 1 FROM projects \n      WHERE id = $1 AND creator_id = $2\n    `;\n        const result = await this.executeRawQuery(query, [\n            projectId,\n            userId\n        ]);\n        return result.rows.length > 0;\n    }\n    async close() {\n        await this.pool.end();\n        this.isInitialized = false;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/adapters/postgresql-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   requireAdmin: () => (/* binding */ requireAdmin),\n/* harmony export */   verifyAuth: () => (/* binding */ verifyAuth),\n/* harmony export */   verifyProjectAccess: () => (/* binding */ verifyProjectAccess)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _database_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./database-adapter */ \"(rsc)/./src/lib/database-adapter.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_database_adapter__WEBPACK_IMPORTED_MODULE_1__]);\n_database_adapter__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst databaseAdapter = _database_adapter__WEBPACK_IMPORTED_MODULE_1__.dbAdapter;\nasync function verifyAuth(request) {\n    try {\n        // Отладка: показать все cookies\n        console.log('=== DEBUG COOKIES ===');\n        console.log('All cookies:', request.cookies.getAll());\n        console.log('Cookie names:', request.cookies.getAll().map((c)=>c.name));\n        console.log('auth-token cookie:', request.cookies.get('auth-token'));\n        console.log('auth-token-client cookie:', request.cookies.get('auth-token-client'));\n        console.log('Authorization header:', request.headers.get('authorization'));\n        // Получение токена из cookie или заголовка Authorization\n        const token = request.cookies.get('auth-token')?.value || request.cookies.get('auth-token-client')?.value || request.headers.get('authorization')?.replace('Bearer ', '');\n        console.log('Auth token found:', !!token);\n        console.log('Token value (first 20 chars):', token ? token.substring(0, 20) + '...' : 'null');\n        if (!token) {\n            console.log('No auth token found in cookies or headers');\n            return {\n                success: false,\n                error: 'Токен аутентификации не найден'\n            };\n        }\n        // Проверяем JWT токен\n        let decoded;\n        const jwtSecret = process.env.JWT_SECRET || 'your-secret-key';\n        try {\n            console.log('🔍 Проверяем JWT токен:', token.substring(0, 20) + '...');\n            decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, jwtSecret);\n            console.log('🔓 JWT токен успешно декодирован:', {\n                userId: decoded.userId,\n                email: decoded.email\n            });\n        } catch (error) {\n            console.log('❌ Ошибка декодирования JWT токена:', error);\n            console.log('🔑 Используемый JWT_SECRET:', jwtSecret);\n            return {\n                success: false,\n                error: 'Invalid token'\n            };\n        }\n        // Используем оптимизированный адаптер для работы с сессиями\n        await databaseAdapter.initialize();\n        try {\n            // Ищем сессию через адаптер\n            const session = await databaseAdapter.getSessionByToken(token);\n            console.log('Session found:', !!session);\n            console.log('Session object:', session);\n            console.log('Session userId:', session?.user_id);\n            if (!session) {\n                console.log('❌ Session not found in database for token');\n                return {\n                    success: false,\n                    error: 'Сессия не найдена или истекла'\n                };\n            }\n            // Verify that the JWT userId matches the session user_id\n            if (decoded.userId !== session.user_id) {\n                console.log('❌ JWT userId does not match session user_id');\n                return {\n                    success: false,\n                    error: 'Несоответствие данных токена и сессии'\n                };\n            }\n            // Получаем пользователя через адаптер\n            const user = await databaseAdapter.getUserById(session.user_id);\n            if (!user) {\n                return {\n                    success: false,\n                    error: 'Пользователь не найден'\n                };\n            }\n            // Проверяем статус одобрения пользователя\n            console.log('User data:', user);\n            console.log('User approval_status:', user.approval_status, 'type:', typeof user.approval_status);\n            console.log('User isApproved:', user.isApproved, 'type:', typeof user.isApproved);\n            console.log('User role:', user.role);\n            // Используем approval_status для SQLite или isApproved для других БД\n            const isApproved = user.approval_status !== undefined ? Boolean(user.approval_status) : user.isApproved !== undefined ? Boolean(user.isApproved) : true;\n            console.log('Final isApproved:', isApproved);\n            if (!isApproved && user.role !== 'admin') {\n                console.log('User not approved and not admin');\n                return {\n                    success: false,\n                    error: 'Пользователь не одобрен'\n                };\n            }\n            return {\n                success: true,\n                user: {\n                    userId: String(user.id),\n                    email: user.email,\n                    role: user.role,\n                    name: user.name\n                }\n            };\n        } catch (error) {\n            console.error('Auth error:', error);\n            return {\n                success: false,\n                error: 'Ошибка аутентификации'\n            };\n        }\n    } catch (error) {\n        console.error('Ошибка проверки аутентификации:', error);\n        return {\n            success: false,\n            error: 'Внутренняя ошибка сервера'\n        };\n    }\n}\n// Проверка прав доступа к проекту\nasync function verifyProjectAccess(userId, projectId, requiredRole) {\n    try {\n        await databaseAdapter.initialize();\n        // Получаем проекты через адаптер\n        const projects = await databaseAdapter.getAllProjects();\n        const project = projects.find((p)=>p.id === projectId);\n        if (!project) {\n            return {\n                hasAccess: false\n            };\n        }\n        // Проверяем, является ли пользователь владельцем\n        if (project.created_by === userId) {\n            return {\n                hasAccess: true,\n                userRole: 'owner'\n            };\n        }\n        // Получаем участников проекта через getUserProjects\n        const userProjects = await databaseAdapter.getUserProjects(userId);\n        const hasAccess = userProjects.some((p)=>p.id === projectId);\n        if (!hasAccess) {\n            return {\n                hasAccess: false\n            };\n        }\n        // Для упрощения, считаем что у пользователя есть доступ как участник\n        const userRole = 'member';\n        // Проверка требуемой роли\n        if (requiredRole) {\n            const roleHierarchy = {\n                owner: 3,\n                admin: 2,\n                member: 1\n            };\n            const userRoleLevel = roleHierarchy[userRole] || 0;\n            const requiredRoleLevel = roleHierarchy[requiredRole];\n            if (userRoleLevel < requiredRoleLevel) {\n                return {\n                    hasAccess: false,\n                    userRole\n                };\n            }\n        }\n        return {\n            hasAccess: true,\n            userRole\n        };\n    } catch (error) {\n        console.error('Ошибка проверки доступа к проекту:', error);\n        return {\n            hasAccess: false\n        };\n    }\n}\n// Middleware для проверки роли администратора\nasync function requireAdmin(request) {\n    const authResult = await verifyAuth(request);\n    if (!authResult.success) {\n        return {\n            success: false,\n            error: authResult.error\n        };\n    }\n    if (authResult.user.role !== 'admin') {\n        return {\n            success: false,\n            error: 'Требуются права администратора'\n        };\n    }\n    return {\n        success: true,\n        user: authResult.user\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database-adapter.ts":
/*!*************************************!*\
  !*** ./src/lib/database-adapter.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseAdapter: () => (/* binding */ DatabaseAdapter),\n/* harmony export */   dbAdapter: () => (/* binding */ dbAdapter)\n/* harmony export */ });\n/* harmony import */ var _adapters_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adapters/postgresql-adapter */ \"(rsc)/./src/lib/adapters/postgresql-adapter.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_adapters_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__]);\n_adapters_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// =====================================================\n// POSTGRESQL DATABASE ADAPTER FOR ENCORE TASKS\n// =====================================================\n\nclass DatabaseAdapter {\n    constructor(){\n        this.isInitialized = false;\n        this.adapter = new _adapters_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__.PostgreSQLAdapter();\n    }\n    static getInstance() {\n        if (!DatabaseAdapter.instance) {\n            DatabaseAdapter.instance = new DatabaseAdapter();\n        }\n        return DatabaseAdapter.instance;\n    }\n    async initialize() {\n        try {\n            await this.adapter.initialize();\n            this.isInitialized = true;\n            console.log('✅ PostgreSQL connection established');\n        } catch (error) {\n            console.error('❌ PostgreSQL connection failed:', error);\n            throw new Error('Database initialization failed');\n        }\n    }\n    /**\n   * Проверка инициализации перед выполнением операций\n   */ async ensureInitialized() {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n    }\n    isConnected() {\n        return this.adapter.isConnected();\n    }\n    getDatabaseType() {\n        return 'postgresql';\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С ПОЛЬЗОВАТЕЛЯМИ\n    // =====================================================\n    // User operations\n    async createUser(userData) {\n        await this.ensureInitialized();\n        return this.adapter.createUser(userData);\n    }\n    async getUserById(id) {\n        await this.ensureInitialized();\n        return this.adapter.getUserById(id);\n    }\n    async getUserByEmail(email) {\n        await this.ensureInitialized();\n        return this.adapter.getUserByEmail(email);\n    }\n    async updateUser(id, userData) {\n        await this.ensureInitialized();\n        return this.adapter.updateUser(id, userData);\n    }\n    async deleteUser(id) {\n        await this.ensureInitialized();\n        return this.adapter.deleteUser(id);\n    }\n    async getAllUsers() {\n        await this.ensureInitialized();\n        return this.adapter.getAllUsers();\n    }\n    // Session operations\n    async createSession(sessionData) {\n        await this.ensureInitialized();\n        return this.adapter.createSession(sessionData);\n    }\n    async getSessionByToken(token) {\n        await this.ensureInitialized();\n        return this.adapter.getSessionByToken(token);\n    }\n    async deleteSession(token) {\n        await this.ensureInitialized();\n        return this.adapter.deleteSession(token);\n    }\n    async deleteUserSessions(userId) {\n        await this.ensureInitialized();\n        return this.adapter.deleteUserSessions(userId);\n    }\n    // Project operations\n    async createProject(projectData) {\n        await this.ensureInitialized();\n        return this.adapter.createProject(projectData);\n    }\n    async getProjectById(id) {\n        await this.ensureInitialized();\n        return this.adapter.getProjectById(id);\n    }\n    async getUserProjects(userId) {\n        await this.ensureInitialized();\n        return this.adapter.getUserProjects(userId);\n    }\n    async updateProject(id, projectData) {\n        await this.ensureInitialized();\n        return this.adapter.updateProject(id, projectData);\n    }\n    async deleteProject(id) {\n        await this.ensureInitialized();\n        return this.adapter.deleteProject(id);\n    }\n    // Board operations\n    async createBoard(boardData) {\n        await this.ensureInitialized();\n        return this.adapter.createBoard(boardData);\n    }\n    async getBoardById(id) {\n        await this.ensureInitialized();\n        return this.adapter.getBoardById(id);\n    }\n    async getProjectBoards(projectId) {\n        await this.ensureInitialized();\n        return this.adapter.getProjectBoards(projectId);\n    }\n    async updateBoard(id, updates) {\n        await this.ensureInitialized();\n        return this.adapter.updateBoard(id, updates);\n    }\n    async deleteBoard(id) {\n        await this.ensureInitialized();\n        return this.adapter.deleteBoard(id);\n    }\n    // Column operations\n    async createColumn(columnData) {\n        await this.ensureInitialized();\n        return this.adapter.createColumn(columnData);\n    }\n    async getColumnById(id) {\n        await this.ensureInitialized();\n        return this.adapter.getColumnById(id);\n    }\n    async getBoardColumns(boardId) {\n        await this.ensureInitialized();\n        return this.adapter.getBoardColumns(boardId);\n    }\n    async updateColumn(id, updates) {\n        await this.ensureInitialized();\n        return this.adapter.updateColumn(id, updates);\n    }\n    async deleteColumn(id) {\n        await this.ensureInitialized();\n        return this.adapter.deleteColumn(id);\n    }\n    // Task operations\n    async createTask(taskData) {\n        await this.ensureInitialized();\n        return this.adapter.createTask(taskData);\n    }\n    async getTaskById(id) {\n        await this.ensureInitialized();\n        return this.adapter.getTaskById(id);\n    }\n    async getProjectTasks(projectId) {\n        await this.ensureInitialized();\n        return this.adapter.getProjectTasks(projectId);\n    }\n    async getBoardTasks(boardId) {\n        await this.ensureInitialized();\n        return this.adapter.getBoardTasks(boardId);\n    }\n    async getColumnTasks(columnId) {\n        await this.ensureInitialized();\n        return this.adapter.getColumnTasks(columnId);\n    }\n    async updateTask(id, updates) {\n        await this.ensureInitialized();\n        return this.adapter.updateTask(id, updates);\n    }\n    async deleteTask(id) {\n        await this.ensureInitialized();\n        return this.adapter.deleteTask(id);\n    }\n    // =====================================================\n    // ACCESS CONTROL METHODS\n    // =====================================================\n    async hasProjectAccess(userId, projectId) {\n        await this.ensureInitialized();\n        return this.adapter.hasProjectAccess(userId, projectId);\n    }\n    /**\n   * Выполнение сырого SQL запроса (для совместимости с репозиториями)\n   */ async query(sql, params) {\n        await this.ensureInitialized();\n        const result = await this.adapter.query(sql, params);\n        return result.rows;\n    }\n    // Raw query execution\n    async executeRawQuery(query, params = []) {\n        await this.ensureInitialized();\n        return this.adapter.executeRawQuery(query, params);\n    }\n    async close() {\n        if (this.adapter) {\n            await this.adapter.close();\n        }\n    }\n}\n// Export singleton instance\nconst dbAdapter = new DatabaseAdapter();\n// Export class for getInstance() usage\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database-adapter.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/semver","vendor-chunks/bcryptjs","vendor-chunks/jsonwebtoken","vendor-chunks/lodash.includes","vendor-chunks/jws","vendor-chunks/lodash.once","vendor-chunks/jwa","vendor-chunks/lodash.isinteger","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/lodash.isplainobject","vendor-chunks/ms","vendor-chunks/uuid","vendor-chunks/lodash.isstring","vendor-chunks/lodash.isnumber","vendor-chunks/lodash.isboolean","vendor-chunks/safe-buffer","vendor-chunks/buffer-equal-constant-time","vendor-chunks/zod"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fprojects%2Froute&page=%2Fapi%2Fprojects%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprojects%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();