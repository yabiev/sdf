/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/register/route";
exports.ids = ["app/api/auth/register/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fregister%2Froute&page=%2Fapi%2Fauth%2Fregister%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fregister%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fregister%2Froute&page=%2Fapi%2Fauth%2Fregister%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fregister%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var E_Projects_encore_tasks_encore_tasks_main_src_app_api_auth_register_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/auth/register/route.ts */ \"(rsc)/./src/app/api/auth/register/route.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([E_Projects_encore_tasks_encore_tasks_main_src_app_api_auth_register_route_ts__WEBPACK_IMPORTED_MODULE_3__]);\nE_Projects_encore_tasks_encore_tasks_main_src_app_api_auth_register_route_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/register/route\",\n        pathname: \"/api/auth/register\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/register/route\"\n    },\n    resolvedPagePath: \"E:\\\\Projects\\\\encore-tasks\\\\encore-tasks-main\\\\src\\\\app\\\\api\\\\auth\\\\register\\\\route.ts\",\n    nextConfigOutput,\n    userland: E_Projects_encore_tasks_encore_tasks_main_src_app_api_auth_register_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGcmVnaXN0ZXIlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmF1dGglMkZyZWdpc3RlciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmF1dGglMkZyZWdpc3RlciUyRnJvdXRlLnRzJmFwcERpcj1FJTNBJTVDUHJvamVjdHMlNUNlbmNvcmUtdGFza3MlNUNlbmNvcmUtdGFza3MtbWFpbiU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RSUzQSU1Q1Byb2plY3RzJTVDZW5jb3JlLXRhc2tzJTVDZW5jb3JlLXRhc2tzLW1haW4maXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ3NDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRixxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJFOlxcXFxQcm9qZWN0c1xcXFxlbmNvcmUtdGFza3NcXFxcZW5jb3JlLXRhc2tzLW1haW5cXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxyZWdpc3RlclxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYXV0aC9yZWdpc3Rlci9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2F1dGgvcmVnaXN0ZXJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvcmVnaXN0ZXIvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJFOlxcXFxQcm9qZWN0c1xcXFxlbmNvcmUtdGFza3NcXFxcZW5jb3JlLXRhc2tzLW1haW5cXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxyZWdpc3RlclxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fregister%2Froute&page=%2Fapi%2Fauth%2Fregister%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fregister%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/auth/register/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/auth/register/route.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database-adapter */ \"(rsc)/./src/lib/database-adapter.ts\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst databaseAdapter = _lib_database_adapter__WEBPACK_IMPORTED_MODULE_1__.DatabaseAdapter.getInstance();\nasync function POST(request) {\n    try {\n        const { name, email, password } = await request.json();\n        // Валидация\n        if (!name || !email || !password) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Все поля обязательны'\n            }, {\n                status: 400\n            });\n        }\n        if (password.length < 6) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Пароль должен содержать минимум 6 символов'\n            }, {\n                status: 400\n            });\n        }\n        // Email валидация\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(email)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Некорректный формат email'\n            }, {\n                status: 400\n            });\n        }\n        // Проверка существования пользователя\n        const existingUser = await databaseAdapter.getUserByEmail(email);\n        if (existingUser) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Пользователь с таким email уже существует'\n            }, {\n                status: 409\n            });\n        }\n        // Хеширование пароля\n        const saltRounds = 10;\n        const hashedPassword = await bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().hash(password, saltRounds);\n        // Создание пользователя с правильной структурой данных\n        // Для обычных пользователей isApproved = false - требуется одобрение администратора\n        // Администраторы могут одобрить пользователей через админ панель\n        const user = await databaseAdapter.createUser({\n            email,\n            password_hash: hashedPassword,\n            name,\n            role: 'user',\n            isApproved: false\n        });\n        // Возврат данных пользователя (без пароля) с правильной типизацией\n        const userResult = {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n            role: user.role,\n            approval_status: user.isApproved ? 'approved' : 'pending',\n            isApproved: user.isApproved,\n            avatar: user.avatar,\n            createdAt: user.created_at\n        };\n        // НЕ создаем сессию для неподтвержденных пользователей\n        // Пользователь должен быть одобрен администратором перед входом в систему\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Пользователь успешно зарегистрирован. Ожидайте подтверждения от администратора.',\n            user: userResult,\n            requiresApproval: true\n        }, {\n            status: 201\n        });\n        return response;\n    } catch (error) {\n        console.error('Ошибка регистрации:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Внутренняя ошибка сервера'\n        }, {\n            status: 500\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hdXRoL3JlZ2lzdGVyL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXdEO0FBQ0M7QUFDM0I7QUFFOUIsTUFBTUcsa0JBQWtCRixrRUFBZUEsQ0FBQ0csV0FBVztBQUU1QyxlQUFlQyxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsUUFBUSxFQUFFLEdBQUcsTUFBTUgsUUFBUUksSUFBSTtRQUVwRCxZQUFZO1FBQ1osSUFBSSxDQUFDSCxRQUFRLENBQUNDLFNBQVMsQ0FBQ0MsVUFBVTtZQUNoQyxPQUFPVCxxREFBWUEsQ0FBQ1UsSUFBSSxDQUN0QjtnQkFBRUMsT0FBTztZQUF1QixHQUNoQztnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsSUFBSUgsU0FBU0ksTUFBTSxHQUFHLEdBQUc7WUFDdkIsT0FBT2IscURBQVlBLENBQUNVLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBNkMsR0FDdEQ7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLGtCQUFrQjtRQUNsQixNQUFNRSxhQUFhO1FBQ25CLElBQUksQ0FBQ0EsV0FBV0MsSUFBSSxDQUFDUCxRQUFRO1lBQzNCLE9BQU9SLHFEQUFZQSxDQUFDVSxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQTRCLEdBQ3JDO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxzQ0FBc0M7UUFDdEMsTUFBTUksZUFBZSxNQUFNYixnQkFBZ0JjLGNBQWMsQ0FBQ1Q7UUFDMUQsSUFBSVEsY0FBYztZQUNoQixPQUFPaEIscURBQVlBLENBQUNVLElBQUksQ0FDdEI7Z0JBQUVDLE9BQU87WUFBNEMsR0FDckQ7Z0JBQUVDLFFBQVE7WUFBSTtRQUVsQjtRQUVBLHFCQUFxQjtRQUNyQixNQUFNTSxhQUFhO1FBQ25CLE1BQU1DLGlCQUFpQixNQUFNakIsb0RBQVcsQ0FBQ08sVUFBVVM7UUFFbkQsdURBQXVEO1FBQ3ZELG9GQUFvRjtRQUNwRixpRUFBaUU7UUFDakUsTUFBTUcsT0FBTyxNQUFNbEIsZ0JBQWdCbUIsVUFBVSxDQUFDO1lBQzVDZDtZQUNBZSxlQUFlSjtZQUNmWjtZQUNBaUIsTUFBTTtZQUNOQyxZQUFZO1FBQ2Q7UUFFQSxtRUFBbUU7UUFDbkUsTUFBTUMsYUFBYTtZQUNqQkMsSUFBSU4sS0FBS00sRUFBRTtZQUNYcEIsTUFBTWMsS0FBS2QsSUFBSTtZQUNmQyxPQUFPYSxLQUFLYixLQUFLO1lBQ2pCZ0IsTUFBTUgsS0FBS0csSUFBSTtZQUNmSSxpQkFBaUJQLEtBQUtJLFVBQVUsR0FBRyxhQUFhO1lBQ2hEQSxZQUFZSixLQUFLSSxVQUFVO1lBQzNCSSxRQUFRUixLQUFLUSxNQUFNO1lBQ25CQyxXQUFXVCxLQUFLVSxVQUFVO1FBQzVCO1FBRUEsdURBQXVEO1FBQ3ZELDBFQUEwRTtRQUMxRSxNQUFNQyxXQUFXaEMscURBQVlBLENBQUNVLElBQUksQ0FBQztZQUNqQ3VCLFNBQVM7WUFDVFosTUFBTUs7WUFDTlEsa0JBQWtCO1FBQ3BCLEdBQUc7WUFBRXRCLFFBQVE7UUFBSTtRQUVqQixPQUFPb0I7SUFFVCxFQUFFLE9BQU9yQixPQUFPO1FBQ2R3QixRQUFReEIsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBT1gscURBQVlBLENBQUNVLElBQUksQ0FDdEI7WUFBRUMsT0FBTztRQUE0QixHQUNyQztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsiRTpcXFByb2plY3RzXFxlbmNvcmUtdGFza3NcXGVuY29yZS10YXNrcy1tYWluXFxzcmNcXGFwcFxcYXBpXFxhdXRoXFxyZWdpc3Rlclxccm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IERhdGFiYXNlQWRhcHRlciB9IGZyb20gJ0AvbGliL2RhdGFiYXNlLWFkYXB0ZXInO1xuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG5cbmNvbnN0IGRhdGFiYXNlQWRhcHRlciA9IERhdGFiYXNlQWRhcHRlci5nZXRJbnN0YW5jZSgpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IHsgbmFtZSwgZW1haWwsIHBhc3N3b3JkIH0gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgIC8vINCS0LDQu9C40LTQsNGG0LjRj1xuICAgIGlmICghbmFtZSB8fCAhZW1haWwgfHwgIXBhc3N3b3JkKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICfQktGB0LUg0L/QvtC70Y8g0L7QsdGP0LfQsNGC0LXQu9GM0L3RiycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCA2KSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICfQn9Cw0YDQvtC70Ywg0LTQvtC70LbQtdC9INGB0L7QtNC10YDQttCw0YLRjCDQvNC40L3QuNC80YPQvCA2INGB0LjQvNCy0L7Qu9C+0LInIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBFbWFpbCDQstCw0LvQuNC00LDRhtC40Y9cbiAgICBjb25zdCBlbWFpbFJlZ2V4ID0gL15bXlxcc0BdK0BbXlxcc0BdK1xcLlteXFxzQF0rJC87XG4gICAgaWYgKCFlbWFpbFJlZ2V4LnRlc3QoZW1haWwpKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICfQndC10LrQvtGA0YDQtdC60YLQvdGL0Lkg0YTQvtGA0LzQsNGCIGVtYWlsJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIC8vINCf0YDQvtCy0LXRgNC60LAg0YHRg9GJ0LXRgdGC0LLQvtCy0LDQvdC40Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgZGF0YWJhc2VBZGFwdGVyLmdldFVzZXJCeUVtYWlsKGVtYWlsKTtcbiAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICfQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YEg0YLQsNC60LjQvCBlbWFpbCDRg9C20LUg0YHRg9GJ0LXRgdGC0LLRg9C10YInIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDkgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyDQpdC10YjQuNGA0L7QstCw0L3QuNC1INC/0LDRgNC+0LvRj1xuICAgIGNvbnN0IHNhbHRSb3VuZHMgPSAxMDtcbiAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCBzYWx0Um91bmRzKTtcblxuICAgIC8vINCh0L7Qt9C00LDQvdC40LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGBINC/0YDQsNCy0LjQu9GM0L3QvtC5INGB0YLRgNGD0LrRgtGD0YDQvtC5INC00LDQvdC90YvRhVxuICAgIC8vINCU0LvRjyDQvtCx0YvRh9C90YvRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSBpc0FwcHJvdmVkID0gZmFsc2UgLSDRgtGA0LXQsdGD0LXRgtGB0Y8g0L7QtNC+0LHRgNC10L3QuNC1INCw0LTQvNC40L3QuNGB0YLRgNCw0YLQvtGA0LBcbiAgICAvLyDQkNC00LzQuNC90LjRgdGC0YDQsNGC0L7RgNGLINC80L7Qs9GD0YIg0L7QtNC+0LHRgNC40YLRjCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDRh9C10YDQtdC3INCw0LTQvNC40L0g0L/QsNC90LXQu9GMXG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGRhdGFiYXNlQWRhcHRlci5jcmVhdGVVc2VyKHtcbiAgICAgIGVtYWlsLFxuICAgICAgcGFzc3dvcmRfaGFzaDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICBuYW1lLFxuICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgaXNBcHByb3ZlZDogZmFsc2VcbiAgICB9KTtcblxuICAgIC8vINCS0L7Qt9Cy0YDQsNGCINC00LDQvdC90YvRhSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8gKNCx0LXQtyDQv9Cw0YDQvtC70Y8pINGBINC/0YDQsNCy0LjQu9GM0L3QvtC5INGC0LjQv9C40LfQsNGG0LjQtdC5XG4gICAgY29uc3QgdXNlclJlc3VsdCA9IHtcbiAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgbmFtZTogdXNlci5uYW1lLFxuICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICByb2xlOiB1c2VyLnJvbGUsXG4gICAgICBhcHByb3ZhbF9zdGF0dXM6IHVzZXIuaXNBcHByb3ZlZCA/ICdhcHByb3ZlZCcgOiAncGVuZGluZycsXG4gICAgICBpc0FwcHJvdmVkOiB1c2VyLmlzQXBwcm92ZWQsXG4gICAgICBhdmF0YXI6IHVzZXIuYXZhdGFyLFxuICAgICAgY3JlYXRlZEF0OiB1c2VyLmNyZWF0ZWRfYXRcbiAgICB9O1xuXG4gICAgLy8g0J3QlSDRgdC+0LfQtNCw0LXQvCDRgdC10YHRgdC40Y4g0LTQu9GPINC90LXQv9C+0LTRgtCy0LXRgNC20LTQtdC90L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5XG4gICAgLy8g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC00L7Qu9C20LXQvSDQsdGL0YLRjCDQvtC00L7QsdGA0LXQvSDQsNC00LzQuNC90LjRgdGC0YDQsNGC0L7RgNC+0Lwg0L/QtdGA0LXQtCDQstGF0L7QtNC+0Lwg0LIg0YHQuNGB0YLQtdC80YNcbiAgICBjb25zdCByZXNwb25zZSA9IE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIG1lc3NhZ2U6ICfQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YPRgdC/0LXRiNC90L4g0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC9LiDQntC20LjQtNCw0LnRgtC1INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPINC+0YIg0LDQtNC80LjQvdC40YHRgtGA0LDRgtC+0YDQsC4nLFxuICAgICAgdXNlcjogdXNlclJlc3VsdCxcbiAgICAgIHJlcXVpcmVzQXBwcm92YWw6IHRydWVcbiAgICB9LCB7IHN0YXR1czogMjAxIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINGA0LXQs9C40YHRgtGA0LDRhtC40Lg6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6ICfQktC90YPRgtGA0LXQvdC90Y/RjyDQvtGI0LjQsdC60LAg0YHQtdGA0LLQtdGA0LAnIH0sXG4gICAgICB7IHN0YXR1czogNTAwIH1cbiAgICApO1xuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkRhdGFiYXNlQWRhcHRlciIsImJjcnlwdCIsImRhdGFiYXNlQWRhcHRlciIsImdldEluc3RhbmNlIiwiUE9TVCIsInJlcXVlc3QiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsImxlbmd0aCIsImVtYWlsUmVnZXgiLCJ0ZXN0IiwiZXhpc3RpbmdVc2VyIiwiZ2V0VXNlckJ5RW1haWwiLCJzYWx0Um91bmRzIiwiaGFzaGVkUGFzc3dvcmQiLCJoYXNoIiwidXNlciIsImNyZWF0ZVVzZXIiLCJwYXNzd29yZF9oYXNoIiwicm9sZSIsImlzQXBwcm92ZWQiLCJ1c2VyUmVzdWx0IiwiaWQiLCJhcHByb3ZhbF9zdGF0dXMiLCJhdmF0YXIiLCJjcmVhdGVkQXQiLCJjcmVhdGVkX2F0IiwicmVzcG9uc2UiLCJtZXNzYWdlIiwicmVxdWlyZXNBcHByb3ZhbCIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/auth/register/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database-adapter.ts":
/*!*************************************!*\
  !*** ./src/lib/database-adapter.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseAdapter: () => (/* binding */ DatabaseAdapter),\n/* harmony export */   dbAdapter: () => (/* binding */ dbAdapter)\n/* harmony export */ });\n/* harmony import */ var _postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./postgresql-adapter */ \"(rsc)/./src/lib/postgresql-adapter.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__]);\n_postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// =====================================================\n// АДАПТЕР ДЛЯ РАБОТЫ С БАЗАМИ ДАННЫХ (ИСПРАВЛЕННЫЙ)\n// =====================================================\n\n// =====================================================\n// КЛАСС АДАПТЕРА БАЗЫ ДАННЫХ\n// =====================================================\nclass DatabaseAdapter {\n    constructor(){\n        this.currentDatabase = 'postgresql';\n        this.isInitialized = false;\n        this.sqliteAdapter = null // Динамически загружается\n        ;\n        this.initializationPromise = null;\n        this.postgresqlAdapter = _postgresql_adapter__WEBPACK_IMPORTED_MODULE_0__.PostgreSQLAdapter.getInstance();\n        // SQLite адаптер будет создан только при необходимости\n        this.currentDatabase = 'postgresql'; // Используем PostgreSQL по умолчанию\n    }\n    static getInstance() {\n        if (!DatabaseAdapter.instance) {\n            DatabaseAdapter.instance = new DatabaseAdapter();\n        }\n        return DatabaseAdapter.instance;\n    }\n    /**\n   * Инициализация адаптера\n   */ async initialize() {\n        if (this.isInitialized) {\n            return;\n        }\n        if (this.initializationPromise) {\n            return this.initializationPromise;\n        }\n        this.initializationPromise = this.performInitialization();\n        return this.initializationPromise;\n    }\n    async performInitialization() {\n        const databasePriority = process.env.DATABASE_PRIORITY || 'postgresql';\n        console.log(`🔧 DATABASE_PRIORITY установлен в: ${databasePriority}`);\n        if (databasePriority === 'sqlite') {\n            try {\n                // Динамически импортируем SQLite адаптер\n                if (!this.sqliteAdapter) {\n                    const { SQLiteAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/uuid\"), __webpack_require__.e(\"_rsc_src_lib_sqlite-adapter_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./sqlite-adapter */ \"(rsc)/./src/lib/sqlite-adapter.ts\"));\n                    this.sqliteAdapter = SQLiteAdapter.getInstance();\n                }\n                await this.sqliteAdapter.initialize();\n                this.currentDatabase = 'sqlite';\n                this.isInitialized = true;\n                console.log('✅ Database Adapter инициализирован с SQLite');\n                return;\n            } catch (sqliteError) {\n                console.warn('⚠️ SQLite недоступен, переключаемся на PostgreSQL:', sqliteError);\n                // Fallback на PostgreSQL\n                try {\n                    await this.postgresqlAdapter.initialize();\n                    this.currentDatabase = 'postgresql';\n                    this.isInitialized = true;\n                    console.log('✅ Database Adapter инициализирован с PostgreSQL (fallback)');\n                    return;\n                } catch (postgresError) {\n                    console.error('❌ Ошибка инициализации обеих баз данных:', {\n                        sqliteError,\n                        postgresError\n                    });\n                    this.initializationPromise = null;\n                    throw postgresError;\n                }\n            }\n        } else {\n            try {\n                // Сначала пытаемся использовать PostgreSQL\n                await this.postgresqlAdapter.initialize();\n                this.currentDatabase = 'postgresql';\n                this.isInitialized = true;\n                console.log('✅ Database Adapter инициализирован с PostgreSQL');\n            } catch (postgresError) {\n                console.warn('⚠️ PostgreSQL недоступен, переключаемся на SQLite:', postgresError);\n                try {\n                    // Динамически импортируем SQLite адаптер только при необходимости\n                    if (!this.sqliteAdapter) {\n                        const { SQLiteAdapter } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/uuid\"), __webpack_require__.e(\"_rsc_src_lib_sqlite-adapter_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./sqlite-adapter */ \"(rsc)/./src/lib/sqlite-adapter.ts\"));\n                        this.sqliteAdapter = SQLiteAdapter.getInstance();\n                    }\n                    // Fallback на SQLite\n                    await this.sqliteAdapter.initialize();\n                    this.currentDatabase = 'sqlite';\n                    this.isInitialized = true;\n                    console.log('✅ Database Adapter инициализирован с SQLite (fallback)');\n                } catch (sqliteError) {\n                    console.error('❌ Ошибка инициализации обеих баз данных:', {\n                        postgresError,\n                        sqliteError\n                    });\n                    this.initializationPromise = null;\n                    throw sqliteError;\n                }\n            }\n        }\n    }\n    /**\n   * Проверка инициализации перед выполнением операций\n   */ async ensureInitialized() {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        console.log(`🔍 DatabaseAdapter: используется ${this.currentDatabase}`);\n    }\n    /**\n   * Получение текущего адаптера базы данных\n   */ getCurrentAdapter() {\n        if (this.currentDatabase === 'sqlite') {\n            if (!this.sqliteAdapter) {\n                throw new Error('SQLite adapter not loaded');\n            }\n            return this.sqliteAdapter;\n        }\n        return this.postgresqlAdapter;\n    }\n    /**\n   * Получение статуса базы данных\n   */ async getDatabaseStatus() {\n        const postgresql = await Promise.resolve(this.postgresqlAdapter.initialize()).then(()=>true).catch(()=>false);\n        let sqlite = false;\n        // Проверяем SQLite только если адаптер загружен\n        if (this.sqliteAdapter) {\n            sqlite = await Promise.resolve(this.sqliteAdapter.initialize()).then(()=>true).catch(()=>false);\n        }\n        return {\n            postgresql,\n            sqlite,\n            current: this.currentDatabase\n        };\n    }\n    /**\n   * Получение текущей базы данных\n   */ getCurrentDatabase() {\n        return this.currentDatabase;\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С ПОЛЬЗОВАТЕЛЯМИ\n    // =====================================================\n    /**\n   * Создание пользователя\n   */ async createUser(userData) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.createUser(userData);\n    }\n    /**\n   * Получение пользователя по ID\n   */ async getUserById(id) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.getUserById(id);\n    }\n    /**\n   * Получение пользователя по email\n   */ async getUserByEmail(email) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.getUserByEmail(email);\n    }\n    /**\n   * Получение всех пользователей\n   */ async getAllUsers() {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.getAllUsers();\n    }\n    /**\n   * Получение пользователей (алиас для getAllUsers)\n   */ async getUsers() {\n        return await this.getAllUsers();\n    }\n    /**\n   * Обновление пользователя\n   */ async updateUser(id, updates) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.updateUser(id, updates);\n    }\n    /**\n   * Удаление пользователя\n   */ async deleteUser(id) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.deleteUser(id);\n    }\n    // =====================================================\n    // МЕТОДЫ ДЛЯ РАБОТЫ С СЕССИЯМИ\n    // =====================================================\n    async createSession(sessionData) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.createSession(sessionData);\n    }\n    async getSessionByToken(token) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.getSessionByToken(token);\n    }\n    async deleteSession(token) {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.deleteSession(token);\n    }\n    async deleteExpiredSessions() {\n        await this.ensureInitialized();\n        const adapter = this.getCurrentAdapter();\n        return await adapter.deleteExpiredSessions();\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С ПРОЕКТАМИ\n    // =====================================================\n    /**\n   * Создание проекта\n   */ async createProject(projectData) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.createProject(projectData) : await this.postgresqlAdapter.createProject({\n            name: projectData.name,\n            description: projectData.description || '',\n            created_by: projectData.created_by,\n            color: projectData.color,\n            icon_url: projectData.icon_url\n        });\n    }\n    /**\n   * Получение проекта по ID\n   */ async getProjectById(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getProjectById(id) : this.postgresqlAdapter.getProjectById(id);\n    }\n    /**\n   * Получение всех проектов\n   */ async getAllProjects() {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getAllProjects() : this.postgresqlAdapter.getAllProjects();\n    }\n    /**\n   * Получение проектов пользователя\n   */ async getUserProjects(userId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getUserProjects(userId) : this.postgresqlAdapter.getUserProjects(userId);\n    }\n    /**\n   * Получение проектов по ID создателя\n   */ async getProjectsByCreatorId(creatorId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getUserProjects(creatorId) : this.postgresqlAdapter.getUserProjects(creatorId);\n    }\n    /**\n   * Проверка доступа к проекту\n   */ async hasProjectAccess(userId, projectId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.hasProjectAccess(userId.toString(), projectId) : this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId);\n    }\n    /**\n   * Обновление проекта\n   */ async updateProject(id, updates) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.updateProject(id, updates) : this.postgresqlAdapter.updateProject(id, updates);\n    }\n    /**\n   * Удаление проекта\n   */ async deleteProject(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.deleteProject(id) : this.postgresqlAdapter.deleteProject(id);\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С ДОСКАМИ\n    // =====================================================\n    /**\n   * Создание доски\n   */ async createBoard(boardData) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.createBoard(boardData) : await this.postgresqlAdapter.createBoard(boardData);\n    }\n    /**\n   * Получение доски по ID\n   */ async getBoardById(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.getBoardById(id) : await this.postgresqlAdapter.getBoardById(id);\n    }\n    /**\n   * Получение досок проекта\n   */ async getProjectBoards(projectId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.getProjectBoards(projectId) : await this.postgresqlAdapter.getBoardsByProjectId(projectId);\n    }\n    /**\n   * Удаление доски\n   */ async deleteBoard(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.deleteBoard(id) : await this.postgresqlAdapter.deleteBoard(id);\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С КОЛОНКАМИ\n    // =====================================================\n    /**\n   * Получение колонок доски\n   */ async getBoardColumns(boardId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.getBoardColumns(boardId) : await this.postgresqlAdapter.getBoardColumns(boardId);\n    }\n    /**\n   * Создание колонки\n   */ async createColumn(columnData) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.createColumn(columnData) : await this.postgresqlAdapter.createColumn(columnData.name || columnData.title, columnData.board_id.toString(), columnData.position || 0, columnData.color, columnData.created_by);\n    }\n    /**\n   * Удаление колонки\n   */ async deleteColumn(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.deleteColumn(id) : await this.postgresqlAdapter.deleteColumn(id);\n    }\n    // =====================================================\n    // ОПЕРАЦИИ С ЗАДАЧАМИ\n    // =====================================================\n    /**\n   * Создание задачи\n   */ async createTask(taskData) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.createTask(taskData) : await this.postgresqlAdapter.createTask({\n            title: taskData.title,\n            description: taskData.description || '',\n            column_id: taskData.column_id,\n            assignee_id: taskData.assignee_id,\n            priority: taskData.priority || 'medium',\n            position: taskData.position || 0,\n            status: taskData.status || 'todo',\n            project_id: taskData.project_id,\n            board_id: taskData.board_id,\n            reporter_id: taskData.creator_id\n        });\n    }\n    /**\n   * Получение задач колонки\n   */ async getColumnTasks(columnId) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.getColumnTasks(columnId) : await this.postgresqlAdapter.getColumnTasks(columnId);\n    }\n    /**\n   * Удаление задачи\n   */ async deleteTask(id) {\n        await this.ensureInitialized();\n        return this.currentDatabase === 'sqlite' ? await this.sqliteAdapter.deleteTask(id) : await this.postgresqlAdapter.deleteTask(id);\n    }\n    /**\n   * Выполнение сырого SQL запроса (для совместимости с репозиториями)\n   */ async query(sql, params) {\n        await this.ensureInitialized();\n        if (this.currentDatabase === 'sqlite') {\n            const result = await this.sqliteAdapter.query(sql, params);\n            return result.rows;\n        } else {\n            const result = await this.postgresqlAdapter.query(sql, params);\n            return result.rows;\n        }\n    }\n}\n// Экспорт единственного экземпляра\nconst dbAdapter = DatabaseAdapter.getInstance();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database-adapter.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/postgresql-adapter.ts":
/*!***************************************!*\
  !*** ./src/lib/postgresql-adapter.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostgreSQLAdapter: () => (/* binding */ PostgreSQLAdapter),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getPostgreSQLAdapter: () => (/* binding */ getPostgreSQLAdapter)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n// Класс для работы с PostgreSQL\nclass PostgreSQLAdapter {\n    static{\n        this.instance = null;\n    }\n    constructor(config){\n        this.isInitialized = false;\n        this.config = config;\n        // Специальная настройка SSL для Supabase\n        let sslConfig = false;\n        if (config.ssl) {\n            // Если хост содержит supabase.co, используем специальные настройки SSL\n            if (config.host.includes('supabase.co')) {\n                sslConfig = {\n                    rejectUnauthorized: false,\n                    ca: undefined\n                };\n            } else {\n                sslConfig = {\n                    rejectUnauthorized: false\n                };\n            }\n        }\n        this.pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n            host: config.host,\n            port: config.port,\n            database: config.database,\n            user: config.user,\n            password: config.password,\n            ssl: sslConfig,\n            max: 20,\n            idleTimeoutMillis: 30000,\n            connectionTimeoutMillis: 2000\n        });\n    }\n    // Инициализация базы данных\n    async initialize() {\n        if (this.isInitialized) return;\n        try {\n            console.log('Initializing PostgreSQL adapter with config:', {\n                host: this.config.host,\n                port: this.config.port,\n                database: this.config.database,\n                user: this.config.user,\n                ssl: this.config.ssl\n            });\n            const client = await this.pool.connect();\n            // Проверяем подключение\n            await client.query('SELECT NOW()');\n            console.log('✅ PostgreSQL подключение установлено');\n            client.release();\n            this.isInitialized = true;\n        } catch (error) {\n            console.error('❌ Ошибка подключения к PostgreSQL:', error);\n            throw error;\n        }\n    }\n    // Закрытие пула соединений\n    async close() {\n        await this.pool.end();\n        this.isInitialized = false;\n    }\n    // Получение клиента для транзакций\n    async getClient() {\n        return await this.pool.connect();\n    }\n    // Конвертация SQL из SQLite формата (?) в PostgreSQL формат ($1, $2, ...)\n    convertSqlToPostgreSQL(sql) {\n        let paramIndex = 1;\n        return sql.replace(/\\?/g, ()=>`$${paramIndex++}`);\n    }\n    // Выполнение запроса\n    async query(text, params) {\n        const client = await this.pool.connect();\n        try {\n            // Конвертируем SQL из SQLite формата в PostgreSQL формат\n            const convertedSql = this.convertSqlToPostgreSQL(text);\n            console.log('Original SQL Query:', text);\n            console.log('Converted SQL Query:', convertedSql);\n            console.log('SQL Params:', params);\n            const result = await client.query(convertedSql, params);\n            return result;\n        } finally{\n            client.release();\n        }\n    }\n    // === МЕТОДЫ ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ===\n    async createUser(userData) {\n        const { email, name, role = 'user', password_hash, isApproved = false, avatar } = userData;\n        // Если password_hash не предоставлен, но есть пароль в виде строки, хешируем его\n        const userDataWithPassword = userData;\n        const hashedPassword = password_hash || (userDataWithPassword.password ? await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash(userDataWithPassword.password, 12) : await bcryptjs__WEBPACK_IMPORTED_MODULE_1___default().hash('defaultpassword', 12));\n        // Преобразуем isApproved в approval_status\n        const approvalStatus = isApproved ? 'approved' : 'pending';\n        const result = await this.query(`INSERT INTO users (email, password_hash, name, role, approval_status, avatar_url) \n       VALUES ($1, $2, $3, $4, $5, $6) \n       RETURNING *`, [\n            email,\n            hashedPassword,\n            name,\n            role,\n            approvalStatus,\n            avatar\n        ]);\n        const row = result.rows[0];\n        return {\n            id: row.id,\n            name: row.name,\n            email: row.email,\n            avatar: row.avatar_url,\n            role: row.role,\n            isApproved: row.approval_status === 'approved',\n            created_at: row.created_at,\n            updated_at: row.updated_at,\n            password_hash: row.password_hash\n        };\n    }\n    async getUserByEmail(email) {\n        const result = await this.query('SELECT * FROM users WHERE email = $1', [\n            email\n        ]);\n        const row = result.rows[0];\n        if (!row) return null;\n        // Маппинг полей базы данных в User интерфейс\n        return {\n            id: row.id,\n            name: row.name,\n            email: row.email,\n            avatar: row.avatar_url,\n            role: row.role || 'user',\n            isApproved: row.approval_status === 'approved',\n            created_at: row.created_at,\n            updated_at: row.updated_at,\n            password_hash: row.password_hash\n        };\n    }\n    async getUserById(id) {\n        const result = await this.query('SELECT * FROM users WHERE id = $1', [\n            id\n        ]);\n        const row = result.rows[0];\n        if (!row) return null;\n        console.log('User data:', row);\n        console.log('User isApproved:', row.approval_status === 'approved', 'type:', typeof (row.approval_status === 'approved'));\n        console.log('User role:', row.role);\n        console.log('Final isApproved:', row.approval_status === 'approved');\n        // Маппинг полей базы данных в User интерфейс\n        return {\n            id: row.id,\n            name: row.name,\n            email: row.email,\n            avatar: row.avatar_url,\n            role: row.role || 'user',\n            isApproved: row.approval_status === 'approved',\n            created_at: row.created_at,\n            updated_at: row.updated_at,\n            password_hash: row.password_hash\n        };\n    }\n    async updateUser(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id' && key !== 'created_at' && key !== 'updated_at');\n        if (fields.length === 0) {\n            return await this.getUserById(id);\n        }\n        // Маппинг полей интерфейса User в поля базы данных\n        const dbFields = fields.map((field)=>{\n            if (field === 'avatar') return 'avatar_url';\n            if (field === 'isApproved') return 'approval_status';\n            return field;\n        });\n        // Преобразуем значения для базы данных\n        const dbValues = fields.map((field)=>{\n            if (field === 'isApproved') {\n                return updates[field] ? 'approved' : 'pending';\n            }\n            return updates[field];\n        });\n        const setClause = dbFields.map((field, index)=>`${field} = $${index + 2}`).join(', ');\n        const result = await this.query(`UPDATE users SET ${setClause}, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING *`, [\n            id,\n            ...dbValues\n        ]);\n        const row = result.rows[0];\n        if (!row) return null;\n        return {\n            id: row.id,\n            name: row.name,\n            email: row.email,\n            avatar: row.avatar_url,\n            role: row.role,\n            isApproved: row.is_approved,\n            created_at: row.created_at,\n            updated_at: row.updated_at,\n            password_hash: row.password_hash\n        };\n    }\n    async getAllUsers() {\n        const result = await this.query('SELECT * FROM users ORDER BY created_at DESC');\n        return result.rows.map((row)=>({\n                id: row.id,\n                name: row.name,\n                email: row.email,\n                avatar: row.avatar_url,\n                role: row.role || 'user',\n                isApproved: row.approval_status === 'approved',\n                created_at: row.created_at,\n                updated_at: row.updated_at,\n                password_hash: row.password_hash\n            }));\n    }\n    async deleteUser(id) {\n        const result = await this.query('DELETE FROM users WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // === МЕТОДЫ ДЛЯ ПРОЕКТОВ ===\n    async createProject(projectData) {\n        console.log('🔍 PostgreSQL createProject called with:', projectData);\n        try {\n            // Конвертируем строковый ID в integer для PostgreSQL\n            const ownerIdInt = parseInt(projectData.created_by, 10);\n            if (isNaN(ownerIdInt)) {\n                throw new Error(`Invalid user ID: ${projectData.created_by}`);\n            }\n            const result = await this.query(`INSERT INTO projects (name, description, owner_id, color, icon, is_active, created_at, updated_at)\n       VALUES ($1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) RETURNING *`, [\n                projectData.name,\n                projectData.description,\n                ownerIdInt,\n                projectData.color || '#3B82F6',\n                projectData.icon_url || null,\n                true\n            ]);\n            const project = result.rows[0];\n            // Добавляем владельца проекта в project_members с ролью 'owner'\n            await this.query(`INSERT INTO project_members (project_id, user_id, role, joined_at)\n         VALUES ($1, $2, $3, CURRENT_TIMESTAMP)`, [\n                project.id,\n                ownerIdInt,\n                'owner'\n            ]);\n            // Преобразуем owner_id обратно в created_by для совместимости с API\n            const apiProject = {\n                ...project,\n                created_by: project.owner_id.toString(),\n                icon_url: project.icon\n            };\n            console.log('✅ PostgreSQL project created successfully with owner membership:', apiProject);\n            return apiProject;\n        } catch (error) {\n            console.error('❌ PostgreSQL createProject error:', error);\n            throw error;\n        }\n    }\n    async getProjectById(id) {\n        const result = await this.query('SELECT * FROM projects WHERE id = $1', [\n            id\n        ]);\n        const project = result.rows[0];\n        if (!project) return null;\n        return {\n            ...project,\n            created_by: project.owner_id.toString(),\n            icon_url: project.icon\n        };\n    }\n    async getProjectsByUserId(userId) {\n        // Конвертируем userId в integer для PostgreSQL\n        const userIdInt = parseInt(userId, 10);\n        if (isNaN(userIdInt)) {\n            console.error('Invalid userId for getProjectsByUserId:', userId);\n            return [];\n        }\n        const result = await this.query(`SELECT DISTINCT p.* FROM projects p \n       LEFT JOIN project_members pm ON p.id = pm.project_id \n       WHERE (p.owner_id = $1 OR pm.user_id = $1) \n       ORDER BY p.created_at DESC`, [\n            userIdInt\n        ]);\n        return result.rows.map((project)=>({\n                ...project,\n                created_by: project.owner_id.toString(),\n                icon_url: project.icon\n            }));\n    }\n    async getUserProjects(userId) {\n        return this.getProjectsByUserId(userId);\n    }\n    async getAllProjects() {\n        const result = await this.query('SELECT * FROM projects ORDER BY created_at DESC');\n        return result.rows.map((project)=>({\n                ...project,\n                created_by: project.owner_id.toString(),\n                icon_url: project.icon\n            }));\n    }\n    async updateProject(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id');\n        const values = fields.map((field)=>updates[field]);\n        const setClause = fields.map((field, index)=>`${field} = $${index + 2}`).join(', ');\n        if (fields.length === 0) {\n            return await this.getProjectById(id);\n        }\n        const result = await this.query(`UPDATE projects SET ${setClause} WHERE id = $1 RETURNING *`, [\n            id,\n            ...values\n        ]);\n        const project = result.rows[0];\n        if (!project) return null;\n        return {\n            ...project,\n            created_by: project.owner_id.toString(),\n            icon_url: project.icon\n        };\n    }\n    async deleteProject(id) {\n        const result = await this.query('DELETE FROM projects WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    async hasProjectAccess(userId, projectId) {\n        try {\n            // Конвертируем userId в integer для сравнения с PostgreSQL\n            const userIdInt = parseInt(userId, 10);\n            if (isNaN(userIdInt)) {\n                console.error('Invalid userId for access check:', userId);\n                return false;\n            }\n            // Проверяем, является ли пользователь владельцем проекта\n            const ownerResult = await this.query('SELECT owner_id FROM projects WHERE id = $1', [\n                projectId\n            ]);\n            if (ownerResult.rows.length === 0) {\n                return false; // Проект не найден\n            }\n            const projectOwner = ownerResult.rows[0].owner_id;\n            if (projectOwner === userIdInt) {\n                return true; // Пользователь является владельцем\n            }\n            // Проверяем членство в проекте\n            const memberResult = await this.query('SELECT 1 FROM project_members WHERE project_id = $1 AND user_id = $2', [\n                projectId,\n                userIdInt\n            ]);\n            return memberResult.rows.length > 0;\n        } catch (error) {\n            console.error('Error checking project access:', error);\n            return false;\n        }\n    }\n    // === МЕТОДЫ ДЛЯ ДОСОК ===\n    async createBoard(boardData) {\n        const result = await this.query(`INSERT INTO boards (name, description, project_id, created_by, created_at, updated_at) \n       VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) \n       RETURNING *`, [\n            boardData.name,\n            boardData.description || '',\n            boardData.project_id,\n            parseInt(boardData.created_by, 10)\n        ]);\n        return result.rows[0];\n    }\n    async getBoardById(id) {\n        const result = await this.query('SELECT * FROM boards WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getBoardsByProjectId(projectId) {\n        const result = await this.query(`SELECT b.* FROM boards b \n       JOIN projects p ON b.project_id = p.id \n       WHERE b.project_id = $1 \n       ORDER BY b.position ASC, b.created_at DESC`, [\n            projectId\n        ]);\n        return result.rows;\n    }\n    async updateBoard(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id');\n        const values = fields.map((field)=>updates[field]);\n        const setClause = fields.map((field, index)=>`${field} = $${index + 2}`).join(', ');\n        if (fields.length === 0) {\n            return await this.getBoardById(id);\n        }\n        const result = await this.query(`UPDATE boards SET ${setClause} WHERE id = $1 RETURNING *`, [\n            id,\n            ...values\n        ]);\n        return result.rows[0] || null;\n    }\n    async deleteBoard(id) {\n        const result = await this.query('DELETE FROM boards WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // === МЕТОДЫ ДЛЯ КОЛОНОК ===\n    async createColumn(title, boardId, position, color, createdBy) {\n        const result = await this.query(`INSERT INTO columns (title, board_id, position, color, settings, created_by) \n       VALUES ($1, $2, $3, $4, $5, $6) \n       RETURNING *`, [\n            title,\n            boardId,\n            position || 0,\n            color || '#6B7280',\n            '{}',\n            createdBy || null\n        ]);\n        return result.rows[0];\n    }\n    async getColumnById(id) {\n        const result = await this.query('SELECT * FROM columns WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getColumnsByBoardId(boardId) {\n        const result = await this.query('SELECT * FROM columns WHERE board_id = $1 ORDER BY position ASC, created_at DESC', [\n            boardId\n        ]);\n        return result.rows;\n    }\n    async updateColumn(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id');\n        const values = fields.map((field)=>updates[field]);\n        const setClause = fields.map((field, index)=>`${field} = $${index + 2}`).join(', ');\n        if (fields.length === 0) {\n            return await this.getColumnById(id);\n        }\n        const result = await this.query(`UPDATE columns SET ${setClause} WHERE id = $1 RETURNING *`, [\n            id,\n            ...values\n        ]);\n        return result.rows[0] || null;\n    }\n    async deleteColumn(id) {\n        const result = await this.query('DELETE FROM columns WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // === МЕТОДЫ ДЛЯ ЗАДАЧ ===\n    async createTask(taskData) {\n        const { title, description, status = 'todo', priority = 'medium', project_id, board_id, column_id, assignee_id, reporter_id, position = 0 } = taskData;\n        // Создаем задачу без assignee_id (используется отдельная таблица task_assignees)\n        const result = await this.query(`INSERT INTO tasks (title, description, status, priority, project_id, board_id, column_id, reporter_id, position) \n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) \n       RETURNING *`, [\n            title,\n            description,\n            status,\n            priority,\n            project_id,\n            board_id,\n            column_id,\n            reporter_id,\n            position\n        ]);\n        const task = result.rows[0];\n        // Если указан assignee_id, создаем запись в таблице task_assignees\n        if (assignee_id) {\n            await this.query(`INSERT INTO task_assignees (task_id, user_id, assigned_by) \n         VALUES ($1, $2, $3)`, [\n                task.id,\n                assignee_id,\n                reporter_id\n            ]);\n        }\n        return task;\n    }\n    async getTaskById(id) {\n        const result = await this.query('SELECT * FROM tasks WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    }\n    async getTasksByProjectId(projectId) {\n        const result = await this.query('SELECT * FROM tasks WHERE project_id = $1 ORDER BY position ASC, created_at DESC', [\n            projectId\n        ]);\n        return result.rows;\n    }\n    async getTasksByColumnId(columnId) {\n        const result = await this.query('SELECT * FROM tasks WHERE column_id = $1 ORDER BY position ASC, created_at DESC', [\n            columnId\n        ]);\n        return result.rows;\n    }\n    async updateTask(id, updates) {\n        const fields = Object.keys(updates).filter((key)=>key !== 'id');\n        const values = fields.map((field)=>updates[field]);\n        const setClause = fields.map((field, index)=>`${field} = $${index + 2}`).join(', ');\n        if (fields.length === 0) {\n            return await this.getTaskById(id);\n        }\n        const result = await this.query(`UPDATE tasks SET ${setClause} WHERE id = $1 RETURNING *`, [\n            id,\n            ...values\n        ]);\n        return result.rows[0] || null;\n    }\n    async deleteTask(id) {\n        const result = await this.query('DELETE FROM tasks WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    async getTaskAssignees(taskId) {\n        const result = await this.query(`SELECT u.id, u.username, u.email, ta.assigned_at \n       FROM task_assignees ta \n       JOIN users u ON ta.user_id = u.id \n       WHERE ta.task_id = $1`, [\n            taskId\n        ]);\n        return result.rows;\n    }\n    async assignTaskToUser(taskId, userId, assignedBy) {\n        try {\n            await this.query(`INSERT INTO task_assignees (task_id, user_id, assigned_by) \n         VALUES ($1, $2, $3) \n         ON CONFLICT (task_id, user_id) DO NOTHING`, [\n                taskId,\n                userId,\n                assignedBy\n            ]);\n            return true;\n        } catch (error) {\n            console.error('Error assigning task to user:', error);\n            return false;\n        }\n    }\n    async unassignTaskFromUser(taskId, userId) {\n        const result = await this.query('DELETE FROM task_assignees WHERE task_id = $1 AND user_id = $2', [\n            taskId,\n            userId\n        ]);\n        return result.rowCount > 0;\n    }\n    // === ДОПОЛНИТЕЛЬНЫЕ МЕТОДЫ ДЛЯ СОВМЕСТИМОСТИ ===\n    async getBoardColumns(boardId) {\n        return await this.getColumnsByBoardId(boardId);\n    }\n    async getColumnTasks(columnId) {\n        return await this.getTasksByColumnId(columnId);\n    }\n    // === МЕТОДЫ ДЛЯ СЕССИЙ ===\n    async createSession(sessionData) {\n        const result = await this.query('INSERT INTO sessions (session_token, user_id, expires_at) VALUES ($1, $2, $3) RETURNING *', [\n            sessionData.token,\n            sessionData.user_id,\n            sessionData.expires_at\n        ]);\n        const row = result.rows[0];\n        return {\n            id: row.id,\n            user_id: row.user_id,\n            token: row.session_token,\n            expires_at: row.expires_at,\n            created_at: row.created_at\n        };\n    }\n    async getSessionByToken(sessionToken) {\n        const result = await this.query('SELECT * FROM sessions WHERE session_token = $1 AND expires_at > NOW()', [\n            sessionToken\n        ]);\n        if (!result.rows[0]) return null;\n        const row = result.rows[0];\n        return {\n            id: row.id,\n            user_id: row.user_id,\n            token: row.session_token,\n            expires_at: row.expires_at,\n            created_at: row.created_at\n        };\n    }\n    async deleteSession(sessionToken) {\n        const result = await this.query('DELETE FROM sessions WHERE session_token = $1', [\n            sessionToken\n        ]);\n        return result.rowCount > 0;\n    }\n    async deleteUserSessions(userId) {\n        const result = await this.query('DELETE FROM sessions WHERE user_id = $1', [\n            userId\n        ]);\n        return result.rowCount;\n    }\n    async deleteExpiredSessions() {\n        const result = await this.query('DELETE FROM sessions WHERE expires_at <= NOW()');\n        return result.rowCount;\n    }\n    // === МЕТОДЫ ДЛЯ КОММЕНТАРИЕВ ===\n    async createComment(content, taskId, authorId) {\n        const result = await this.query(`INSERT INTO comments (content, task_id, author_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`, [\n            content,\n            taskId,\n            authorId\n        ]);\n        return result.rows[0];\n    }\n    async getCommentsByTaskId(taskId) {\n        const result = await this.query('SELECT * FROM comments WHERE task_id = $1 AND deleted_at IS NULL ORDER BY created_at', [\n            taskId\n        ]);\n        return result.rows;\n    }\n    async updateComment(id, content) {\n        const result = await this.query('UPDATE comments SET content = $2 WHERE id = $1 RETURNING *', [\n            id,\n            content\n        ]);\n        return result.rows[0] || null;\n    }\n    async deleteComment(id) {\n        const result = await this.query('UPDATE comments SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1', [\n            id\n        ]);\n        return result.rowCount > 0;\n    }\n    // === МЕТОДЫ ДЛЯ ТЕГОВ ===\n    async createTag(name, color, projectId) {\n        const result = await this.query(`INSERT INTO tags (name, color, project_id) \n       VALUES ($1, $2, $3) \n       RETURNING *`, [\n            name,\n            color,\n            projectId\n        ]);\n        return result.rows[0];\n    }\n    async getTagsByProjectId(projectId) {\n        const result = await this.query('SELECT * FROM tags WHERE project_id = $1 ORDER BY name', [\n            projectId\n        ]);\n        return result.rows;\n    }\n    async addTagToTask(taskId, tagId) {\n        try {\n            await this.query('INSERT INTO task_tags (task_id, tag_id) VALUES ($1, $2)', [\n                taskId,\n                tagId\n            ]);\n            return true;\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        } catch (error) {\n            return false;\n        }\n    }\n    async removeTagFromTask(taskId, tagId) {\n        const result = await this.query('DELETE FROM task_tags WHERE task_id = $1 AND tag_id = $2', [\n            taskId,\n            tagId\n        ]);\n        return result.rowCount > 0;\n    }\n    async getTagsByTaskId(taskId) {\n        const result = await this.query(`SELECT t.* FROM tags t \n       JOIN task_tags tt ON t.id = tt.tag_id \n       WHERE tt.task_id = $1`, [\n            taskId\n        ]);\n        return result.rows;\n    }\n    // Статический метод для получения экземпляра (Singleton)\n    static getInstance() {\n        if (!PostgreSQLAdapter.instance) {\n            const config = {\n                host: process.env.DB_HOST || 'localhost',\n                port: parseInt(process.env.DB_PORT || '5432'),\n                database: process.env.DB_NAME || 'encore_tasks',\n                user: process.env.DB_USER || 'postgres',\n                password: process.env.DB_PASSWORD || 'password',\n                ssl: false // Отключаем SSL для локального PostgreSQL\n            };\n            PostgreSQLAdapter.instance = new PostgreSQLAdapter(config);\n        }\n        return PostgreSQLAdapter.instance;\n    }\n}\n// Экспорт экземпляра адаптера\nlet dbAdapter = null;\nfunction getPostgreSQLAdapter() {\n    if (!dbAdapter) {\n        const config = {\n            host: process.env.DB_HOST || 'localhost',\n            port: parseInt(process.env.DB_PORT || '5432'),\n            database: process.env.DB_NAME || 'encore_tasks',\n            user: process.env.DB_USER || 'postgres',\n            password: process.env.DB_PASSWORD || 'password',\n            ssl: process.env.DB_SSL === 'true'\n        };\n        dbAdapter = new PostgreSQLAdapter(config);\n    }\n    return dbAdapter;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getPostgreSQLAdapter);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/postgresql-adapter.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "better-sqlite3":
/*!*********************************!*\
  !*** external "better-sqlite3" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("better-sqlite3");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/bcryptjs"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fauth%2Fregister%2Froute&page=%2Fapi%2Fauth%2Fregister%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fregister%2Froute.ts&appDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=E%3A%5CProjects%5Cencore-tasks%5Cencore-tasks-main&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();