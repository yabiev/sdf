const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001';
let authToken = '';
let projectId = '';
let boardId = '';

async function login() {
  console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
  const response = await fetch(`${BASE_URL}/api/auth/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      email: 'test@example.com',
      password: 'password123'
    })
  });
  
  const data = await response.json();
  if (data.success) {
    authToken = data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    return true;
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data);
    return false;
  }
}

async function createProject() {
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
  const response = await fetch(`${BASE_URL}/api/projects`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authToken}`
    },
    body: JSON.stringify({
      name: 'Test Project for Columns',
      description: 'Test project'
    })
  });
  
  const data = await response.json();
  if (data.success) {
    projectId = data.project.id;
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', projectId);
    return true;
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', data);
    return false;
  }
}

async function createBoard() {
  console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
  const response = await fetch(`${BASE_URL}/api/boards`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authToken}`
    },
    body: JSON.stringify({
      name: 'Test Board for Columns',
      description: 'Test board',
      project_id: projectId
    })
  });
  
  const data = await response.json();
  console.log('üìã –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', JSON.stringify(data, null, 2));
  
  if (data.success) {
    boardId = data.board.id;
    console.log('‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', boardId);
    return true;
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', data);
    return false;
  }
}

async function createColumn() {
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏...');
  console.log('üìä Board ID:', boardId);
  
  const response = await fetch(`${BASE_URL}/api/columns`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authToken}`
    },
    body: JSON.stringify({
      name: 'Test Column',
      board_id: boardId,
      position: 1
    })
  });
  
  console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
  console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));
  
  const text = await response.text();
  console.log('üìä –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', text);
  
  try {
    const data = JSON.parse(text);
    console.log('üìä –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(data, null, 2));
    
    if (data.success) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', data.column.id);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', data);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error.message);
    return false;
  }
}

async function runTest() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ API –∫–æ–ª–æ–Ω–æ–∫\n');
  
  if (!await login()) return;
  if (!await createProject()) return;
  if (!await createBoard()) return;
  await createColumn();
  
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}

runTest().catch(console.error);