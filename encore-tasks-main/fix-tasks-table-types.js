const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD
});

async function fixTasksTableTypes() {
  const client = await pool.connect();
  
  try {
    console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï TASKS');
    console.log('=' .repeat(60));
    
    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const sqlPath = path.join(__dirname, 'fix-tasks-table-types.sql');
    const sqlScript = fs.readFileSync(sqlPath, 'utf8');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlScript
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd && !cmd.startsWith('--') && cmd !== '');
    
    console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${commands.length}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      if (command.startsWith('--')) {
        continue;
      }
      
      try {
        console.log(`\n‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${commands.length}...`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if (command.includes('DELETE FROM tasks')) {
          console.log('   üìã –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks');
        } else if (command.includes('ALTER TABLE tasks ALTER COLUMN') && command.includes('board_id')) {
          console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ board_id —Å integer –Ω–∞ UUID');
        } else if (command.includes('ALTER TABLE tasks ALTER COLUMN') && command.includes('reporter_id')) {
          console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ reporter_id —Å integer –Ω–∞ UUID');
        } else if (command.includes('ALTER TABLE tasks ALTER COLUMN') && command.includes('assignee_id')) {
          console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ assignee_id —Å integer –Ω–∞ UUID');
        } else if (command.includes('ALTER TABLE tasks ALTER COLUMN') && command.includes('parent_task_id')) {
          console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ parent_task_id —Å integer –Ω–∞ UUID');
        } else if (command.includes('ADD COLUMN created_by')) {
          console.log('   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è created_by —Ç–∏–ø–∞ UUID');
        } else if (command.includes('ADD CONSTRAINT') && command.includes('fk_tasks_board_id')) {
          console.log('   üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è board_id');
        } else if (command.includes('ADD CONSTRAINT') && command.includes('fk_tasks_reporter_id')) {
          console.log('   üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è reporter_id');
        } else if (command.includes('ADD CONSTRAINT') && command.includes('fk_tasks_assignee_id')) {
          console.log('   üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è assignee_id');
        } else if (command.includes('ADD CONSTRAINT') && command.includes('fk_tasks_created_by')) {
          console.log('   üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è created_by');
        } else if (command.includes('ADD CONSTRAINT') && command.includes('fk_tasks_parent_task_id')) {
          console.log('   üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ –¥–ª—è parent_task_id');
        } else if (command.includes('CREATE INDEX')) {
          console.log('   üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        } else if (command.includes('SELECT')) {
          console.log('   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        } else {
          console.log(`   ‚öôÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command.substring(0, 50)}...`);
        }
        
        const result = await client.query(command);
        
        // –ï—Å–ª–∏ —ç—Ç–æ SELECT –∑–∞–ø—Ä–æ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (command.trim().toUpperCase().startsWith('SELECT')) {
          console.log('   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
          if (result.rows.length > 0) {
            result.rows.forEach((row, index) => {
              console.log(`      ${index + 1}. ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
            });
          } else {
            console.log('      –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
          }
        } else {
          console.log(`   ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–∑–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: ${result.rowCount || 0})`);
        }
        
      } catch (error) {
        // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') || 
            error.message.includes('already exists') ||
            error.message.includes('duplicate key')) {
          console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ${error.message}`);
        } else {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        }
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ TASKS:');
    const finalCheck = await client.query(`
      SELECT 
        column_name, 
        data_type, 
        is_nullable, 
        column_default
      FROM information_schema.columns
      WHERE table_name = 'tasks' 
        AND column_name IN ('board_id', 'reporter_id', 'assignee_id', 'parent_task_id', 'created_by')
      ORDER BY column_name
    `);
    
    if (finalCheck.rows.length > 0) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
      finalCheck.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    console.log('\nüîó –ü–†–û–í–ï–†–ö–ê –í–ù–ï–®–ù–ò–• –ö–õ–Æ–ß–ï–ô:');
    const foreignKeysCheck = await client.query(`
      SELECT 
        tc.constraint_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_name = 'tasks'
        AND kcu.column_name IN ('board_id', 'reporter_id', 'assignee_id', 'parent_task_id', 'created_by')
      ORDER BY kcu.column_name
    `);
    
    if (foreignKeysCheck.rows.length > 0) {
      console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:');
      foreignKeysCheck.rows.forEach((fk, index) => {
        console.log(`   ${index + 1}. ${fk.column_name} -> ${fk.foreign_table_name}.${fk.foreign_column_name}`);
      });
    } else {
      console.log('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    client.release();
    
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –í—Å–µ –ø–æ–ª—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç UUID —Ç–∏–ø—ã');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ created_by');
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –¥–ª—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error(`   ${error.message}`);
    throw error;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if (require.main === module) {
  fixTasksTableTypes()
    .then(() => {
      console.log('\nüèÅ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}