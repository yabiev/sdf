const puppeteer = require('puppeteer');

(async () => {
  console.log('üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  let browser;
  try {
    browser = await puppeteer.launch({ 
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized', '--no-sandbox']
    });
    
    const page = await browser.newPage();
    
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { 
      waitUntil: 'networkidle2',
      timeout: 15000
    });
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥" –ø–æ —Ç–µ–∫—Å—Ç—É
    const loginButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.find(btn => btn.textContent.includes('–í—Ö–æ–¥'));
    });
    
    if (loginButton) {
      console.log('üìù –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥"...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const btn = buttons.find(btn => btn.textContent.includes('–í—Ö–æ–¥'));
        if (btn) btn.click();
      });
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    console.log('üìß –ó–∞–ø–æ–ª–Ω—è–µ–º email...');
    const emailInput = await page.$('input[type="email"]');
    if (emailInput) {
      await emailInput.click();
      await emailInput.type('test@example.com');
      console.log('‚úÖ Email –≤–≤–µ–¥–µ–Ω');
    }
    
    console.log('üîí –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–æ–ª—å...');
    const passwordInput = await page.$('input[type="password"]');
    if (passwordInput) {
      await passwordInput.click();
      await passwordInput.type('password123');
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
    }
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"
    console.log('üö™ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"...');
    const submitClicked = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const btn = buttons.find(btn => btn.textContent.includes('–í–æ–π—Ç–∏'));
      if (btn) {
        btn.click();
        return true;
      }
      return false;
    });
    
    if (submitClicked) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–∞–∂–∞—Ç–∞');
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
    const currentUrl = page.url();
    console.log('üåê –¢–µ–∫—É—â–∏–π URL:', currentUrl);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageText = await page.evaluate(() => {
      return document.body.textContent || '';
    });
    
    console.log('üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(pageText.substring(0, 800));
    
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button, a[role="button"], input[type="button"], input[type="submit"]'));
      return buttons.map(btn => ({
        tag: btn.tagName,
        text: btn.textContent?.trim() || btn.value || '',
        className: btn.className || '',
        id: btn.id || '',
        href: btn.href || ''
      })).filter(btn => btn.text.length > 0);
    });
    
    console.log('\nüîò –í—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:');
    allButtons.forEach((btn, i) => {
      console.log(`  ${i + 1}. ${btn.tag}: "${btn.text}" (class: ${btn.className})`);
    });
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    console.log('\nüîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button, a'));
      const createTexts = [
        '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', 'Create Project', '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', 'New Project',
        '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', 'Add Project', '—Å–æ–∑–¥–∞—Ç—å', 'create', '–Ω–æ–≤—ã–π', 'new',
        '–¥–æ–±–∞–≤–∏—Ç—å', 'add', '+'
      ];
      
      for (const btn of buttons) {
        const text = btn.textContent?.toLowerCase() || '';
        const className = btn.className?.toLowerCase() || '';
        
        for (const createText of createTexts) {
          if (text.includes(createText.toLowerCase()) || className.includes(createText.toLowerCase())) {
            return {
              found: true,
              text: btn.textContent?.trim(),
              className: btn.className,
              tag: btn.tagName
            };
          }
        }
      }
      return { found: false };
    });
    
    if (createButton.found) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: "${createButton.text}" (${createButton.tag})`);
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      console.log('üéØ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
      const clicked = await page.evaluate((buttonText) => {
        const buttons = Array.from(document.querySelectorAll('button, a'));
        const btn = buttons.find(b => b.textContent?.trim() === buttonText);
        if (btn) {
          btn.click();
          return true;
        }
        return false;
      }, createButton.text);
      
      if (clicked) {
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        const formFound = await page.evaluate(() => {
          const forms = document.querySelectorAll('form, .modal, .dialog, [role="dialog"]');
          return forms.length > 0;
        });
        
        if (formFound) {
          console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞!');
          
          // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
          const nameInput = await page.$('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="name"], input[placeholder*="–ø—Ä–æ–µ–∫—Ç"]');
          const descInput = await page.$('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="description"]');
          
          if (nameInput) {
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
            await nameInput.click();
            await nameInput.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now());
          }
          
          if (descInput) {
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
            await descInput.click();
            await descInput.type('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
          }
          
          // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          const saveButton = await page.evaluate(() => {
            const buttons = Array.from(document.querySelectorAll('button, input[type="submit"]'));
            const saveTexts = ['–°–æ–∑–¥–∞—Ç—å', 'Create', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'Save'];
            
            for (const btn of buttons) {
              const text = btn.textContent?.trim() || btn.value || '';
              for (const saveText of saveTexts) {
                if (text.includes(saveText)) {
                  return {
                    found: true,
                    text: text
                  };
                }
              }
            }
            return { found: false };
          });
          
          if (saveButton.found) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "${saveButton.text}"`);
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç...');
            
            const saved = await page.evaluate((buttonText) => {
              const buttons = Array.from(document.querySelectorAll('button, input[type="submit"]'));
              const btn = buttons.find(b => (b.textContent?.trim() || b.value || '').includes(buttonText));
              if (btn) {
                btn.click();
                return true;
              }
              return false;
            }, saveButton.text);
            
            if (saved) {
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const finalPageText = await page.evaluate(() => {
                return document.body.textContent || '';
              });
              
              if (finalPageText.includes('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç') || finalPageText.includes('—É—Å–ø–µ—à–Ω–æ') || finalPageText.includes('—Å–æ–∑–¥–∞–Ω')) {
                console.log('üéâ –£–°–ü–ï–•! –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
              } else {
                console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
              }
              
              console.log('üìÑ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
              console.log(finalPageText.substring(0, 1000));
            }
          } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
        } else {
          console.log('‚ùå –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å');
        }
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–ª–∏ –º–µ–Ω—é
      console.log('üîç –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...');
      const navElements = await page.evaluate(() => {
        const navs = Array.from(document.querySelectorAll('nav, .nav, .navigation, .menu, .header, .sidebar, [role="navigation"]'));
        return navs.map(nav => ({
          tag: nav.tagName,
          text: nav.textContent?.trim().substring(0, 200) || '',
          className: nav.className || ''
        }));
      });
      
      console.log('üß≠ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
      navElements.forEach((nav, i) => {
        console.log(`  ${i + 1}. ${nav.tag}: "${nav.text}" (class: ${nav.className})`);
      });
    }
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    if (browser) {
      await browser.close();
      console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
})();