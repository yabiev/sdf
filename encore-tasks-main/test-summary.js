const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
let authToken = null;
let authCookies = null;

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'testpassword123',
  name: 'Test User'
};

async function runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤\n');
    
    const results = {
        passed: 0,
        failed: 0,
        tests: []
    };

    // –¢–µ—Å—Ç 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    try {
        const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
            email: testUser.email,
            password: testUser.password
        });
        
        if (loginResponse.status === 200 && loginResponse.data.token) {
            authToken = loginResponse.data.token;
            authCookies = loginResponse.headers['set-cookie'];
            console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', authToken ? '–î–∞' : '–ù–µ—Ç');
            console.log('üç™ Cookies –ø–æ–ª—É—á–µ–Ω—ã:', authCookies ? '–î–∞' : '–ù–µ—Ç');
            results.passed++;
            results.tests.push({ name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', status: '–ü–†–û–ô–î–ï–ù' });
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    } catch (error) {
        results.failed++;
        results.tests.push({ name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
        const projectData = {
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now(),
            description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
            color: '#3B82F6',
            icon: 'üìã'
        };

        const headers = {
            'Content-Type': 'application/json'
        };
        
        if (authToken) {
            headers['Authorization'] = `Bearer ${authToken}`;
        }
        
        const config = { headers };
        if (authCookies) {
            config.headers['Cookie'] = authCookies.join('; ');
        }

        const createResponse = await axios.post(`${BASE_URL}/api/projects`, projectData, config);

        if (createResponse.status === 201 && createResponse.data.data?.id) {
            results.passed++;
            results.tests.push({ name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: '–ü–†–û–ô–î–ï–ù', projectId: createResponse.data.data.id });
        } else {
            throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID');
        }
    } catch (error) {
        results.failed++;
        results.tests.push({ name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
    }

    // –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try {
        const invalidData = {
            name: '', // –ø—É—Å—Ç–æ–µ –∏–º—è
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            color: 'invalid-color',
            icon: 'üìã'
        };

        const response = await axios.post(`${BASE_URL}/api/projects`, invalidData, {
            headers: { Authorization: `Bearer ${authToken}` }
        });

        if (response.status >= 400) {
            results.passed++;
            results.tests.push({ name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', status: '–ü–†–û–ô–î–ï–ù' });
        } else {
            throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞');
        }
    } catch (error) {
        if (error.response && error.response.status >= 400) {
            results.passed++;
            results.tests.push({ name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', status: '–ü–†–û–ô–î–ï–ù' });
        } else {
            results.failed++;
            results.tests.push({ name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        }
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    try {
        const headers = {};
        
        if (authToken) {
            headers['Authorization'] = `Bearer ${authToken}`;
        }
        
        const config = { headers };
        if (authCookies) {
            config.headers['Cookie'] = authCookies.join('; ');
        }
        
        const listResponse = await axios.get(`${BASE_URL}/api/projects`, config);

        if (listResponse.status === 200 && Array.isArray(listResponse.data.data)) {
            results.passed++;
            results.tests.push({ name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', status: '–ü–†–û–ô–î–ï–ù', count: listResponse.data.data.length });
        } else {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
        }
    } catch (error) {
        results.failed++;
        results.tests.push({ name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
    }

    // –¢–µ—Å—Ç 5: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try {
        const response = await axios.post(`${BASE_URL}/api/auth/login`, {
            email: 'wrong@example.com',
            password: 'wrongpassword'
        });

        if (response.status >= 400) {
            results.passed++;
            results.tests.push({ name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', status: '–ü–†–û–ô–î–ï–ù' });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
        }
    } catch (error) {
        if (error.response && error.response.status >= 400) {
            results.passed++;
            results.tests.push({ name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', status: '–ü–†–û–ô–î–ï–ù' });
        } else {
            results.failed++;
            results.tests.push({ name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', status: '–ü–†–û–í–ê–õ–ï–ù', error: error.message });
        }
    }

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.log('=' .repeat(50));
    
    results.tests.forEach((test, index) => {
        const status = test.status === '–ü–†–û–ô–î–ï–ù' ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}. ${status} ${test.name} - ${test.status}`);
        if (test.error) {
            console.log(`   –û—à–∏–±–∫–∞: ${test.error}`);
        }
        if (test.projectId) {
            console.log(`   ID –ø—Ä–æ–µ–∫—Ç–∞: ${test.projectId}`);
        }
        if (test.count !== undefined) {
            console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${test.count}`);
        }
    });
    
    console.log('\n' + '='.repeat(50));
    console.log(`üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`);
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`);
    console.log(`   üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${results.passed + results.failed}`);
    console.log(`   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((results.passed / (results.passed + results.failed)) * 100)}%`);
    
    if (results.failed > 0) {
        console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã');
        console.log('   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000');
        console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    } else {
        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        console.log('   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    }
}

runTests().catch(console.error);