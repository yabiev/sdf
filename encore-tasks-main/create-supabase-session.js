const { createClient } = require('@supabase/supabase-js');
const jwt = require('jsonwebtoken');

console.log('=== –°–û–ó–î–ê–ù–ò–ï –°–ï–°–°–ò–ò –í SUPABASE ===');

// Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const supabaseUrl = 'https://itzprrsqfklkkjeubiot.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml0enBycnNxZmtsa2tqZXViaW90Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTUyMTYyMSwiZXhwIjoyMDcxMDk3NjIxfQ.Crer8i5hJFAl2eFzyYVY7cVT6h2f776Y2LC70heH6Xw';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// JWT Secret
const JWT_SECRET = 'your-jwt-secret-key-development';

async function createSession() {
  try {
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º ID
    const targetUserId = '3a028dd5-5327-457a-b8d4-11c7e2c706ce';
    
    let { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', targetUserId)
      .single();
    
    if (userError || !user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID', targetUserId, '–Ω–µ –Ω–∞–π–¥–µ–Ω:', userError?.message);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: anyUser, error: anyUserError } = await supabase
        .from('users')
        .select('*')
        .limit(1)
        .single();
        
      if (anyUserError || !anyUser) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', anyUserError?.message);
        return;
      }
      user = anyUser;
      console.log('üìã –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.email);
    }
    
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.email);
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = {
      userId: user.id,
      email: user.email,
      role: user.role || 'user',
      name: user.name,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 —á–∞—Å–∞
    };
    
    const jwtToken = jwt.sign(payload, JWT_SECRET);
    console.log('üîë –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω:', jwtToken);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: deleteError } = await supabase
      .from('sessions')
      .delete()
      .eq('user_id', user.id);
    
    if (deleteError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π:', deleteError.message);
    } else {
      console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    const createdAt = new Date();
    
    const { data: session, error: insertError } = await supabase
      .from('sessions')
      .insert({
        session_token: jwtToken,
        user_id: user.id,
        expires_at: expiresAt.toISOString(),
        created_at: createdAt.toISOString()
      })
      .select()
      .single();
    
    if (insertError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', insertError.message);
      return;
    }
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const { data: checkSession, error: checkError } = await supabase
      .from('sessions')
      .select('*')
      .eq('session_token', jwtToken)
      .single();
    
    if (checkError || !checkSession) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:', checkError?.message);
    } else {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î:', {
        session_token: checkSession.session_token.substring(0, 50) + '...',
        user_id: checkSession.user_id,
        expires_at: checkSession.expires_at
      });
    }
    
    console.log('\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(jwtToken);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

createSession();