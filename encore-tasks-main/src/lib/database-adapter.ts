// =====================================================
// –ê–î–ê–ü–¢–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–• (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
// =====================================================

import { User, Project, Board, Column, Task, Session } from '@/types';
import { PostgreSQLAdapter } from './postgresql-adapter';
// SQLite –∞–¥–∞–ø—Ç–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
// import { SQLiteAdapter } from './sqlite-adapter';

// =====================================================
// –¢–ò–ü–´ –î–ê–ù–ù–´–•
// =====================================================

export type DatabaseType = 'postgresql' | 'sqlite';

export interface DatabaseStatus {
  postgresql: boolean;
  sqlite: boolean;
  current: DatabaseType;
}

// =====================================================
// –ö–õ–ê–°–° –ê–î–ê–ü–¢–ï–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
// =====================================================

export class DatabaseAdapter {
  private static instance: DatabaseAdapter;
  private currentDatabase: DatabaseType = 'postgresql';
  private isInitialized = false;
  private postgresqlAdapter: PostgreSQLAdapter;
  private sqliteAdapter: any = null; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
  private initializationPromise: Promise<void> | null = null;

  private constructor() {
    this.postgresqlAdapter = PostgreSQLAdapter.getInstance();
    // SQLite –∞–¥–∞–ø—Ç–µ—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    this.currentDatabase = 'postgresql'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  public static getInstance(): DatabaseAdapter {
    if (!DatabaseAdapter.instance) {
      DatabaseAdapter.instance = new DatabaseAdapter();
    }
    return DatabaseAdapter.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      return;
    }

    if (this.initializationPromise) {
      return this.initializationPromise;
    }

    this.initializationPromise = this.performInitialization();
    return this.initializationPromise;
  }

  private async performInitialization(): Promise<void> {
    const databasePriority = process.env.DATABASE_PRIORITY || 'postgresql';
    console.log(`üîß DATABASE_PRIORITY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: ${databasePriority}`);
    
    if (databasePriority === 'sqlite') {
      try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SQLite –∞–¥–∞–ø—Ç–µ—Ä
        if (!this.sqliteAdapter) {
          const { SQLiteAdapter } = await import('./sqlite-adapter');
          this.sqliteAdapter = SQLiteAdapter.getInstance();
        }
        await this.sqliteAdapter.initialize();
        this.currentDatabase = 'sqlite';
        this.isInitialized = true;
        console.log('‚úÖ Database Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SQLite');
        return;
      } catch (sqliteError) {
        console.warn('‚ö†Ô∏è SQLite –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ PostgreSQL:', sqliteError);
        // Fallback –Ω–∞ PostgreSQL
        try {
          await this.postgresqlAdapter.initialize();
          this.currentDatabase = 'postgresql';
          this.isInitialized = true;
          console.log('‚úÖ Database Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å PostgreSQL (fallback)');
          return;
        } catch (postgresError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:', { sqliteError, postgresError });
          this.initializationPromise = null;
          throw postgresError;
        }
      }
    } else {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL
        await this.postgresqlAdapter.initialize();
        this.currentDatabase = 'postgresql';
        this.isInitialized = true;
        console.log('‚úÖ Database Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å PostgreSQL');
      } catch (postgresError) {
        console.warn('‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ SQLite:', postgresError);
        try {
          // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SQLite –∞–¥–∞–ø—Ç–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          if (!this.sqliteAdapter) {
            const { SQLiteAdapter } = await import('./sqlite-adapter');
            this.sqliteAdapter = SQLiteAdapter.getInstance();
          }
          // Fallback –Ω–∞ SQLite
          await this.sqliteAdapter.initialize();
          this.currentDatabase = 'sqlite';
          this.isInitialized = true;
          console.log('‚úÖ Database Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å SQLite (fallback)');
        } catch (sqliteError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–µ–∏—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:', { postgresError, sqliteError });
          this.initializationPromise = null;
          throw sqliteError;
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  private async ensureInitialized(): Promise<void> {
    if (!this.isInitialized) {
      await this.initialize();
    }
    console.log(`üîç DatabaseAdapter: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${this.currentDatabase}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private getCurrentAdapter() {
    if (this.currentDatabase === 'sqlite') {
      if (!this.sqliteAdapter) {
        throw new Error('SQLite adapter not loaded');
      }
      return this.sqliteAdapter;
    }
    return this.postgresqlAdapter;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public async getDatabaseStatus(): Promise<DatabaseStatus> {
    const postgresql = await Promise.resolve(this.postgresqlAdapter.initialize()).then(() => true).catch(() => false);
    let sqlite = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–∞–ø—Ç–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω
    if (this.sqliteAdapter) {
      sqlite = await Promise.resolve(this.sqliteAdapter.initialize()).then(() => true).catch(() => false);
    }
    
    return {
      postgresql,
      sqlite,
      current: this.currentDatabase
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public getCurrentDatabase(): DatabaseType {
    return this.currentDatabase;
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.createUser(userData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  public async getUserById(id: string): Promise<User | null> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.getUserById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  public async getUserByEmail(email: string): Promise<User | null> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.getUserByEmail(email);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public async getAllUsers(): Promise<User[]> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.getAllUsers();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–ª–∏–∞—Å –¥–ª—è getAllUsers)
   */
  public async getUsers(): Promise<User[]> {
    return await this.getAllUsers();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.updateUser(id, updates);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async deleteUser(id: string): Promise<boolean> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.deleteUser(id);
  }

  // =====================================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–Ø–ú–ò
  // =====================================================

  public async createSession(sessionData: Omit<Session, 'id' | 'created_at' | 'updated_at'>): Promise<Session> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.createSession(sessionData);
  }

  public async getSessionByToken(token: string): Promise<Session | null> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.getSessionByToken(token);
  }

  public async deleteSession(token: string): Promise<boolean> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.deleteSession(token);
  }

  public async deleteExpiredSessions(): Promise<number> {
    await this.ensureInitialized();
    const adapter = this.getCurrentAdapter();
    return await adapter.deleteExpiredSessions();
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ï–ö–¢–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.createProject(projectData) : 
      await this.postgresqlAdapter.createProject({
        name: projectData.name,
        description: projectData.description || '',
        created_by: projectData.created_by,
        color: projectData.color,
        icon_url: projectData.icon_url,
        telegram_chat_id: projectData.telegram_chat_id,
        telegram_topic_id: projectData.telegram_topic_id
      });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
   */
  public async getProjectById(id: string): Promise<Project | null> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getProjectById(id) : this.postgresqlAdapter.getProjectById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
   */
  public async getAllProjects(): Promise<Project[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getAllProjects() : this.postgresqlAdapter.getAllProjects();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async getUserProjects(userId: string): Promise<Project[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getUserProjects(userId) : this.postgresqlAdapter.getUserProjects(userId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
   */
  public async getProjectsByCreatorId(creatorId: string): Promise<Project[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.getUserProjects(creatorId) : this.postgresqlAdapter.getUserProjects(creatorId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
   */
  public async hasProjectAccess(userId: string | number, projectId: string): Promise<boolean> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.hasProjectAccess(userId.toString(), projectId) : this.postgresqlAdapter.hasProjectAccess(userId.toString(), projectId);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.updateProject(id, updates) : this.postgresqlAdapter.updateProject(id, updates);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async deleteProject(id: string): Promise<boolean> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? this.sqliteAdapter.deleteProject(id) : this.postgresqlAdapter.deleteProject(id);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –î–û–°–ö–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
   */
  public async createBoard(boardData: Omit<Board, 'id' | 'created_at' | 'updated_at'>): Promise<Board> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.createBoard(boardData) : 
      await this.postgresqlAdapter.createBoard(boardData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–∫–∏ –ø–æ ID
   */
  public async getBoardById(id: string): Promise<Board | null> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.getBoardById(id) : 
      await this.postgresqlAdapter.getBoardById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async getProjectBoards(projectId: string): Promise<Board[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.getProjectBoards(projectId) : 
      await this.postgresqlAdapter.getBoardsByProjectId(projectId);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
   */
  public async deleteBoard(id: string): Promise<boolean> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.deleteBoard(id) : 
      await this.postgresqlAdapter.deleteBoard(id);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–õ–û–ù–ö–ê–ú–ò
  // =====================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏
   */
  public async getBoardColumns(boardId: string): Promise<Column[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.getBoardColumns(boardId) : 
      await this.postgresqlAdapter.getBoardColumns(boardId);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
   */
  public async createColumn(columnData: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.createColumn(columnData) : 
      await this.postgresqlAdapter.createColumn(
        columnData.name || columnData.title, 
        columnData.board_id.toString(), 
        columnData.position || 0, 
        columnData.color, 
        columnData.created_by
      );
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
   */
  public async deleteColumn(id: string): Promise<boolean> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.deleteColumn(id) : 
      await this.postgresqlAdapter.deleteColumn(id);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async createTask(taskData: Omit<Task, 'id' | 'created_at' | 'updated_at'>): Promise<Task> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.createTask(taskData) : 
      await this.postgresqlAdapter.createTask({
        title: taskData.title,
        description: taskData.description || '',
        column_id: taskData.column_id,
        assignee_id: taskData.assignee_id,
        priority: taskData.priority || 'medium',
        position: taskData.position || 0,
        status: taskData.status || 'todo',
        project_id: taskData.project_id,
        board_id: taskData.board_id,
        reporter_id: taskData.creator_id
      });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–ª–æ–Ω–∫–∏
   */
  public async getColumnTasks(columnId: string): Promise<Task[]> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.getColumnTasks(columnId) : 
      await this.postgresqlAdapter.getColumnTasks(columnId);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async deleteTask(id: string): Promise<boolean> {
    await this.ensureInitialized();
    return this.currentDatabase === 'sqlite' ? 
      await this.sqliteAdapter.deleteTask(id) : 
      await this.postgresqlAdapter.deleteTask(id);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏)
   */
  public async query(sql: string, params?: unknown[]): Promise<unknown[]> {
    await this.ensureInitialized();
    if (this.currentDatabase === 'sqlite') {
      const result = await this.sqliteAdapter.query(sql, params);
      return result.rows;
    } else {
      const result = await this.postgresqlAdapter.query(sql, params);
      return result.rows;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const dbAdapter = DatabaseAdapter.getInstance();
