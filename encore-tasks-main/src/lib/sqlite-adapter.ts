// =====================================================
// SQLite –ê–î–ê–ü–¢–ï–† –î–õ–Ø –í–†–ï–ú–ï–ù–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
// =====================================================

import Database from 'better-sqlite3';
import { User, Project, Board, Column, Task, Session } from '../types';
import bcrypt from 'bcrypt';
import { v4 as uuidv4 } from 'uuid';

import * as path from 'path';

export class SQLiteAdapter {
  private static instance: SQLiteAdapter;
  private db: Database.Database;
  private isInitialized = false;

  private constructor() {
    const dbPath = path.join(process.cwd(), 'database.sqlite');
    this.db = new Database(dbPath);
  }

  public static getInstance(): SQLiteAdapter {
    if (!SQLiteAdapter.instance) {
      SQLiteAdapter.instance = new SQLiteAdapter();
    }
    return SQLiteAdapter.instance;
  }

  public async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
      const tables = this.db.prepare(
        "SELECT name FROM sqlite_master WHERE type='table'"
      ).all();
      
      console.log('‚úÖ SQLite –∞–¥–∞–ø—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', (tables as { name: string }[]).map(t => t.name));
      
      this.isInitialized = true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite –∞–¥–∞–ø—Ç–µ—Ä–∞:', error);
      throw error;
    }
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  // =====================================================

  public async createUser(userData: Partial<User>): Promise<User> {
    try {
      const id = uuidv4();
      const now = new Date().toISOString();

      const {
        email,
        name,
        avatar,
        role = 'user',
        isApproved = false,
        password_hash
      } = userData;

      const stmt = this.db.prepare(`
        INSERT INTO users (id, email, name, avatar_url, role, approval_status, password_hash, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º isApproved –≤ —á–∏—Å–ª–æ –¥–ª—è approval_status (BOOLEAN –≤ SQLite)
      const approvalStatus = isApproved ? 1 : 0;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º avatar –∫–∞–∫ avatar_url –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º–µ SQLite
      stmt.run(id, email, name, avatar || null, role, approvalStatus, password_hash, now, now);

      return {
        id,
        email: email || '',
        name: name || '',
        avatar,
        role,
        isApproved,
        created_at: now,
        updated_at: now
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw new Error(`Failed to create user: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getUserById(id: string): Promise<User | null> {
    try {
      const stmt = this.db.prepare('SELECT * FROM users WHERE id = ?');
      const dbUser = stmt.get(id) as {
        id: string;
        name?: string;
        username?: string;
        email: string;
        avatar?: string;
        avatar_url?: string;
        role?: string;
        isApproved?: boolean;
        is_approved?: boolean;
        approval_status?: boolean;
        lastLoginAt?: string;
        last_login_at?: string;
        created_at: string;
        updated_at: string;
        password_hash?: string;
      } | undefined;
      
      if (!dbUser) return null;
    
    return {
      id: dbUser.id,
      name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],
      email: dbUser.email,
      avatar: dbUser.avatar || dbUser.avatar_url,
      role: (dbUser.role as 'admin' | 'manager' | 'user') || 'user',
      isApproved: dbUser.isApproved || dbUser.is_approved || dbUser.approval_status,
      lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,
      created_at: dbUser.created_at,
      updated_at: dbUser.updated_at,
      password_hash: dbUser.password_hash
    };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error);
      throw new Error(`Failed to get user by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getUserByEmail(email: string): Promise<User | null> {
    try {
      const stmt = this.db.prepare('SELECT * FROM users WHERE email = ?');
      const dbUser = stmt.get(email) as {
        id: string;
        name?: string;
        username?: string;
        email: string;
        avatar?: string;
        avatar_url?: string;
        role?: string;
        isApproved?: boolean;
        is_approved?: boolean;
        approval_status?: boolean;
        lastLoginAt?: string;
        last_login_at?: string;
        created_at: string;
        updated_at: string;
        password_hash?: string;
      } | undefined;
      
      if (!dbUser) return null;
    
    return {
      id: dbUser.id,
      name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],
      email: dbUser.email,
      avatar: dbUser.avatar || dbUser.avatar_url,
      role: (dbUser.role as 'admin' | 'manager' | 'user') || 'user',
      isApproved: dbUser.isApproved || dbUser.is_approved || dbUser.approval_status,
      lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,
      created_at: dbUser.created_at,
      updated_at: dbUser.updated_at,
      password_hash: dbUser.password_hash
    };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', error);
      throw new Error(`Failed to get user by email: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getAllUsers(): Promise<User[]> {
    try {
      const stmt = this.db.prepare('SELECT * FROM users');
      const dbUsers = stmt.all() as {
        id: string;
        name?: string;
        username?: string;
        email: string;
        avatar?: string;
        avatar_url?: string;
        role?: string;
        isApproved?: boolean;
        is_approved?: boolean;
        lastLoginAt?: string;
        last_login_at?: string;
        created_at: string;
        updated_at: string;
        password_hash?: string;
      }[];
      
      return dbUsers.map(dbUser => ({
      id: dbUser.id,
      name: dbUser.name || dbUser.username || dbUser.email.split('@')[0],
      email: dbUser.email,
      avatar: dbUser.avatar || dbUser.avatar_url,
      role: (dbUser.role as 'admin' | 'manager' | 'user') || 'user',
      isApproved: dbUser.isApproved || dbUser.is_approved,
      lastLoginAt: dbUser.lastLoginAt || dbUser.last_login_at,
      created_at: dbUser.created_at,
      updated_at: dbUser.updated_at,
      password_hash: dbUser.password_hash
    }));
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw new Error(`Failed to get all users: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {
    const fields = Object.keys(updates).filter(key => key !== 'id');
    if (fields.length === 0) return null;

    const setClause = fields.map(field => `${field} = ?`).join(', ');
    const values = fields.map(field => (updates as Record<string, unknown>)[field]);
    values.push(new Date().toISOString()); // updated_at
    values.push(id);

    const stmt = this.db.prepare(`
      UPDATE users SET ${setClause}, updated_at = ? WHERE id = ?
    `);

    stmt.run(...values);
    return this.getUserById(id);
  }

  public async deleteUser(id: string): Promise<boolean> {
    const stmt = this.db.prepare('DELETE FROM users WHERE id = ?');
    const result = stmt.run(id);
    return result.changes > 0;
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –°–ï–°–°–ò–Ø–ú–ò
  // =====================================================

  public async createSession(sessionData: {
    user_id: string;
    token: string;
    expires_at: string;
    isActive?: boolean;
    userAgent?: string;
    ipAddress?: string;
    lastActivityAt?: string;
  }): Promise<Session> {
    const id = uuidv4();
    const now = new Date().toISOString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ expires_at —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π
    if (!sessionData.expires_at) {
      throw new Error('Invalid expires_at date provided');
    }

    console.log('üîê SQLite: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', {
      token: sessionData.token ? 'present' : 'missing',
      userId: sessionData.user_id,
      expires_at: sessionData.expires_at
    });

    const stmt = this.db.prepare(`
      INSERT INTO sessions (id, token, user_id, expires_at, created_at)
      VALUES (?, ?, ?, ?, ?)
    `);

    stmt.run(id, sessionData.token, sessionData.user_id, sessionData.expires_at, now);

    return {
      id,
      token: sessionData.token,
      user_id: sessionData.user_id,
      expires_at: sessionData.expires_at,
      created_at: now
    };
  }

  public async getSessionByToken(token: string): Promise<Session | null> {
    try {
      console.log('üîç SQLite: –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É:', token);
      const stmt = this.db.prepare('SELECT * FROM sessions WHERE token = ? AND expires_at > datetime(\'now\')');
      const dbSession = stmt.get(token) as {
        id: string;
        token: string;
        user_id: string;
        expires_at: string;
        created_at: string;
      } | undefined;
      
      if (!dbSession) {
        console.log('üìä SQLite: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return null;
      }
      
      console.log('üìä SQLite: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', dbSession);
      
      return {
        id: dbSession.id,
        token: dbSession.token,
        user_id: dbSession.user_id,
        expires_at: dbSession.expires_at,
        created_at: dbSession.created_at
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É:', error);
      throw new Error(`Failed to get session by token: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async deleteSession(token: string): Promise<boolean> {
    try {
      const stmt = this.db.prepare('DELETE FROM sessions WHERE token = ?');
      const result = stmt.run(token);
      return result.changes > 0;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      throw new Error(`Failed to delete session: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async deleteUserSessions(userId: string): Promise<number> {
    try {
      const stmt = this.db.prepare('DELETE FROM sessions WHERE user_id = ?');
      const result = stmt.run(userId);
      return result.changes;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw new Error(`Failed to delete user sessions: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async deleteExpiredSessions(): Promise<number> {
    try {
      const now = new Date().toISOString();
      const stmt = this.db.prepare('DELETE FROM sessions WHERE expires_at < ?');
      const result = stmt.run(now);
      return result.changes;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π:', error);
      throw new Error(`Failed to delete expired sessions: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ï–ö–¢–ê–ú–ò
  // =====================================================

  public async createProject(projectData: Partial<Project>): Promise<Project> {
    try {
      const id = uuidv4();
      const now = new Date().toISOString();

      const {
        name,
        description,
        created_by,
        color,
        icon_url,
        telegram_chat_id,
        telegram_topic_id
      } = projectData;

      const stmt = this.db.prepare(`
        INSERT INTO projects (id, name, description, creator_id, color, icon, telegram_chat_id, telegram_topic_id, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      stmt.run(id, name, description, created_by, color || '#3B82F6', icon_url || 'üìã', telegram_chat_id, telegram_topic_id, now, now);

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      const memberStmt = this.db.prepare(`
        INSERT INTO project_members (id, project_id, user_id, role, joined_at)
        VALUES (?, ?, ?, ?, ?)
      `);
      const memberId = uuidv4();
      memberStmt.run(memberId, id, created_by, 'owner', now);

      return {
        id,
        name: name || '',
        description: description || '',
        created_by: created_by || '',
        color: color || '#3B82F6',
        icon_url: icon_url || 'üìã',
        telegram_chat_id: telegram_chat_id || null,
        telegram_topic_id: telegram_topic_id || null,
        created_at: now,
        updated_at: now
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      throw new Error(`Failed to create project: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getProjectById(id: string): Promise<Project | null> {
    const stmt = this.db.prepare('SELECT * FROM projects WHERE id = ?');
    const dbProject = stmt.get(id) as {
      id: string;
      name: string;
      description: string;
      creator_id: string;
      color: string;
      icon: string;
      created_at: string;
      updated_at: string;
    } | undefined;
    
    if (!dbProject) return null;
    
    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    const project: Project = {
      id: dbProject.id,
      name: dbProject.name,
      description: dbProject.description,
      created_by: dbProject.creator_id,
      color: dbProject.color,
      icon_url: dbProject.icon || 'üìã',
      created_at: dbProject.created_at,
      updated_at: dbProject.updated_at
    };
    
    return project;
  }

  public async getUserProjects(userId: string): Promise<Project[]> {
    const stmt = this.db.prepare(`
      SELECT * FROM projects WHERE creator_id = ?
    `);
    const dbProjects = stmt.all(userId) as {
      id: string;
      name: string;
      description: string;
      creator_id: string;
      color: string;
      icon: string;
      created_at: string;
      updated_at: string;
    }[];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    return dbProjects.map(dbProject => ({
      id: dbProject.id,
      name: dbProject.name,
      description: dbProject.description,
      created_by: dbProject.creator_id,
      color: dbProject.color,
      icon_url: dbProject.icon || 'üìã',
      created_at: dbProject.created_at,
      updated_at: dbProject.updated_at
    }));
  }

  public async getAllProjects(): Promise<Project[]> {
    const stmt = this.db.prepare('SELECT * FROM projects');
    const dbProjects = stmt.all() as {
      id: string;
      name: string;
      description: string;
      creator_id: string;
      color: string;
      icon: string;
      created_at: string;
      updated_at: string;
    }[];
    
    // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    return dbProjects.map(dbProject => ({
      id: dbProject.id,
      name: dbProject.name,
      description: dbProject.description,
      color: dbProject.color,
      icon_url: dbProject.icon || 'üìã',
      created_by: dbProject.creator_id,
      created_at: dbProject.created_at,
      updated_at: dbProject.updated_at
    }));
  }

  public async deleteProject(id: string): Promise<boolean> {
    try {
      // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      this.db.exec('BEGIN TRANSACTION');

      // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const deleteTasksStmt = this.db.prepare('DELETE FROM tasks WHERE project_id = ?');
      deleteTasksStmt.run(id);

      // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
      const deleteColumnsStmt = this.db.prepare(`
        DELETE FROM columns WHERE board_id IN (
          SELECT id FROM boards WHERE project_id = ?
        )
      `);
      deleteColumnsStmt.run(id);

      // –£–¥–∞–ª—è–µ–º –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
      const deleteBoardsStmt = this.db.prepare('DELETE FROM boards WHERE project_id = ?');
      deleteBoardsStmt.run(id);

      // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
      const deleteMembersStmt = this.db.prepare('DELETE FROM project_members WHERE project_id = ?');
      deleteMembersStmt.run(id);

      // –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—Ä–æ–µ–∫—Ç
      const deleteProjectStmt = this.db.prepare('DELETE FROM projects WHERE id = ?');
      const result = deleteProjectStmt.run(id);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      this.db.exec('COMMIT');

      return result.changes > 0;
    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      this.db.exec('ROLLBACK');
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      throw error;
    }
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –î–û–°–ö–ê–ú–ò
  // =====================================================

  public async createBoard(boardData: Partial<Board>): Promise<Board> {
    try {
      const id = uuidv4();
      const now = new Date().toISOString();

      const {
        name,
        description,
        project_id,
        created_by
      } = boardData;

      const stmt = this.db.prepare(`
        INSERT INTO boards (id, name, description, project_id, created_by, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `);

      stmt.run(id, name, description, project_id, created_by, now, now);

      return {
        id,
        name: name || '',
        description: description || '',
        project_id: project_id || '',
        created_by: created_by || '',
        created_at: now,
        updated_at: now
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', error);
      throw new Error(`Failed to create board: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getBoardById(id: string): Promise<Board | null> {
    try {
      const stmt = this.db.prepare('SELECT * FROM boards WHERE id = ?');
      const row = stmt.get(id) as {
        id: string;
        name: string;
        description: string;
        project_id: string;
        created_by: string;
        created_at: string;
        updated_at: string;
      } | undefined;
      
      if (!row) return null;

      return {
        id: row.id,
        name: row.name,
        description: row.description,
        project_id: row.project_id,
        created_by: row.created_by,
        created_at: row.created_at,
        updated_at: row.updated_at
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–∫–∏ –ø–æ ID:', error);
      throw new Error(`Failed to get board by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getProjectBoards(projectId: string): Promise<Board[]> {
    try {
      const stmt = this.db.prepare('SELECT * FROM boards WHERE project_id = ? ORDER BY created_at DESC');
      const dbBoards = stmt.all(projectId) as {
        id: string;
        name: string;
        description: string;
        project_id: string;
        created_by: string;
        created_at: string;
        updated_at: string;
      }[];
      
      return dbBoards.map(row => ({
        id: row.id,
        name: row.name,
        description: row.description,
        project_id: row.project_id,
        created_by: row.created_by,
        created_at: row.created_at,
        updated_at: row.updated_at
      }));
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞:', error);
      throw new Error(`Failed to get project boards: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async deleteBoard(id: string): Promise<boolean> {
    try {
      const deleteBoard = this.db.transaction(() => {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏
        const deleteTasksStmt = this.db.prepare(`
          DELETE FROM tasks 
          WHERE column_id IN (
            SELECT id FROM columns WHERE board_id = ?
          )
        `);
        deleteTasksStmt.run(id);
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏
        const deleteColumnsStmt = this.db.prepare('DELETE FROM columns WHERE board_id = ?');
        deleteColumnsStmt.run(id);
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –¥–æ—Å–∫—É
        const deleteBoardStmt = this.db.prepare('DELETE FROM boards WHERE id = ?');
        const result = deleteBoardStmt.run(id);
        
        return result.changes > 0;
      });
      
      return deleteBoard();
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);
      throw new Error(`Failed to delete board: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–õ–û–ù–ö–ê–ú–ò
  // =====================================================

  public async createColumn(column: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {
    try {
      const id = uuidv4();
      const now = new Date().toISOString();
      
      const stmt = this.db.prepare(`
        INSERT INTO columns (id, name, board_id, position, color, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `);
      
      stmt.run(id, column.name, column.board_id, column.position, column.color, now, now);
      
      return {
        id,
        name: column.name,
        board_id: column.board_id,
        position: column.position,
        color: column.color,
        created_at: now,
        updated_at: now
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error);
      throw new Error(`Failed to create column: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getBoardColumns(boardId: string): Promise<Column[]> {
    try {
      const stmt = this.db.prepare('SELECT * FROM columns WHERE board_id = ? ORDER BY position');
      const rows = stmt.all(boardId) as {
        id: string;
        name: string;
        board_id: string;
        position: number;
        color: string;
        created_at: string;
        updated_at: string;
      }[];
      
      return rows.map(row => ({
        id: row.id,
        name: row.name,
        board_id: row.board_id,
        position: row.position,
        color: row.color,
        created_at: row.created_at,
        updated_at: row.updated_at
      }));
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏:', error);
      throw new Error(`Failed to get board columns: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò
  // =====================================================

  public async createTask(taskData: Partial<Task>): Promise<Task> {
    try {
      const id = uuidv4();
      const now = new Date().toISOString();

      const {
        title,
        description,
        status = 'todo',
        priority = 'medium',
        column_id,
        due_date,
        estimated_hours,
        position = 0
      } = taskData;

      const stmt = this.db.prepare(`
        INSERT INTO tasks (id, title, description, status, priority, column_id, due_date, estimated_hours, position, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      stmt.run(id, title, description, status, priority, column_id, due_date, estimated_hours, position, now, now);

      return {
        id,
        title: title || '',
        description: description || '',
        status,
        priority,
        column_id,
        due_date,
        estimated_hours,
        position,
        created_at: now,
        updated_at: now
      };
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      throw new Error(`Failed to create task: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getTaskById(id: string): Promise<Task | null> {
    try {
      const stmt = this.db.prepare('SELECT * FROM tasks WHERE id = ?');
      const task = stmt.get(id) as Task | undefined;
      return task || null;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ ID:', error);
      throw new Error(`Failed to get task by ID: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async getColumnTasks(columnId: string): Promise<Task[]> {
    try {
      const stmt = this.db.prepare('SELECT * FROM tasks WHERE column_id = ? ORDER BY position ASC, created_at DESC');
      return stmt.all(columnId) as Task[];
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–æ–ª–æ–Ω–∫–∏:', error);
      throw new Error(`Failed to get column tasks: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async deleteTask(id: string): Promise<boolean> {
    try {
      const stmt = this.db.prepare('DELETE FROM tasks WHERE id = ?');
      const result = stmt.run(id);
      return result.changes > 0;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      throw new Error(`Failed to delete task: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ü–†–û–ï–ö–¢–ê–ú
  // =====================================================

  public async hasProjectAccess(userId: string, projectId: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞
      const ownerStmt = this.db.prepare('SELECT id FROM projects WHERE id = ? AND creator_id = ?');
      const isOwner = ownerStmt.get(projectId, userId);
      
      if (isOwner) {
        console.log('üîç SQLite: User is project owner');
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–ª–µ–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∞
      const memberStmt = this.db.prepare('SELECT id FROM project_members WHERE project_id = ? AND user_id = ?');
      const isMember = memberStmt.get(projectId, userId);
      
      console.log('üîç SQLite: Project access check:', {
        userId,
        projectId,
        isOwner: !!isOwner,
        isMember: !!isMember
      });
      
      return !!isMember;
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É:', error);
      throw new Error(`Failed to check project access: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –ú–ï–¢–û–î–´ –û–ë–ù–û–í–õ–ï–ù–ò–Ø
  // =====================================================

  public async updateTask(id: string, updates: Partial<Task>): Promise<Task | null> {
    try {
      const fields = Object.keys(updates).filter(key => key !== 'id' && key !== 'created_at');
      if (fields.length === 0) return null;

      const setClause = fields.map(field => `${field} = ?`).join(', ');
      const values = fields.map(field => (updates as Record<string, unknown>)[field]);
      values.push(new Date().toISOString()); // updated_at
      values.push(id);

      const stmt = this.db.prepare(`
        UPDATE tasks SET ${setClause}, updated_at = ? WHERE id = ?
      `);

      const result = stmt.run(...values);
      if (result.changes === 0) return null;

      return this.getTaskById(id);
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
      throw new Error(`Failed to update task: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async updateBoard(id: string, updates: Partial<Board>): Promise<Board | null> {
    try {
      const fields = Object.keys(updates).filter(key => key !== 'id' && key !== 'created_at');
      if (fields.length === 0) return null;

      const setClause = fields.map(field => `${field} = ?`).join(', ');
      const values = fields.map(field => (updates as Record<string, unknown>)[field]);
      values.push(new Date().toISOString()); // updated_at
      values.push(id);

      const stmt = this.db.prepare(`
        UPDATE boards SET ${setClause}, updated_at = ? WHERE id = ?
      `);

      const result = stmt.run(...values);
      if (result.changes === 0) return null;

      return this.getBoardById(id);
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏:', error);
      throw new Error(`Failed to update board: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  public async updateProject(id: string, updates: Partial<Project>): Promise<Project | null> {
    try {
      const fields = Object.keys(updates).filter(key => key !== 'id' && key !== 'created_at');
      if (fields.length === 0) return null;

      const setClause = fields.map(field => `${field} = ?`).join(', ');
      const values = fields.map(field => (updates as Record<string, unknown>)[field]);
      values.push(new Date().toISOString()); // updated_at
      values.push(id);

      const stmt = this.db.prepare(`
        UPDATE projects SET ${setClause}, updated_at = ? WHERE id = ?
      `);

      const result = stmt.run(...values);
      if (result.changes === 0) return null;

      return this.getProjectById(id);
    } catch (error) {
      console.error('‚ùå SQLite: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error);
      throw new Error(`Failed to update project: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // =====================================================
  // –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–õ–¨–ù–´–• SQL –ó–ê–ü–†–û–°–û–í
  // =====================================================

  public async query(sql: string, params?: unknown[]): Promise<{ rows: unknown[] }> {
    if (!this.db) throw new Error('Database not initialized');

    try {
      const stmt = this.db.prepare(sql);
      const trimmedSql = sql.trim().toUpperCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø SQL –∫–æ–º–∞–Ω–¥—ã
      const isSelectQuery = trimmedSql.startsWith('SELECT') || trimmedSql.startsWith('WITH');
      
      if (isSelectQuery) {
        // –î–ª—è SELECT –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º all()
        let rows: unknown[];
        if (params && params.length > 0) {
          rows = stmt.all(...params) as unknown[];
        } else {
          rows = stmt.all() as unknown[];
        }
        return { rows };
      } else {
        // –î–ª—è INSERT, UPDATE, DELETE, BEGIN, COMMIT, ROLLBACK –∏—Å–ø–æ–ª—å–∑—É–µ–º run()
        let result;
        if (params && params.length > 0) {
          result = stmt.run(...params);
        } else {
          result = stmt.run();
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        return { 
          rows: []
        };
      }
    } catch (error) {
      console.error('‚ùå SQLite query error:', error);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  public close(): void {
    if (this.db) {
      this.db.close();
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–¥–∞–ø—Ç–µ—Ä–∞
export const sqliteAdapter = SQLiteAdapter.getInstance();