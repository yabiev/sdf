// =====================================================
// –ê–î–ê–ü–¢–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•
// =====================================================

import { User, Project, Board, Column, Task, Session } from '@/types';
import SQLiteAdapterOptimized from './sqlite-adapter-optimized';

// =====================================================
// –¢–ò–ü–´ –î–ê–ù–ù–´–•
// =====================================================

export type DatabaseType = 'sqlite';

export interface DatabaseStatus {
  sqlite: boolean;
  current: DatabaseType;
}

// =====================================================
// –ö–õ–ê–°–° –ê–î–ê–ü–¢–ï–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
// =====================================================

export class DatabaseAdapter {
  private static instance: DatabaseAdapter;
  private currentDatabase: DatabaseType = 'sqlite';
  private isInitialized = false;
  private sqliteAdapter: SQLiteAdapterOptimized;

  private constructor() {
    this.sqliteAdapter = SQLiteAdapterOptimized.getInstance();
    this.currentDatabase = 'sqlite';
  }

  public static getInstance(): DatabaseAdapter {
    if (!DatabaseAdapter.instance) {
      DatabaseAdapter.instance = new DatabaseAdapter();
    }
    return DatabaseAdapter.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SQLite
      await this.sqliteAdapter.initialize();
      this.currentDatabase = 'sqlite';
      console.log('üéØ Database Adapter: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite');

      this.isInitialized = true;
      console.log('‚úÖ Database Adapter: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå Database Adapter: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public async getDatabaseStatus(): Promise<DatabaseStatus> {
    const sqlite = await Promise.resolve(this.sqliteAdapter.initialize()).then(() => true).catch(() => false);
    
    return {
      sqlite,
      current: this.currentDatabase
    };
  }



  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public getCurrentDatabase(): DatabaseType {
    return this.currentDatabase;
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    await this.initialize();
    return await this.sqliteAdapter.createUser(userData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  public async getUserById(id: string): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.getUserById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  public async getUserByEmail(email: string): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.getUserByEmail(email);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public async getAllUsers(): Promise<User[]> {
    await this.initialize();
    return await this.sqliteAdapter.getAllUsers();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.updateUser(id, updates);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async deleteUser(id: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteUser(id);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –°–ï–°–°–ò–Ø–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  public async createSession(sessionData: Omit<Session, 'id' | 'created_at'>): Promise<Session> {
    await this.initialize();
    return await this.sqliteAdapter.createSession(sessionData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  public async getSessionByToken(token: string): Promise<Session | null> {
    await this.initialize();
    return await this.sqliteAdapter.getSessionByToken(token);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  public async updateSessionActivity(token: string): Promise<boolean> {
    await this.initialize();
    // –î–ª—è SQLite –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    return true;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  public async deleteSession(token: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteSession(token);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ï–ö–¢–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {
    await this.initialize();
    return await this.sqliteAdapter.createProject(projectData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
   */
  public async getProjectById(id: string): Promise<Project | null> {
    await this.initialize();
    return await this.sqliteAdapter.getProjectById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
   */
  public async getAllProjects(): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getAllProjects();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async getUserProjects(userId: string): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getUserProjects(userId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
   */
  public async getProjectsByCreatorId(creatorId: string): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getUserProjects(creatorId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
   */
  public async hasProjectAccess(userId: string | number, projectId: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.hasProjectAccess(userId.toString(), projectId);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –î–û–°–ö–ê–ú–ò
  // =====================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async getProjectBoards(projectId: string): Promise<Board[]> {
    await this.initialize();
    return await this.sqliteAdapter.getBoardsByProjectId(projectId);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–õ–û–ù–ö–ê–ú–ò
  // =====================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏
   */
  public async getBoardColumns(boardId: string): Promise<Column[]> {
    await this.initialize();
    return await this.sqliteAdapter.getColumnsByBoardId(boardId);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
   */
  public async createColumn(columnData: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {
    await this.initialize();
    return await this.sqliteAdapter.createColumn(columnData);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async createTask(taskData: Omit<Task, 'id' | 'created_at' | 'updated_at'>): Promise<Task> {
    await this.initialize();
    return await this.sqliteAdapter.createTask(taskData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–ª–æ–Ω–∫–∏
   */
  public async getColumnTasks(columnId: string): Promise<Task[]> {
    await this.initialize();
    return await this.sqliteAdapter.getTasksByColumnId(columnId);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async deleteTask(id: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteTask(id);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏)
   */
  public async query(sql: string, params?: unknown[]): Promise<unknown[]> {
    await this.initialize();
    return await this.sqliteAdapter.query(sql, params);
  }

}



// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const dbAdapter = DatabaseAdapter.getInstance();