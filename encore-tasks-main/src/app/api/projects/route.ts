import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { dbAdapter } from '@/lib/database-adapter';

const databaseAdapter = dbAdapter;
import { verifyAuth } from '@/lib/auth';
import { CreateProjectDto, ProjectWithStats } from '@/types/core.types';

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const createProjectSchema = z.object({
  name: z.string().min(1, '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ').max(100, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ'),
  description: z.string().max(500, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ').optional(),
  color: z.string().regex(/^#[0-9A-F]{6}$/i, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞').optional().default('#3B82F6'),
  icon_url: z.string().min(1, '–ò–∫–æ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞').optional().default('üìã'),
  visibility: z.enum(['private', 'public']).optional().default('private'),
  telegram_chat_id: z.string().nullable().optional(),
  telegram_topic_id: z.string().nullable().optional(),
  member_ids: z.array(z.string()).optional().default([])
});

// updateProjectSchema —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –∏–∑ validation.ts

// GET /api/projects - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const authResult = await verifyAuth(request);
    if (!authResult.success || !authResult.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const projects = await databaseAdapter.getUserProjects(authResult.user.userId);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const projectsWithStats = projects.map(project => ({
      id: project.id,
      name: project.name,
      description: project.description,
      color: project.color || '#3B82F6',
      icon: project.icon_url || 'üìã',
      status: 'active',
      visibility: 'private',
      telegram_chat_id: null,
      telegram_topic_id: null,
      settings: null,
      created_at: project.created_at,
      updated_at: project.updated_at,
      created_by: project.created_by,
      created_by_username: 'admin',
      members_count: 1,
      boards_count: 0,
      tasks_count: 0
    }));

    return NextResponse.json({
      success: true,
      data: {
        projects: projectsWithStats,
        pagination: {
          page: 1,
          limit: 20,
          total: projectsWithStats.length,
          total_pages: 1
        }
      }
    });

  } catch (error) {
    console.error('Error fetching projects:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// POST /api/projects - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
export async function POST(request: NextRequest) {
  try {
    const authResult = await verifyAuth(request);
    if (!authResult.success || !authResult.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json();
    console.log('üìä Received project data:', JSON.stringify(body, null, 2));
    
    const validationResult = createProjectSchema.safeParse(body);
    console.log('üîç Validation result:', validationResult.success);

    if (!validationResult.success) {
      console.log('‚ùå Validation errors:', validationResult.error);
      console.log('‚ùå Validation error details:', JSON.stringify(validationResult.error.issues, null, 2));
      return NextResponse.json(
        {
          success: false,
          error: 'Validation failed',
          details: validationResult.error.issues
        },
        { status: 400 }
      );
    }

    const projectData: CreateProjectDto = validationResult.data;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—è PostgreSQL –∞–¥–∞–ø—Ç–µ—Ä
    const project = await databaseAdapter.createProject({
      name: projectData.name,
      description: projectData.description || '',
      created_by: authResult.user.userId,
      color: projectData.color || '#3B82F6',
      icon_url: projectData.icon || 'üìã',
      telegram_chat_id: projectData.telegram_chat_id || null,
      telegram_topic_id: projectData.telegram_topic_id || null
    });

    return NextResponse.json({
      success: true,
      data: {
        id: project.id,
        name: project.name,
        description: project.description,
        color: project.color,
        icon: project.icon_url || 'üìã',
        status: 'active',
        visibility: 'private',
        telegram_chat_id: project.telegram_chat_id,
        telegram_topic_id: project.telegram_topic_id,
        settings: null,
        created_at: project.created_at,
        updated_at: project.updated_at,
        created_by: project.created_by,
        created_by_username: 'admin',
        members_count: 1,
        boards_count: 0,
        tasks_count: 0
      },
      message: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    }, { status: 201 });

  } catch (error) {
    console.error('Error creating project:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// DELETE /api/projects - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export async function DELETE(request: NextRequest) {
  try {
    const authResult = await verifyAuth(request);
    if (!authResult.success || !authResult.user) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    if (authResult.user.role !== 'admin') {
      return NextResponse.json(
        { success: false, error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const projectIds = searchParams.get('ids')?.split(',') || [];

    if (projectIds.length === 0) {
      return NextResponse.json(
        { success: false, error: 'No project IDs provided' },
        { status: 400 }
      );
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
    return NextResponse.json({
      success: false,
      error: 'Project deletion not implemented'
    }, { status: 501 });

  } catch (error) {
    console.error('Error deleting projects:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}