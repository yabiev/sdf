import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { NextRequest, NextResponse } from 'next/server';
import { dbAdapter } from '@/lib/database-adapter';

const databaseAdapter = dbAdapter;

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('üîç Looking up user by email:', email);
    const user = await databaseAdapter.getUserByEmail(email);
    console.log('üë§ User found:', user ? 'YES' : 'NO');
    if (user) {
      console.log('üë§ User details:', {
        id: user.id,
        email: user.email,
        approval_status: user.isApproved,
        has_password: !!user.password_hash
      });
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ approval_status –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –≤—Ö–æ–¥–æ–º
    if (!user) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }
    
    // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: || user.approval_status !== 'approved'
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—Ö–æ–¥–∏—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    console.log('üîê Checking password for user:', user.email);
    console.log('üîê Has password hash:', !!user.password_hash);
    console.log('üîê Password hash from DB:', user.password_hash ? user.password_hash.substring(0, 20) + '...' : 'null');
    console.log('üîê Input password:', password);
    const isValidPassword = user.password_hash ? await bcrypt.compare(password, user.password_hash) : false;
    console.log('üîê Password valid:', isValidPassword);
    
    if (!isValidPassword) {
      console.log('‚ùå Password validation failed');
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }
    
    console.log('‚úÖ Password validation successful');

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞ –≤ SQLiteAdapter
    // await databaseAdapter.deleteUserSessions(user.id);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const sessionToken = jwt.sign(
      { 
        userId: user.id, 
        email: user.email,
        timestamp: Date.now(),
        random: Math.random().toString(36).substring(2, 15)
      },
      JWT_SECRET,
      { expiresIn: '7d' }
    );
    
    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π
    
    if (!user.id) {
      console.error('‚ùå User ID is missing');
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 500 }
      );
    }
    
    console.log('üìù Creating session for user ID:', user.id, 'type:', typeof user.id);
    console.log('üìù User ID as string:', user.id.toString());
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ user.id
    if (typeof user.id !== 'number' && typeof user.id !== 'string') {
      console.error('‚ùå User ID has invalid type:', typeof user.id, 'value:', user.id);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 500 }
      );
    }
    
    await databaseAdapter.createSession({
      token: sessionToken,
      user_id: user.id.toString(),
      expires_at: expiresAt.toISOString()
    });

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ last_login_at
    // await databaseAdapter.updateUser(user.id, {
    //   last_login_at: new Date().toISOString()
    // });

    const userResponse = {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      approval_status: user.isApproved ? 'approved' : 'pending',
      status: 'active',
      avatar: user.avatar || null,
      createdAt: user.created_at,
      updatedAt: user.updated_at
      // TODO: –î–æ–±–∞–≤–∏—Ç—å lastLoginAt –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ last_login_at
      // lastLoginAt: user.last_login_at
    };

    const response = NextResponse.json({
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      user: userResponse,
      token: sessionToken
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookies –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    response.cookies.set('auth-token', sessionToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      path: '/',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ JWT
    });

    // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π cookie –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    response.cookies.set('auth-token-client', sessionToken, {
      httpOnly: false,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      path: '/',
      maxAge: 7 * 24 * 60 * 60 * 1000 // 7 –¥–Ω–µ–π - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ JWT
    });

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}