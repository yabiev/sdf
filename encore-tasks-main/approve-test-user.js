// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

async function approveTestUser() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const dbFiles = ['database.db', 'database.sqlite', './database/database.sqlite'];
  let dbPath = null;
  
  for (const file of dbFiles) {
    if (fs.existsSync(file)) {
      dbPath = file;
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${file}`);
      break;
    }
  }
  
  if (!dbPath) {
    console.error('‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const db = new sqlite3.Database(dbPath);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@example.com...');
    
    db.all("SELECT id, email, name, role FROM users WHERE email = 'test@example.com'", (err, users) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        db.close();
        return;
      }
      
      console.log('üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', users);
      
      if (users.length === 0) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const bcrypt = require('bcrypt');
        const hashedPassword = bcrypt.hashSync('test123', 10);
        
        db.run(
          "INSERT INTO users (id, email, name, password_hash, role, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
          [
            'test-user-' + Date.now(),
            'test@example.com',
            'Test User',
            hashedPassword,
            'user',
            new Date().toISOString(),
            new Date().toISOString()
          ],
          function(err) {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            } else {
              console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
              console.log('üéâ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
              console.log('üìß Email: test@example.com');
              console.log('üîë –ü–∞—Ä–æ–ª—å: test123');
            }
            db.close();
          }
        );
      } else {
        const user = users[0];
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID=${user.id}, Email=${user.email}, Role=${user.role}`);
        console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
        console.log('üìß Email: test@example.com');
        console.log('üîë –ü–∞—Ä–æ–ª—å: test123');
        db.close();
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    db.close();
  }
}

approveTestUser();