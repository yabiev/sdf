/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
 */

const puppeteer = require('puppeteer');
const assert = require('assert');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const TEST_CONFIG = {
  baseUrl: 'http://localhost:3000',
  timeout: 30000,
  testUser: {
    email: 'test@example.com',
    password: 'testpassword123'
  }
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
const TEST_PROJECTS = {
  valid: {
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
    icon: 'üìã'
  },
  invalid: {
    empty: { name: '', description: '', icon: '' },
    tooLong: {
      name: '–ê'.repeat(101), // –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 100 —Å–∏–º–≤–æ–ª–æ–≤
      description: '–ë'.repeat(101), // –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 500 —Å–∏–º–≤–æ–ª–æ–≤ (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤)
      icon: 'üìã'
    },
    invalidDescription: {
      name: '–í–∞–ª–∏–¥–Ω–æ–µ –∏–º—è',
      description: '–í'.repeat(101), // –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤)
      icon: 'üìã'
    }
  }
};

class ProjectCreationTester {
  constructor() {
    this.browser = null;
    this.page = null;
    this.testResults = [];
    this.apiUrl = 'http://localhost:3000';
    this.authToken = null;
  }

  async authenticate() {
    console.log('üîë –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    try {
      const response = await axios.post(`${this.apiUrl}/api/auth/login`, {
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      });
      
      if (response.data.token) {
        this.authToken = response.data.token;
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
      return false;
    }
    return false;
  }

  async init() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    this.browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
      slowMo: 100, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    this.page = await this.browser.newPage();
    await this.page.setViewport({ width: 1280, height: 720 });
    
    // Capture console logs from the browser
    this.page.on('console', (msg) => {
      console.log('üåê Browser Console:', msg.text());
    });
    
    this.page.on('pageerror', (error) => {
      console.log('üö® Page Error:', error.message);
    });
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
    const authSuccess = await this.authenticate();
    if (!authSuccess) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ cookies
    await this.page.setCookie({
      name: 'auth-token',
      value: this.authToken,
      domain: 'localhost',
      path: '/'
    });
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API
    await this.page.setRequestInterception(true);
    this.page.on('request', this.handleRequest.bind(this));
    this.page.on('response', this.handleResponse.bind(this));
    
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  handleRequest(request) {
    if (request.url().includes('/api/projects')) {
      console.log(`üì§ API –∑–∞–ø—Ä–æ—Å: ${request.method()} ${request.url()}`);
      if (request.method() === 'POST') {
        console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', request.postData());
      }
    }
    request.continue();
  }

  handleResponse(response) {
    if (response.url().includes('/api/projects')) {
      console.log(`üì• API –æ—Ç–≤–µ—Ç: ${response.status()} ${response.url()}`);
    }
  }

  async navigateToApp() {
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await this.page.goto(TEST_CONFIG.baseUrl, { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await this.page.waitForSelector('body', { timeout: TEST_CONFIG.timeout });
    await new Promise(resolve => setTimeout(resolve, 3000));
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  }

  async openCreateProjectModal() {
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const debugInfo = await this.page.evaluate(() => {
      const h3Elements = Array.from(document.querySelectorAll('h3'));
      const h3Texts = h3Elements.map(h => h.textContent?.trim());
      const allButtons = Array.from(document.querySelectorAll('button'));
      const buttonTitles = allButtons.map(b => b.title || 'no title');
      
      return {
        h3Count: h3Elements.length,
        h3Texts: h3Texts,
        buttonCount: allButtons.length,
        buttonTitles: buttonTitles.slice(0, 10), // –ü–µ—Ä–≤—ã–µ 10 –∫–Ω–æ–ø–æ–∫
        hasProjectsHeader: h3Texts.includes('–ü—Ä–æ–µ–∫—Ç—ã'),
        hasCreateButton: allButtons.some(b => b.title === '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
      };
    });
    
    console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', JSON.stringify(debugInfo, null, 2));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–µ–∫—Ü–∏–∏ "–ü—Ä–æ–µ–∫—Ç—ã" —Å–∞–π–¥–±–∞—Ä–∞
    const createButton = await this.page.evaluateHandle(() => {
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
      const createProjectButton = document.querySelector('button[title="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"]');
      if (createProjectButton) {
        return createProjectButton;
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ü—Ä–æ–µ–∫—Ç—ã" –∏ –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –Ω–∏–º
      const projectsHeaders = Array.from(document.querySelectorAll('h3'));
      const projectsHeader = projectsHeaders.find(h => h.textContent?.trim() === '–ü—Ä–æ–µ–∫—Ç—ã');
      
      if (projectsHeader) {
        // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π div —Å –∫–ª–∞—Å—Å–æ–º "flex items-center justify-between"
        const headerContainer = projectsHeader.closest('.flex.items-center.justify-between');
        if (headerContainer) {
          const button = headerContainer.querySelector('button');
          if (button) {
            return button;
          }
        }
        
        // –ü–æ–∏—Å–∫ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const parentDiv = projectsHeader.parentElement;
        if (parentDiv) {
          const button = parentDiv.querySelector('button');
          if (button) {
            return button;
          }
        }
      }
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–æ–π Plus
      const allButtons = Array.from(document.querySelectorAll('button'));
      for (const button of allButtons) {
        const svg = button.querySelector('svg');
        if (svg && button.title && button.title.includes('–°–æ–∑–¥–∞—Ç—å')) {
          return button;
        }
      }
      
      return null;
    });
    
    if (!createButton) {
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const buttonExists = await this.page.evaluate((button) => {
      return button && button.nodeType === Node.ELEMENT_NODE;
    }, createButton);
    
    if (!buttonExists) {
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ');
    }
    
    await createButton.click();
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ CreateProjectModal
    await this.page.waitForSelector('.fixed.inset-0', { timeout: 5000 });
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ');
  }

  async fillProjectForm(projectData) {
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - –∏—â–µ–º input –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const nameInput = await this.page.evaluateHandle(() => {
      const modal = document.querySelector('.fixed.inset-0');
      if (!modal) return null;
      
      // –ò—â–µ–º input –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      const inputs = modal.querySelectorAll('input[type="text"]');
      for (const input of inputs) {
        const label = modal.querySelector(`label[for="${input.id}"]`);
        const placeholder = input.placeholder || '';
        const labelText = label ? label.textContent : '';
        
        if (placeholder.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') ||
            placeholder.toLowerCase().includes('name') ||
            labelText.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') ||
            labelText.toLowerCase().includes('name')) {
          return input;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –º–µ—Ç–∫–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π input
      return inputs[0] || null;
    });
    
    if (nameInput) {
      const inputExists = await this.page.evaluate((input) => {
        return input && input.nodeType === Node.ELEMENT_NODE;
      }, nameInput);
      
      if (inputExists) {
      await nameInput.click({ clickCount: 3 }); // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      await nameInput.type(projectData.name);
      console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectData.name}`);
      } else {
        throw new Error('‚ùå –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } else {
      throw new Error('‚ùå –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if (projectData.description) {
      const descInput = await this.page.evaluateHandle(() => {
        const modal = document.querySelector('.fixed.inset-0');
        if (!modal) return null;
        
        const textareas = modal.querySelectorAll('textarea');
        return textareas[0] || null;
      });
      
      if (descInput) {
        const descExists = await this.page.evaluate((input) => {
          return input && input.nodeType === Node.ELEMENT_NODE;
        }, descInput);
        
        if (descExists) {
        await descInput.click({ clickCount: 3 }); // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        await descInput.type(projectData.description);
          console.log(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectData.description}`);
        }
      }
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if (projectData.icon) {
      const iconButton = await this.page.evaluateHandle((iconName) => {
        const modal = document.querySelector('.fixed.inset-0');
        if (!modal) return null;
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        const buttons = modal.querySelectorAll('button');
        for (const button of buttons) {
          const svg = button.querySelector('svg');
          if (svg && (button.getAttribute('data-icon') === iconName || 
                     button.className.includes(iconName))) {
            return button;
          }
        }
        return null;
      }, projectData.icon);
      
      if (iconButton) {
        const iconExists = await this.page.evaluate((button) => {
          return button && button.nodeType === Node.ELEMENT_NODE;
        }, iconButton);
        
        if (iconExists) {
        await iconButton.click();
          console.log(`‚úÖ –ò–∫–æ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: ${projectData.icon}`);
        }
      }
    }
  }

  async submitForm() {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å" –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const submitButton = await this.page.evaluateHandle(() => {
      const modal = document.querySelector('.fixed.inset-0');
      if (!modal) return null;
      
      const buttons = modal.querySelectorAll('button');
      for (const button of buttons) {
        const text = button.textContent || '';
        if (text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('–°–æ–∑–¥–∞–Ω–∏–µ')) {
          return button;
        }
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É submit
      for (const button of buttons) {
        if (button.type === 'submit') {
          return button;
        }
      }
      
      return null;
    });
    
    if (!submitButton) {
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    const submitExists = await this.page.evaluate((button) => {
      return button && button.nodeType === Node.ELEMENT_NODE;
    }, submitButton);
    
    if (!submitExists) {
      throw new Error('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    await submitButton.click();
    console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    
    // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    try {
      await this.page.waitForFunction(
        () => !document.querySelector('.fixed.inset-0'),
        { timeout: 10000 }
      );
      console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
      return { success: true, errors: [] };
    } catch (e) {
      console.log('‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –∏–ª–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const errorMessages = await this.page.evaluate(() => {
        const modal = document.querySelector('.fixed.inset-0');
        if (!modal) return [];
        
        const errors = modal.querySelectorAll('.text-red-500, .error, [role="alert"]');
        return Array.from(errors).map(el => el.textContent).filter(text => text.trim());
      });
      
      if (errorMessages.length > 0) {
        console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errorMessages);
        return { success: false, errors: errorMessages };
      }
      
      return { success: false, errors: ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã'] };
    }
  }

  async checkValidationErrors() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const errorSelectors = [
      '.error-message',
      '.validation-error',
      '.field-error',
      '[role="alert"]',
      '.text-red-500',
      '.text-danger'
    ];
    
    const errors = [];
    for (const selector of errorSelectors) {
      try {
        const errorElements = await this.page.$$(selector);
        for (const element of errorElements) {
          const text = await element.evaluate(el => el.textContent.trim());
          if (text) errors.push(text);
        }
      } catch (e) {}
    }
    
    if (errors.length > 0) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
      return errors;
    }
    
    console.log('‚úÖ –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return [];
  }

  async checkSuccessMessage() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ...');
    
    try {
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await Promise.race([
        this.page.waitForSelector('.success-message, .toast-success, .notification-success', 
          { timeout: 5000 }
        ),
        this.page.waitForFunction(
          () => !document.querySelector('[role="dialog"], .modal'),
          { timeout: 5000 }
        )
      ]);
      
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      return true;
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
      return false;
    }
  }

  async testValidProjectCreation() {
    console.log('\nüß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
    
    try {
      await this.openCreateProjectModal();
      await this.fillProjectForm(TEST_PROJECTS.valid);
      const result = await this.submitForm();
      
      if (!result.success) {
        throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.errors.join(', ')}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      this.testResults.push({ test: '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', status: 'PASS' });
      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      
    } catch (error) {
      this.testResults.push({ 
        test: '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞', 
        status: 'FAIL', 
        error: error.message 
      });
      console.log('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
    }
  }

  async testInvalidProjectCreation() {
    console.log('\nüß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    const testExpectations = {
      empty: { shouldHaveErrors: false, description: '–ø—É—Å—Ç—ã–µ –ø–æ–ª—è (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è)' },
      tooLong: { shouldHaveErrors: true, description: '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' },
      invalidDescription: { shouldHaveErrors: true, description: '—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ' }
    };
    
    for (const [testName, projectData] of Object.entries(TEST_PROJECTS.invalid)) {
      const expectation = testExpectations[testName];
      console.log(`\nüìã –ü–æ–¥—Ç–µ—Å—Ç: ${testName} (${expectation.description})`);
      
      try {
        await this.openCreateProjectModal();
        await this.fillProjectForm(projectData);
        const result = await this.submitForm();
        
        if (expectation.shouldHaveErrors) {
          if (result.success) {
            throw new Error('–û–∂–∏–¥–∞–ª–∏—Å—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –Ω–æ —Ñ–æ—Ä–º–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          }
          console.log(`‚úÖ –ü–æ–¥—Ç–µ—Å—Ç ${testName}: –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã`);
        } else {
          if (!result.success) {
            throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.errors.join(', ')}`);
          }
          console.log(`‚úÖ –ü–æ–¥—Ç–µ—Å—Ç ${testName}: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ—Ç –æ—à–∏–±–æ–∫)`);
        }
        
        this.testResults.push({ 
          test: `–í–∞–ª–∏–¥–∞—Ü–∏—è: ${testName}`, 
          status: 'PASS',
          errors: result.errors || []
        });
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        await this.page.keyboard.press('Escape');
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        this.testResults.push({ 
          test: `–í–∞–ª–∏–¥–∞—Ü–∏—è: ${testName}`, 
          status: 'FAIL', 
          error: error.message 
        });
        console.log(`‚ùå –ü–æ–¥—Ç–µ—Å—Ç ${testName} –ø—Ä–æ–≤–∞–ª–µ–Ω:`, error.message);
      }
    }
  }

  async testAPIIntegration() {
    console.log('\nüß™ –¢–ï–°–¢: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API');
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const apiCalls = [];
    
    this.page.on('response', (response) => {
      if (response.url().includes('/api/projects')) {
        apiCalls.push({
          url: response.url(),
          status: response.status(),
          method: response.request().method()
        });
      }
    });
    
    try {
      await this.openCreateProjectModal();
      await this.fillProjectForm(TEST_PROJECTS.valid);
      const result = await this.submitForm();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!result.success) {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${result.errors.join(', ')}`);
      }
      
      // –ñ–¥–µ–º API –≤—ã–∑–æ–≤
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const postCalls = apiCalls.filter(call => call.method === 'POST');
      if (postCalls.length === 0) {
        throw new Error('API –≤—ã–∑–æ–≤ POST /api/projects –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω');
      }
      
      const successfulCalls = postCalls.filter(call => call.status >= 200 && call.status < 300);
      if (successfulCalls.length === 0) {
        throw new Error(`API –≤—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${postCalls[0].status}`);
      }
      
      this.testResults.push({ test: 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', status: 'PASS' });
      console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      
    } catch (error) {
      this.testResults.push({ 
        test: 'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 
        status: 'FAIL', 
        error: error.message 
      });
      console.log('‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
    }
  }

  async runAllTests() {
    try {
      await this.init();
      await this.navigateToApp();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
      await this.testValidProjectCreation();
      await this.testInvalidProjectCreation();
      await this.testAPIIntegration();
      
      // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      this.printTestReport();
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
      if (this.browser) {
        await this.browser.close();
      }
    }
  }

  printTestReport() {
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('=' .repeat(50));
    
    const passed = this.testResults.filter(r => r.status === 'PASS').length;
    const failed = this.testResults.filter(r => r.status === 'FAIL').length;
    
    this.testResults.forEach(result => {
      const status = result.status === 'PASS' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${result.test}`);
      if (result.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
      }
      if (result.errors) {
        console.log(`   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${result.errors.join(', ')}`);
      }
    });
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${passed + failed}`);
    
    if (failed === 0) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï.');
    }
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  const tester = new ProjectCreationTester();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...');
    await tester.cleanup();
    process.exit(0);
  });
  
  tester.runAllTests().catch(console.error);
}

module.exports = ProjectCreationTester;