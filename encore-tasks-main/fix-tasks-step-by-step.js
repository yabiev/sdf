const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD
});

async function fixTasksStepByStep() {
  const client = await pool.connect();
  
  try {
    console.log('üîß –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–ï TASKS');
    console.log('=' .repeat(70));
    
    // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks
    console.log('\nüìã –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tasks...');
    try {
      const deleteResult = await client.query('DELETE FROM tasks');
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deleteResult.rowCount}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
    
    // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('\nüîó –®–∞–≥ 2: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...');
    const constraintsToRemove = [
      'fk_tasks_board_id',
      'fk_tasks_reporter_id', 
      'fk_tasks_assignee_id',
      'fk_tasks_created_by',
      'fk_tasks_parent_task_id'
    ];
    
    for (const constraint of constraintsToRemove) {
      try {
        await client.query(`ALTER TABLE tasks DROP CONSTRAINT IF EXISTS ${constraint}`);
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á: ${constraint}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á ${constraint} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω`);
      }
    }
    
    // –®–∞–≥ 3: –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîÑ –®–∞–≥ 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...');
    
    // 3.1: board_id
    console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ board_id —Å integer –Ω–∞ UUID...');
    try {
      await client.query(`ALTER TABLE tasks ALTER COLUMN board_id TYPE UUID USING NULL`);
      console.log('   ‚úÖ board_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è board_id: ${error.message}`);
    }
    
    // 3.2: reporter_id
    console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ reporter_id —Å integer –Ω–∞ UUID...');
    try {
      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –ø–æ–ª–µ nullable
      await client.query(`ALTER TABLE tasks ALTER COLUMN reporter_id DROP NOT NULL`);
      await client.query(`ALTER TABLE tasks ALTER COLUMN reporter_id TYPE UUID USING NULL`);
      console.log('   ‚úÖ reporter_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è reporter_id: ${error.message}`);
    }
    
    // 3.3: assignee_id
    console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ assignee_id —Å integer –Ω–∞ UUID...');
    try {
      await client.query(`ALTER TABLE tasks ALTER COLUMN assignee_id TYPE UUID USING NULL`);
      console.log('   ‚úÖ assignee_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è assignee_id: ${error.message}`);
    }
    
    // 3.4: parent_task_id
    console.log('   üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ parent_task_id —Å integer –Ω–∞ UUID...');
    try {
      await client.query(`ALTER TABLE tasks ALTER COLUMN parent_task_id TYPE UUID USING NULL`);
      console.log('   ‚úÖ parent_task_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è parent_task_id: ${error.message}`);
    }
    
    // –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ created_by
    console.log('\n‚ûï –®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è created_by...');
    try {
      await client.query(`ALTER TABLE tasks ADD COLUMN IF NOT EXISTS created_by UUID`);
      console.log('‚úÖ –ü–æ–ª–µ created_by –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è created_by: ${error.message}`);
    }
    
    // –®–∞–≥ 5: –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    console.log('\nüîó –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...');
    
    const foreignKeys = [
      {
        name: 'fk_tasks_board_id',
        column: 'board_id',
        references: 'boards(id)',
        onDelete: 'CASCADE'
      },
      {
        name: 'fk_tasks_reporter_id',
        column: 'reporter_id',
        references: 'users(id)',
        onDelete: 'SET NULL'
      },
      {
        name: 'fk_tasks_assignee_id',
        column: 'assignee_id',
        references: 'users(id)',
        onDelete: 'SET NULL'
      },
      {
        name: 'fk_tasks_created_by',
        column: 'created_by',
        references: 'users(id)',
        onDelete: 'SET NULL'
      },
      {
        name: 'fk_tasks_parent_task_id',
        column: 'parent_task_id',
        references: 'tasks(id)',
        onDelete: 'SET NULL'
      }
    ];
    
    for (const fk of foreignKeys) {
      try {
        const sql = `ALTER TABLE tasks ADD CONSTRAINT ${fk.name} FOREIGN KEY (${fk.column}) REFERENCES ${fk.references} ON DELETE ${fk.onDelete}`;
        await client.query(sql);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á: ${fk.name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ ${fk.name}: ${error.message}`);
      }
    }
    
    // –®–∞–≥ 6: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüìä –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_tasks_board_id ON tasks(board_id)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_reporter_id ON tasks(reporter_id)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_assignee_id ON tasks(assignee_id)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_created_by ON tasks(created_by)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_parent_task_id ON tasks(parent_task_id)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority)',
      'CREATE INDEX IF NOT EXISTS idx_tasks_position ON tasks(position)'
    ];
    
    for (const indexSql of indexes) {
      try {
        await client.query(indexSql);
        const indexName = indexSql.match(/idx_\w+/)[0];
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: ${indexName}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: ${error.message}`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´:');
    const finalCheck = await client.query(`
      SELECT 
        column_name, 
        data_type, 
        is_nullable, 
        column_default
      FROM information_schema.columns
      WHERE table_name = 'tasks' 
        AND column_name IN ('board_id', 'reporter_id', 'assignee_id', 'parent_task_id', 'created_by')
      ORDER BY column_name
    `);
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è:');
    finalCheck.rows.forEach((row, index) => {
      console.log(`   ${index + 1}. ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    console.log('\nüîó –ü–†–û–í–ï–†–ö–ê –í–ù–ï–®–ù–ò–• –ö–õ–Æ–ß–ï–ô:');
    const foreignKeysCheck = await client.query(`
      SELECT 
        tc.constraint_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name,
        ccu.column_name AS foreign_column_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
        AND tc.table_schema = kcu.table_schema
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
        AND ccu.table_schema = tc.table_schema
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_name = 'tasks'
        AND kcu.column_name IN ('board_id', 'reporter_id', 'assignee_id', 'parent_task_id', 'created_by')
      ORDER BY kcu.column_name
    `);
    
    if (foreignKeysCheck.rows.length > 0) {
      console.log('‚úÖ –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:');
      foreignKeysCheck.rows.forEach((fk, index) => {
        console.log(`   ${index + 1}. ${fk.column_name} -> ${fk.foreign_table_name}.${fk.foreign_column_name}`);
      });
    } else {
      console.log('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    client.release();
    
    console.log('\n' + '=' .repeat(70));
    console.log('üéâ –ü–û–®–ê–ì–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('‚úÖ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ UUID');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ created_by');
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:');
    console.error(`   ${error.message}`);
    throw error;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
if (require.main === module) {
  fixTasksStepByStep()
    .then(() => {
      console.log('\nüèÅ –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}