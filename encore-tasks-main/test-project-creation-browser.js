// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch –≤ Node.js 22+
// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies
let cookies = '';

const fetchWithCookies = async (url, options = {}) => {
  const headers = { ...options.headers };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies
  if (cookies) {
    headers['Cookie'] = cookies;
  }
  
  const response = await fetch(url, { ...options, headers });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ cookies
  const setCookieHeader = response.headers.get('set-cookie');
  if (setCookieHeader) {
    cookies = setCookieHeader;
  }
  
  return response;
};

const BASE_URL = 'http://localhost:3000';

async function testProjectCreationInBrowser() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const homeResponse = await fetchWithCookies(`${BASE_URL}/`);
    console.log('–°—Ç–∞—Ç—É—Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', homeResponse.status);
    
    if (!homeResponse.ok) {
      throw new Error(`–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${homeResponse.status}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ CSRF —Ç–æ–∫–µ–Ω–∞
    const homeHtml = await homeResponse.text();
    console.log('HTML –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', homeHtml.length);
    
    // 2. –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω –≤ HTML
    console.log('\n2. –ü–æ–∏—Å–∫ CSRF —Ç–æ–∫–µ–Ω–∞...');
    const csrfMatch = homeHtml.match(/name="csrf-token"\s+content="([^"]+)"/i) || 
                     homeHtml.match(/"csrfToken"\s*:\s*"([^"]+)"/i);
    
    let csrfToken = null;
    if (csrfMatch) {
      csrfToken = csrfMatch[1];
      console.log('CSRF —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', csrfToken.substring(0, 20) + '...');
    } else {
      console.log('CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HTML');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies...');
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies:', cookies || '–Ω–µ—Ç cookies');
    
    // 4. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API...');
    try {
      const csrfResponse = await fetchWithCookies(`${BASE_URL}/api/csrf`);
      if (csrfResponse.ok) {
        const csrfData = await csrfResponse.json();
        console.log('CSRF —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API:', csrfData);
        if (csrfData.csrfToken) {
          csrfToken = csrfData.csrfToken;
        }
      } else {
        console.log('API CSRF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', csrfResponse.status);
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —á–µ—Ä–µ–∑ API:', error.message);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    const authResponse = await fetchWithCookies(`${BASE_URL}/api/auth/me`);
    console.log('–°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', authResponse.status);
    
    if (authResponse.ok) {
      const authData = await authResponse.json();
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', authData.user?.email || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    } else {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ admin
      console.log('\n5.1. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ admin...');
      const loginData = {
        email: 'admin@example.com',
        password: 'admin123'
      };
      
      const headers = {
        'Content-Type': 'application/json'
      };
      
      if (csrfToken) {
        headers['X-CSRF-Token'] = csrfToken;
      }
      
      const loginResponse = await fetchWithCookies(`${BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers,
        body: JSON.stringify(loginData)
      });
      
      console.log('–°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞:', loginResponse.status);
      
      if (loginResponse.ok) {
        const loginResult = await loginResponse.json();
        console.log('–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', loginResult);
      } else {
        const loginError = await loginResponse.text();
        console.log('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginError);
      }
    }
    
    // 6. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä',
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä',
      color: '#3B82F6',
      icon: 'folder',
      members: [],
      telegram_chat_id: null,
      telegram_topic_id: null
    };
    
    const projectHeaders = {
      'Content-Type': 'application/json'
    };
    
    if (csrfToken) {
      projectHeaders['X-CSRF-Token'] = csrfToken;
    }
    
    console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', JSON.stringify(projectData, null, 2));
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(projectHeaders, null, 2));
    
    const projectResponse = await fetchWithCookies(`${BASE_URL}/api/projects`, {
      method: 'POST',
      headers: projectHeaders,
      body: JSON.stringify(projectData)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectResponse.status);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(projectResponse.headers.entries()));
    
    if (projectResponse.ok) {
      const projectResult = await projectResponse.json();
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', projectResult);
    } else {
      const errorText = await projectResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', errorText);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        const errorJson = JSON.parse(errorText);
        console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorJson);
      } catch (e) {
        console.log('–û—à–∏–±–∫–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
      }
    }
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ cookies
    console.log('\n7. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ cookies...');
    console.log('–§–∏–Ω–∞–ª—å–Ω—ã–µ cookies:', cookies || '–Ω–µ—Ç cookies');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProjectCreationInBrowser().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});