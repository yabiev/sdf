// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ workflow —Å SQLite
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
  email: `sqlite-test-${Date.now()}@example.com`,
  name: 'SQLite Test User',
  password: 'testpassword123'
};

let authToken = '';
let userId = '';
let projectId = '';
let boardId = '';
let columnId = '';
let taskId = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...(authToken && { 'Authorization': `Bearer ${authToken}` }),
        ...options.headers
      },
      ...options
    });
    
    const data = await response.text();
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = { text: data };
    }
    
    return {
      status: response.status,
      data: jsonData,
      ok: response.ok
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message);
    return {
      status: 0,
      data: { error: error.message },
      ok: false
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logResult(step, result) {
  const status = result.ok ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${step}: ${result.status}`);
  if (!result.ok) {
    console.log('   –û—à–∏–±–∫–∞:', JSON.stringify(result.data, null, 2));
  } else {
    console.log('   –£—Å–ø–µ—Ö:', JSON.stringify(result.data, null, 2));
  }
  console.log('');
}

async function testWorkflow() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Å SQLite\n');
  
  // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const registerResult = await makeRequest(`${BASE_URL}/api/auth/register`, {
    method: 'POST',
    body: JSON.stringify(TEST_USER)
  });
  logResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', registerResult);
  
  if (!registerResult.ok) {
    console.log('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  // 2. –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const loginResult = await makeRequest(`${BASE_URL}/api/auth/login`, {
    method: 'POST',
    body: JSON.stringify({
      email: TEST_USER.email,
      password: TEST_USER.password
    })
  });
  logResult('–õ–æ–≥–∏–Ω', loginResult);
  
  if (!loginResult.ok) {
    console.log('‚ùå –õ–æ–≥–∏–Ω –Ω–µ —É–¥–∞–ª—Å—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  authToken = loginResult.data.token;
  userId = loginResult.data.user.id;
  console.log(`üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authToken.substring(0, 20)}...`);
  console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}\n`);
  
  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
  const projectResult = await makeRequest(`${BASE_URL}/api/projects`, {
    method: 'POST',
    body: JSON.stringify({
      name: 'SQLite Test Project',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è SQLite',
      member_ids: []
    })
  });
  logResult('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', projectResult);
  
  if (!projectResult.ok) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  projectId = projectResult.data.data.id;
  console.log(`üìÅ ID –ø—Ä–æ–µ–∫—Ç–∞: ${projectId}\n`);
  
  // 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
  const boardResult = await makeRequest(`${BASE_URL}/api/boards`, {
    method: 'POST',
    body: JSON.stringify({
      name: 'SQLite Test Board',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ –¥–ª—è SQLite',
      project_id: projectId
    })
  });
  logResult('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏', boardResult);
  
  if (!boardResult.ok) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  boardId = boardResult.data.data.id;
  console.log(`üìã ID –¥–æ—Å–∫–∏: ${boardId}\n`);
  
  // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
  console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏...');
  const columnResult = await makeRequest(`${BASE_URL}/api/columns`, {
    method: 'POST',
    body: JSON.stringify({
      name: 'SQLite Test Column',
      board_id: boardId,
      position: 0
    })
  });
  logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏', columnResult);
  
  if (!columnResult.ok) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç.');
    return;
  }
  
  columnId = columnResult.data.id;
  console.log(`üìù ID –∫–æ–ª–æ–Ω–∫–∏: ${columnId}\n`);
  
  // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
  console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
  const taskResult = await makeRequest(`${BASE_URL}/api/tasks`, {
    method: 'POST',
    body: JSON.stringify({
      title: 'SQLite Test Task',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è SQLite',
      column_id: columnId,
      priority: 'medium',
      assignee_ids: [userId]
    })
  });
  logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', taskResult);
  
  if (!taskResult.ok) {
    console.log('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.');
    return;
  }
  
  taskId = taskResult.data.id;
  console.log(`‚úÖ ID –∑–∞–¥–∞—á–∏: ${taskId}\n`);
  
  // 7. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
  console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
  console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
  console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç: ${projectId}`);
  console.log(`   üìã –î–æ—Å–∫–∞: ${boardId}`);
  console.log(`   üìù –ö–æ–ª–æ–Ω–∫–∞: ${columnId}`);
  console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞: ${taskId}`);
  console.log('');
  console.log('‚úÖ –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å SQLite!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWorkflow().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  process.exit(1);
});