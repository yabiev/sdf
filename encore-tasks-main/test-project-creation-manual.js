const puppeteer = require('puppeteer');

async function testProjectCreation() {
  let browser;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const buttons = await page.$$('button');
    let needsLogin = false;
    for (let button of buttons) {
      const text = await button.evaluate(el => el.textContent);
      if (text && (text.includes('–í—Ö–æ–¥') || text.includes('–í–æ–π—Ç–∏'))) {
        needsLogin = true;
        break;
      }
    }
    
    if (needsLogin) {
      console.log('üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
      
      // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
       const loginButtons = await page.$$('button');
       for (let button of loginButtons) {
        const text = await button.evaluate(el => el.textContent);
        if (text && (text.includes('–í—Ö–æ–¥') || text.includes('–í–æ–π—Ç–∏'))) {
          await button.click();
          break;
        }
      }
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
      console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const emailInput = await page.$('input[type="email"], input[name="email"], input[placeholder*="email"], input[placeholder*="Email"], input[placeholder*="–ø–æ—á—Ç–∞"]');
      if (emailInput) {
        console.log('‚úÖ –ü–æ–ª–µ email –Ω–∞–π–¥–µ–Ω–æ');
        await emailInput.click();
        await emailInput.type('axelencore@mail.ru');
      } else {
        console.log('‚ùå –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const inputs = await page.$$('input');
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${inputs.length} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞`);
        if (inputs.length > 0) {
          await inputs[0].type('axelencore@mail.ru');
        }
      }
      
      const passwordInput = await page.$('input[type="password"], input[name="password"], input[placeholder*="–ø–∞—Ä–æ–ª—å"], input[placeholder*="–ü–∞—Ä–æ–ª—å"]');
      if (passwordInput) {
        console.log('‚úÖ –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–∞–π–¥–µ–Ω–æ');
        await passwordInput.click();
        await passwordInput.type('admin123');
      } else {
        console.log('‚ùå –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const inputs = await page.$$('input');
        if (inputs.length > 1) {
          await inputs[1].type('admin123');
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
      const submitButtons = await page.$$('button[type="submit"]');
      if (submitButtons.length > 0) {
        await submitButtons[0].click();
      } else {
         const submitBtns = await page.$$('button');
         for (let button of submitBtns) {
          const text = await button.evaluate(el => el.textContent);
          if (text && (text.includes('–í–æ–π—Ç–∏') || text.includes('–í—Ö–æ–¥'))) {
            await button.click();
            break;
          }
        }
      }
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const currentUrl = page.url();
      console.log('–¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', currentUrl);
      
      const stillNeedsLogin = await page.evaluate(() => {
        const buttons = document.querySelectorAll('button');
        for (let button of buttons) {
          if (button.textContent.includes('–í—Ö–æ–¥') || button.textContent.includes('–í–æ–π—Ç–∏')) {
            return true;
          }
        }
        return false;
      });
      
      if (stillNeedsLogin) {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤—Å–µ –µ—â–µ –≤–∏–¥–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞');
      } else {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    }
    
    // –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
    const createButtons = await page.$$eval('button', buttons => 
      buttons.filter(btn => 
        btn.textContent.includes('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç') || 
        btn.textContent.includes('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç') ||
        btn.textContent.includes('+')
      ).map(btn => btn.textContent)
    );
    
    console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', createButtons);
    
    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    let createButton = null;
    const allButtons = await page.$$('button');
    
    for (let button of allButtons) {
      const text = await button.evaluate(el => el.textContent);
      console.log('–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:', text);
      if (text && (text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('+') || text.includes('–ù–æ–≤—ã–π') || text.includes('–ø—Ä–æ–µ–∫—Ç'))) {
        createButton = button;
        console.log('–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', text);
        break;
      }
    }
    
    if (!createButton) {
      throw new Error('–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
    await createButton.click();
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
    await page.waitForSelector('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–ù–∞–∑–≤–∞–Ω–∏–µ"]', { timeout: 5000 });
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const nameInput = await page.$('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–ù–∞–∑–≤–∞–Ω–∏–µ"]');
    if (nameInput) {
      await nameInput.clear();
      await nameInput.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
    }
    
    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const descInput = await page.$('textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="–û–ø–∏—Å–∞–Ω–∏–µ"]');
    if (descInput) {
      await descInput.type('–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');
    
    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitButtons = await page.$$('button[type="submit"]');
    if (submitButtons.length > 0) {
      await submitButtons[0].click();
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formButtons = await page.$$('button');
      for (let button of formButtons) {
        const text = await button.evaluate(el => el.textContent);
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏:', text);
        if (text && (text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'))) {
          console.log('–ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ:', text);
          await button.click();
          break;
        }
      }
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞...');
    const logs = await page.evaluate(() => {
      return window.console._logs || [];
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const projectExists = await page.evaluate(() => {
      const projectElements = document.querySelectorAll('[data-testid="project-item"], .project-item, .project-card');
      for (let element of projectElements) {
        if (element.textContent.includes('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')) {
          return true;
        }
      }
      return false;
    });
    
    if (projectExists) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ!');
    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
      const pageContent = await page.content();
      if (pageContent.includes('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')) {
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ!');
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...');
    await page.reload({ waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const projectPersists = await page.evaluate(() => {
      const pageText = document.body.textContent;
      return pageText.includes('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
    });
    
    if (projectPersists) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã!');
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è');
    console.log('‚úÖ –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è');
    console.log(projectExists ? '‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ' : '‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ');
    console.log(projectPersists ? '‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : '‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
    if (browser) {
      try {
        const page = (await browser.pages())[0];
        if (page) {
          const url = page.url();
          console.log('–¢–µ–∫—É—â–∏–π URL:', url);
          
          // –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          await page.screenshot({ path: 'error-screenshot.png', fullPage: true });
          console.log('–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ error-screenshot.png');
        }
      } catch (screenshotError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:', screenshotError.message);
      }
    }
  } finally {
    if (browser) {
      console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProjectCreation();