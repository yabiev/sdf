const { Client } = require('pg');
const bcrypt = require('bcryptjs');

async function fixPostgresPassword() {
  const client = new Client({
    host: 'localhost',
    port: 5432,
    database: 'encore_tasks',
    user: 'postgres',
    password: process.env.POSTGRES_PASSWORD || 'postgres'
  });

  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userResult = await client.query('SELECT id, email, password_hash FROM users WHERE email = $1', ['test@example.com']);
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const user = userResult.rows[0];
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
    console.log('  ID:', user.id);
    console.log('  Email:', user.email);
    console.log('  –¢–µ–∫—É—â–∏–π hash:', user.password_hash ? user.password_hash.substring(0, 20) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
    console.log('\nüîê –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è...');
    const newPassword = 'password123';
    const newPasswordHash = await bcrypt.hash(newPassword, 12);
    console.log('‚úÖ –ù–æ–≤—ã–π —Ö–µ—à —Å–æ–∑–¥–∞–Ω:', newPasswordHash.substring(0, 20) + '...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    console.log('\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const updateResult = await client.query(
      'UPDATE users SET password_hash = $1, updated_at = NOW() WHERE email = $2',
      [newPasswordHash, 'test@example.com']
    );
    
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫:', updateResult.rowCount);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const updatedUserResult = await client.query('SELECT id, email, password_hash FROM users WHERE email = $1', ['test@example.com']);
    const updatedUser = updatedUserResult.rows[0];
    
    console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
    console.log('  ID:', updatedUser.id);
    console.log('  Email:', updatedUser.email);
    console.log('  –ù–æ–≤—ã–π hash:', updatedUser.password_hash.substring(0, 20) + '...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    const isValid = await bcrypt.compare(newPassword, updatedUser.password_hash);
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å "password123" –≤–∞–ª–∏–¥–µ–Ω:', isValid);
    
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ —Å:');
    console.log('   Email: test@example.com');
    console.log('   Password: password123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.code) {
      console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    }
  } finally {
    await client.end();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

fixPostgresPassword();