const fetch = require('node-fetch');
const Database = require('better-sqlite3');
const path = require('path');

async function testBoardCreation() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ —á–µ—Ä–µ–∑ API...');
    
    // 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('\n1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
    const JWT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJkMDEyYjA3OS01Nzk4LTQ5ZDUtOGNmZi0wZTFkYmVhNTgyMmUiLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwidGltZXN0YW1wIjoxNzU2MjgwNDEyMzU2LCJyYW5kb20iOiI0MWR4a2M2OXJxYyIsImlhdCI6MTc1NjI4MDQxMiwiZXhwIjoxNzU2ODg1MjEyfQ.QBoGB6-ToDaXTTqMh-3N-FN6n23rd0G4BCqOXBxxIPQ';
    const token = JWT_TOKEN;
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π project_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ project_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const dbPath = path.join(__dirname, 'database.sqlite');
    const db = new Database(dbPath);
    
    const projects = db.prepare('SELECT id, name FROM projects LIMIT 1').all();
    
    if (projects.length === 0) {
      throw new Error('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
    
    const projectId = projects[0].id;
    const projectName = projects[0].name;
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: ${projectName} (ID: ${projectId})`);
    
    db.close();
    
    // 3. –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
    const boardData = {
      name: `–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ ${Date.now()}`,
      description: '–î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–æ–º',
      project_id: projectId
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏:', JSON.stringify(boardData, null, 2));
    
    const createResponse = await fetch('http://localhost:3000/api/boards', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(boardData)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', createResponse.status);
    
    const responseData = await createResponse.json();
    console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(responseData, null, 2));
    
    if (createResponse.status === 201) {
      console.log('\n‚úÖ –£–°–ü–ï–•: –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏:', responseData.id);
      console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', responseData.name);
      console.log('–û–ø–∏—Å–∞–Ω–∏–µ:', responseData.description);
      console.log('–ü—Ä–æ–µ–∫—Ç ID:', responseData.project_id);
    } else {
      console.log('\n‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É');
      console.log('–°—Ç–∞—Ç—É—Å:', createResponse.status);
      console.log('–û—à–∏–±–∫–∞:', responseData.message || responseData.error);
    }
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testBoardCreation();