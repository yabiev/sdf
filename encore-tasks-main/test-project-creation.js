const puppeteer = require('puppeteer');

(async () => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginButton = await page.$('button[type="submit"]');
    if (loginButton) {
      console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
      
      // –í–≤–æ–¥–∏–º email
      const emailInput = await page.$('input[type="email"]');
      if (emailInput) {
        await emailInput.click();
        await emailInput.type('axelencore@mail.ru');
        console.log('‚úâÔ∏è Email –≤–≤–µ–¥–µ–Ω');
      }
      
      // –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
      const passwordInput = await page.$('input[type="password"]');
      if (passwordInput) {
        await passwordInput.click();
        await passwordInput.type('Ad580dc6axelencore');
        console.log('üîë –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
      }
      
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
      await loginButton.click();
      console.log('üö™ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å –ø–ª—é—Å–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–∑–¥–∞–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    let createButton = null;
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
    createButton = await page.evaluateHandle(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.find(btn => btn.textContent && btn.textContent.includes('–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'));
    });
    
    if (createButton && createButton.asElement) {
      createButton = createButton.asElement();
    } else {
      createButton = null;
    }
    
    if (!createButton) {
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –∫–Ω–æ–ø–∫–∞ —Å –ø–ª—é—Å–æ–º
      createButton = await page.$('button[title*="–°–æ–∑–¥–∞—Ç—å"], button[aria-label*="–°–æ–∑–¥–∞—Ç—å"]');
    }
    
    if (!createButton) {
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
      const buttons = await page.$$('button');
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${buttons.length} –∫–Ω–æ–ø–æ–∫`);
      
      for (let i = 0; i < buttons.length; i++) {
        const buttonText = await buttons[i].evaluate(el => el.textContent?.trim());
        const buttonTitle = await buttons[i].evaluate(el => el.title || el.getAttribute('aria-label') || '');
        console.log(`–ö–Ω–æ–ø–∫–∞ ${i}: "${buttonText}" (title: "${buttonTitle}")`);
        
        if (buttonText && (buttonText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || buttonText.toLowerCase().includes('–Ω–æ–≤—ã–π') || buttonText.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å'))) {
          createButton = buttons[i];
          console.log(`–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–Ω–æ–ø–∫–∞: "${buttonText}"`);
          break;
        }
      }
    }
    
    if (createButton) {
      await createButton.click();
      console.log('–ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      const nameInput = await page.$('input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="name"], input[name="name"], input[id="name"]');
      
      if (nameInput) {
        console.log('üìù –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
        const projectName = `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ${Date.now()}`;
        await nameInput.click();
        await nameInput.type(projectName);
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        let saveButton = await page.$('button[type="submit"]');
        
        if (!saveButton) {
          // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
          saveButton = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(btn => {
              const text = btn.textContent?.toLowerCase() || '';
              return text.includes('—Å–æ–∑–¥–∞—Ç—å') || text.includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') || text.includes('–¥–æ–±–∞–≤–∏—Ç—å');
            });
          });
          
          if (saveButton && saveButton.asElement) {
            saveButton = saveButton.asElement();
          } else {
            saveButton = null;
          }
        }
        
        if (saveButton) {
          console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç...');
          await saveButton.click();
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
          console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
      } else {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const pageContent = await page.content();
      console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):');
      console.log(pageContent.substring(0, 1000));
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
    console.log('\nüìã –õ–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:');
    const logs = await page.evaluate(() => {
      return window.console._logs || [];
    });
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      console.log(`üñ•Ô∏è Console ${msg.type()}: ${msg.text()}`);
    });
    
    await new Promise(resolve => setTimeout(resolve, 3000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    await browser.close();
  }
})();