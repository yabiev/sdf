const { Pool } = require('pg');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
require('dotenv').config();

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 5432,
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  ssl: process.env.DB_SSL === 'true'
});

async function debugGetProjectsByUserId() {
  const client = await pool.connect();
  
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –º–µ—Ç–æ–¥–∞ getProjectsByUserId');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 1
    const userId = 1;
    console.log(`\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
    console.log('\nüìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ:');
    const allProjectsResult = await client.query('SELECT * FROM projects ORDER BY created_at DESC');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', allProjectsResult.rows.length);
    allProjectsResult.rows.forEach(project => {
      console.log(`  - ID: ${project.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}, owner_id: ${project.owner_id}, is_active: ${project.is_active}`);
    });
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º SQL –∑–∞–ø—Ä–æ—Å –∏–∑ getProjectsByUserId
    console.log('\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ getProjectsByUserId:');
    const query = `
      SELECT DISTINCT p.* FROM projects p 
      LEFT JOIN project_members pm ON p.id = pm.project_id 
      WHERE (p.owner_id = $1 OR pm.user_id = $1) AND p.is_active = true 
      ORDER BY p.created_at DESC
    `;
    console.log('SQL:', query);
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', [userId]);
    
    const result = await client.query(query, [userId]);
    console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:', result.rows.length);
    result.rows.forEach(project => {
      console.log(`  - ID: ${project.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}, owner_id: ${project.owner_id}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—É project_members
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã project_members:');
    const membersResult = await client.query('SELECT * FROM project_members WHERE user_id = $1', [userId]);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ project_members –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', membersResult.rows.length);
    membersResult.rows.forEach(member => {
      console.log(`  - project_id: ${member.project_id}, user_id: ${member.user_id}, role: ${member.role}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —É—Å–ª–æ–≤–∏–µ owner_id –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('\nüë§ –ü—Ä–æ–µ–∫—Ç—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º:');
    const ownerResult = await client.query('SELECT * FROM projects WHERE owner_id = $1 AND is_active = true', [userId]);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü:', ownerResult.rows.length);
    ownerResult.rows.forEach(project => {
      console.log(`  - ID: ${project.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

debugGetProjectsByUserId().catch(console.error);