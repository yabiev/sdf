const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return {};
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^[\"']|[\"']$/g, '');
      }
    }
  });
  
  return env;
}

async function testTaskStatuses() {
  const env = loadEnvFile();
  
  const config = {
    host: env.POSTGRES_HOST || 'localhost',
    port: parseInt(env.POSTGRES_PORT) || 5432,
    database: env.POSTGRES_DB || 'encore_tasks',
    user: env.POSTGRES_USER || 'postgres',
    password: env.POSTGRES_PASSWORD || ''
  };
  
  const pool = new Pool(config);
  
  try {
    const client = await pool.connect();
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏...');
    
    // –û—á–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    await client.query("DELETE FROM tasks WHERE title LIKE 'Test Task %'");
    
    // –ü–æ–ª—É—á–∏–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π board_id –∏ project_id
    const boardResult = await client.query('SELECT id, project_id FROM boards LIMIT 1');
    if (boardResult.rows.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const boardId = boardResult.rows[0].id;
    const projectId = boardResult.rows[0].project_id;
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É —Å ID: ${boardId}`);
    console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç —Å ID: ${projectId}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    const statuses = ['todo', 'in_progress', 'done', 'archived'];
    const createdTasks = [];
    
    for (const status of statuses) {
      try {
        const result = await client.query(
          'INSERT INTO tasks (title, description, status, board_id, project_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, NOW(), NOW()) RETURNING *',
          [`Test Task ${status}`, `–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${status}`, status, boardId, projectId]
        );
        
        const task = result.rows[0];
        createdTasks.push(task);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '${status}': ID ${task.id}`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '${status}': ${error.message}`);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å
    try {
      await client.query(
        'INSERT INTO tasks (title, description, status, board_id, project_id, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, NOW(), NOW())',
        ['Test Task Invalid', '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º —Å—Ç–∞—Ç—É—Å–æ–º', 'invalid_status', boardId, projectId]
      );
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç!');
    } catch (error) {
      console.log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${error.message}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:');
    const tasksResult = await client.query(
      "SELECT id, title, status, created_at FROM tasks WHERE title LIKE 'Test Task %' ORDER BY created_at"
    );
    
    tasksResult.rows.forEach(task => {
      console.log(`   ID ${task.id}: ${task.title} (${task.status})`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    if (createdTasks.length > 0) {
      const taskToUpdate = createdTasks[0];
      console.log(`\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ ID ${taskToUpdate.id}...`);
      
      for (const newStatus of ['in_progress', 'done', 'archived', 'todo']) {
        try {
          await client.query(
            'UPDATE tasks SET status = $1, updated_at = NOW() WHERE id = $2',
            [newStatus, taskToUpdate.id]
          );
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '${newStatus}'`);
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ '${newStatus}': ${error.message}`);
        }
      }
    }
    
    // –û—á–∏—Å—Ç–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await client.query("DELETE FROM tasks WHERE title LIKE 'Test Task %'");
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    
    client.release();
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

testTaskStatuses().catch(console.error);