const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const fs = require('fs');

async function resetPassword() {
  console.log('üîß –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@example.com...');
  
  const dbPath = 'database.sqlite';
  
  if (!fs.existsSync(dbPath)) {
    console.error('‚ùå –§–∞–π–ª database.sqlite –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
  const db = new sqlite3.Database(dbPath);
  
  return new Promise((resolve, reject) => {
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@example.com
    db.get(
      "SELECT * FROM users WHERE email = ?",
      ['test@example.com'],
      async (err, user) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
          reject(err);
          return;
        }
        
        if (!user) {
          console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω');
          reject(new Error('User not found'));
          return;
        }
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ID=${user.id}, Email=${user.email}`);
        console.log(`üîê –¢–µ–∫—É—â–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è: ${user.password_hash}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        const isCurrentPasswordValid = user.password_hash ? bcrypt.compareSync('test123', user.password_hash) : false;
        console.log(`üîç –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å 'test123' –≤–∞–ª–∏–¥–µ–Ω: ${isCurrentPasswordValid}`);
        
        if (!isCurrentPasswordValid) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
          console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è...');
          const newPasswordHash = bcrypt.hashSync('test123', 12);
          console.log(`üîê –ù–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è: ${newPasswordHash}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          db.run(
            "UPDATE users SET password_hash = ?, updated_at = ? WHERE id = ?",
            [newPasswordHash, new Date().toISOString(), user.id],
            function(err) {
              if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', err.message);
                reject(err);
                return;
              }
              
              console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
              
              // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
              const isNewPasswordValid = bcrypt.compareSync('test123', newPasswordHash);
              console.log(`üîç –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å 'test123' –≤–∞–ª–∏–¥–µ–Ω: ${isNewPasswordValid}`);
              
              console.log('\nüéâ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
              console.log('üìß Email: test@example.com');
              console.log('üîë –ü–∞—Ä–æ–ª—å: test123');
              
              db.close();
              resolve();
            }
          );
        } else {
          console.log('‚úÖ –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å —É–∂–µ –≤–∞–ª–∏–¥–µ–Ω');
          console.log('\nüéâ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
          console.log('üìß Email: test@example.com');
          console.log('üîë –ü–∞—Ä–æ–ª—å: test123');
          
          db.close();
          resolve();
        }
      }
    );
  });
}

resetPassword().catch(console.error);