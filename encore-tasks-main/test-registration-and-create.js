const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function testRegistrationAndProjectCreation() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const browser = await puppeteer.launch({ 
        headless: false,
        defaultViewport: null,
        args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
        if (msg.type() === 'error') {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
        }
    });
    
    page.on('pageerror', error => {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    });
    
    try {
        console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
        
        await wait(2000);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const pageContent = await page.content();
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):', pageContent.substring(0, 300));
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        const registerButtons = await page.$$eval('button, a', elements => {
            return elements.map(el => ({
                text: el.textContent.trim(),
                tagName: el.tagName,
                href: el.href || '',
                className: el.className
            })).filter(el => 
                el.text.toLowerCase().includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü') ||
                el.text.toLowerCase().includes('signup') ||
                el.href.includes('register') ||
                el.href.includes('signup')
            );
        });
        
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerButtons);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        let registerClicked = false;
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
        const allButtons = await page.$$('button');
        for (let button of allButtons) {
            const text = await page.evaluate(el => el.textContent.trim(), button);
            if (text.toLowerCase().includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü')) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', text);
                await button.click();
                registerClicked = true;
                await wait(2000);
                break;
            }
        }
        
        if (!registerClicked) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é');
        }
        
        // –ò—â–µ–º –ø–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await wait(1000);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testEmail = `test${Date.now()}@example.com`;
        const testPassword = 'TestPassword123!';
        const testName = '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
        console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email:', testEmail);
        
        // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        const emailInput = await page.$('input[type="email"]');
        const passwordInput = await page.$('input[type="password"]');
        const nameInput = await page.$('input[name="name"]');
        
        if (emailInput) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email');
            await page.evaluate(input => input.value = '', emailInput);
            await emailInput.type(testEmail);
        } else {
            console.log('‚ùå –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        if (passwordInput) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è');
            await page.evaluate(input => input.value = '', passwordInput);
            await passwordInput.type(testPassword);
        } else {
            console.log('‚ùå –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        if (nameInput) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –∏–º–µ–Ω–∏');
            await page.evaluate(input => input.value = '', nameInput);
            await nameInput.type(testName);
        } else {
            console.log('‚ùå –ü–æ–ª–µ –∏–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
        
        await wait(1000);
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        const submitButton = await page.$('button[type="submit"]');
        
        if (submitButton) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
            await submitButton.click();
            await wait(3000);
        } else {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const allSubmitButtons = await page.$$('button');
            for (let button of allSubmitButtons) {
                const text = await page.evaluate(el => el.textContent.trim(), button);
                if (text.toLowerCase().includes('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä') || text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || text.toLowerCase().includes('–≤–æ–π—Ç–∏')) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', text);
                    await button.click();
                    await wait(3000);
                    break;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const currentUrl = page.url();
        console.log('üåê –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', currentUrl);
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        const projectElements = await page.$$eval('button, a, div[role="button"]', elements => {
            return elements.map(el => ({
                text: el.textContent.trim(),
                tagName: el.tagName,
                className: el.className,
                id: el.id
            })).filter(el => 
                el.text.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') ||
                el.text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') ||
                el.text.toLowerCase().includes('–Ω–æ–≤—ã–π') ||
                el.text.includes('+') ||
                el.className.toLowerCase().includes('create') ||
                el.className.toLowerCase().includes('add') ||
                el.id.toLowerCase().includes('create')
            );
        });
        
        console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectElements);
        
        if (projectElements.length === 0) {
            console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allPageButtons = await page.$$eval('button, a', elements => {
                return elements.map(el => ({
                    text: el.textContent.trim(),
                    tagName: el.tagName,
                    className: el.className
                })).filter(el => el.text.length > 0);
            });
            
            console.log('üîç –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allPageButtons.slice(0, 10));
        } else {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectElements.length);
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if (projectElements.length > 0) {
                console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
                
                const createButtons = await page.$$('button, a, div[role="button"]');
                for (let button of createButtons) {
                    const text = await page.evaluate(el => el.textContent.trim(), button);
                    if (text.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') || text.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || text.includes('+')) {
                        console.log('‚úÖ –ö–ª–∏–∫–∞–µ–º –Ω–∞:', text);
                        await button.click();
                        await wait(2000);
                        break;
                    }
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await page.screenshot({ path: 'registration-test-result.png', fullPage: true });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: registration-test-result.png');
        
        // –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
        const errors = await page.evaluate(() => {
            return window.console.errors || [];
        });
        
        if (errors.length > 0) {
            console.log('‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:', errors);
        } else {
            console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        }
        
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        await page.screenshot({ path: 'error-screenshot.png' });
        console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } finally {
        console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...');
        await wait(15000);
        await browser.close();
    }
}

testRegistrationAndProjectCreation();