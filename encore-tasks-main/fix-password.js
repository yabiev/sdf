// –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const Database = require('better-sqlite3');
const path = require('path');
const bcrypt = require('bcryptjs');

function fixPassword() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@example.com...');
  
  const dbPath = path.join(__dirname, 'database.sqlite');
  const db = new Database(dbPath);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const user = db.prepare('SELECT * FROM users WHERE email = ?').get('test@example.com');
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
    console.log('üîê –¢–µ–∫—É—â–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è:', user.password_hash?.substring(0, 20) + '...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è 'password123'
    const newPasswordHash = bcrypt.hashSync('password123', 12);
    console.log('üîë –ù–æ–≤—ã–π —Ö–µ—à –ø–∞—Ä–æ–ª—è:', newPasswordHash.substring(0, 20) + '...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateStmt = db.prepare('UPDATE users SET password_hash = ? WHERE id = ?');
    updateStmt.run(newPasswordHash, user.id);
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    const isValid = bcrypt.compareSync('password123', newPasswordHash);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è:', isValid ? '‚úÖ –í–∞–ª–∏–¥–µ–Ω' : '‚ùå –ù–µ –≤–∞–ª–∏–¥–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    db.close();
  }
}

try {
  fixPassword();
  console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ');
} catch (error) {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
}