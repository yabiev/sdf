const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'encore_tasks',
  user: 'postgres',
  password: 'postgres'
});

async function debugColumnsAPI() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∫–æ–ª–æ–Ω–æ–∫...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã columns
    console.log('\n1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã columns:');
    const columnsStructure = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default 
      FROM information_schema.columns 
      WHERE table_name = 'columns' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    console.table(columnsStructure.rows);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å–∫—É —Å ID 10
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å–∫–∏ —Å ID 10:');
    const board = await pool.query('SELECT * FROM boards WHERE id = $1', [10]);
    if (board.rows.length > 0) {
      console.log('–î–æ—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', board.rows[0]);
    } else {
      console.log('‚ùå –î–æ—Å–∫–∞ —Å ID 10 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 2
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 2:');
    const user = await pool.query('SELECT id, email, name FROM users WHERE id = $1', [2]);
    if (user.rows.length > 0) {
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.rows[0]);
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 2 –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É:');
    const projectId = board.rows[0].project_id;
    const access = await pool.query(`
      SELECT pm.*, p.name as project_name 
      FROM project_members pm 
      JOIN projects p ON p.id = pm.project_id 
      WHERE pm.user_id = $1 AND pm.project_id = $2
    `, [2, projectId]);
    
    if (access.rows.length > 0) {
      console.log('–î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É –µ—Å—Ç—å:', access.rows[0]);
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É!');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞
      const creator = await pool.query('SELECT * FROM projects WHERE id = $1 AND created_by = $2', [projectId, 2]);
      if (creator.rows.length > 0) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞');
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –ø—Ä–æ–µ–∫—Ç–∞');
        return;
      }
    }
    
    // 5. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î:');
    try {
      const newColumn = await pool.query(`
        INSERT INTO columns (title, board_id, position, color, settings, created_by) 
        VALUES ($1, $2, $3, $4, $5, $6) 
        RETURNING *
      `, ['Test Column Direct', 10, 0, '#6B7280', '{}', 2]);
      
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', newColumn.rows[0]);
      
      // –£–¥–∞–ª–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
      await pool.query('DELETE FROM columns WHERE id = $1', [newColumn.rows[0].id]);
      console.log('üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', error.message);
    }
    
    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await pool.end();
  }
}

debugColumnsAPI();