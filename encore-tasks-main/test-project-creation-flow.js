const puppeteer = require('puppeteer');

(async () => {
  console.log('üöÄ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
    const loginForm = await page.$('form');
    if (loginForm) {
      console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
      await page.type('input[type="email"]', 'admin@example.com');
      await page.type('input[type="password"]', 'admin123');
      await page.click('button[type="submit"]');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    console.log('üìç –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:', page.url());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üîç –ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectUrls = [
      'http://localhost:3001/projects',
      'http://localhost:3001/dashboard',
      'http://localhost:3001/admin',
      'http://localhost:3001/create-project'
    ];
    
    for (const url of projectUrls) {
      console.log(`üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º URL: ${url}`);
      try {
        await page.goto(url, { waitUntil: 'networkidle2', timeout: 5000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const currentUrl = page.url();
        console.log(`üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: ${currentUrl}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        const createElements = await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button, a, [role="button"]'));
          const createButtons = buttons.filter(btn => {
            const text = btn.textContent.toLowerCase();
            return text.includes('—Å–æ–∑–¥–∞—Ç—å') || text.includes('create') || 
                   text.includes('–Ω–æ–≤—ã–π') || text.includes('new') || 
                   text.includes('+') || text.includes('–¥–æ–±–∞–≤–∏—Ç—å') || text.includes('add');
          });
          
          return createButtons.map(btn => ({
            tag: btn.tagName,
            text: btn.textContent.trim(),
            className: btn.className,
            href: btn.href || ''
          }));
        });
        
        if (createElements.length > 0) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
          createElements.forEach((el, index) => {
            console.log(`  ${index + 1}. ${el.tag}: "${el.text}" (class: ${el.className})`);
          });
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
          console.log('üñ±Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è...');
          const firstButton = createElements[0];
          
          if (firstButton.tag === 'A' && firstButton.href) {
            await page.goto(firstButton.href);
          } else {
            await page.evaluate((buttonText) => {
              const buttons = Array.from(document.querySelectorAll('button, a, [role="button"]'));
              const targetButton = buttons.find(btn => btn.textContent.trim() === buttonText);
              if (targetButton) {
                targetButton.click();
              }
            }, firstButton.text);
          }
          
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
          const projectForm = await page.evaluate(() => {
            const forms = Array.from(document.querySelectorAll('form'));
            const inputs = Array.from(document.querySelectorAll('input[type="text"], input[name*="name"], input[name*="title"], textarea'));
            
            return {
              formsCount: forms.length,
              inputsCount: inputs.length,
              inputs: inputs.map(input => ({
                type: input.type,
                name: input.name,
                placeholder: input.placeholder
              }))
            };
          });
          
          console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ö:', projectForm);
          
          if (projectForm.inputsCount > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞!');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
            
            const nameInput = await page.$('input[name*="name"], input[name*="title"], input[type="text"]');
            if (nameInput) {
              await nameInput.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now());
              console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ');
            }
            
            const descInput = await page.$('textarea, input[name*="desc"], input[name*="description"]');
            if (descInput) {
              await descInput.type('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
              console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ');
            }
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const saveButton = await page.evaluate(() => {
              const buttons = Array.from(document.querySelectorAll('button, input[type="submit"]'));
              const saveBtn = buttons.find(btn => {
                const text = btn.textContent.toLowerCase();
                return text.includes('—Å–æ–∑–¥–∞—Ç—å') || text.includes('create') || 
                       text.includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') || text.includes('save') ||
                       text.includes('–¥–æ–±–∞–≤–∏—Ç—å') || text.includes('add');
              });
              return saveBtn ? saveBtn.textContent.trim() : null;
            });
            
            if (saveButton) {
              console.log(`üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É: ${saveButton}`);
              await page.evaluate((buttonText) => {
                const buttons = Array.from(document.querySelectorAll('button, input[type="submit"]'));
                const targetButton = buttons.find(btn => btn.textContent.trim() === buttonText);
                if (targetButton) {
                  targetButton.click();
                }
              }, saveButton);
              
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              console.log('üìç URL –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:', page.url());
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
              const result = await page.evaluate(() => {
                const successMessages = Array.from(document.querySelectorAll('*')).filter(el => {
                  const text = el.textContent.toLowerCase();
                  return text.includes('—É—Å–ø–µ—à–Ω–æ') || text.includes('—Å–æ–∑–¥–∞–Ω') || 
                         text.includes('success') || text.includes('created');
                });
                
                return {
                  successCount: successMessages.length,
                  messages: successMessages.map(el => el.textContent.trim()).slice(0, 3)
                };
              });
              
              if (result.successCount > 0) {
                console.log('üéâ –£–°–ü–ï–•! –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
                console.log('üìã –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ:', result.messages);
                
                // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—Ö–∞
                await page.screenshot({ path: 'project-created-success.png', fullPage: true });
                console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: project-created-success.png');
                
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
                await new Promise(resolve => setTimeout(resolve, 10000));
                
                await browser.close();
                return;
              } else {
                console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏...');
              }
            } else {
              console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
          } else {
            console.log('‚ùå –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }
          
          break; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        } else {
          console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ ${url}:`, error.message);
      }
    }
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    await browser.close();
  }
})();