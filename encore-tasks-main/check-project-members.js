const { Pool } = require('pg');
require('dotenv').config();

// –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ postgres –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const defaultPool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: 'postgres',
  user: process.env.DB_USER || 'postgres',
  password: 'postgres', // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
  ssl: process.env.DB_SSL === 'true'
});

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: 'postgres',
  ssl: process.env.DB_SSL === 'true'
});

async function checkProjectMembers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ postgres
    let defaultClient;
    try {
      defaultClient = await defaultPool.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö encore_tasks
      const dbCheck = await defaultClient.query(`
        SELECT 1 FROM pg_database WHERE datname = 'encore_tasks'
      `);
      
      if (dbCheck.rows.length === 0) {
        console.log('üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö encore_tasks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—ë–º...');
        await defaultClient.query('CREATE DATABASE encore_tasks');
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö encore_tasks —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö encore_tasks —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
      
      defaultClient.release();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
      if (defaultClient) defaultClient.release();
      return;
    }
    
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö encore_tasks...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ encore_tasks
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ encore_tasks —É—Å–ø–µ—à–Ω–æ');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    const tableCheck = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:');
    tableCheck.rows.forEach(col => {
      console.log(`  ${col.column_name}: ${col.data_type}`);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤)
    const usersResult = await client.query('SELECT id, name, email FROM users ORDER BY id');
    console.log('\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
    usersResult.rows.forEach(user => {
      console.log(`  ID: ${user.id}, Name: ${user.name}, Email: ${user.email}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã projects
    const projectTableCheck = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'projects' 
      ORDER BY ordinal_position
    `);
    
    console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã projects:');
    projectTableCheck.rows.forEach(col => {
      console.log(`  ${col.column_name}: ${col.data_type}`);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤)
    const projectsResult = await client.query('SELECT id, name, owner_id FROM projects ORDER BY id');
    console.log('\nüìÅ –ü—Ä–æ–µ–∫—Ç—ã:');
    projectsResult.rows.forEach(project => {
      console.log(`  ID: ${project.id}, Name: ${project.name}, Owner: ${project.owner_id}`);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const membersResult = await client.query(`
      SELECT 
        pm.project_id, 
        pm.user_id, 
        pm.role,
        p.name as project_name,
        u.name as user_name
      FROM project_members pm
      JOIN projects p ON pm.project_id = p.id
      JOIN users u ON pm.user_id = u.id
      ORDER BY pm.project_id, pm.user_id
    `);
    
    console.log('\nüîó –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    if (membersResult.rows.length === 0) {
      console.log('  ‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö!');
    } else {
      membersResult.rows.forEach(member => {
        console.log(`  –ü—Ä–æ–µ–∫—Ç: ${member.project_name} (ID: ${member.project_id}), –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${member.user_name} (ID: ${member.user_id}), –†–æ–ª—å: ${member.role}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    if (usersResult.rows.length > 0 && projectsResult.rows.length > 0) {
      const firstUser = usersResult.rows[0];
      const firstProject = projectsResult.rows[0];
      
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${firstUser.name} (ID: ${firstUser.id}) –∫ –ø—Ä–æ–µ–∫—Ç—É ${firstProject.name} (ID: ${firstProject.id})`);
      
      const accessCheck = await client.query(`
        SELECT EXISTS(
          SELECT 1 FROM project_members 
          WHERE project_id = $1 AND user_id = $2
        ) as has_access
      `, [firstProject.id, firstUser.id]);
      
      console.log(`  –î–æ—Å—Ç—É–ø: ${accessCheck.rows[0].has_access ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}`);
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      if (!accessCheck.rows[0].has_access) {
        console.log(`\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${firstUser.name} –≤ –ø—Ä–æ–µ–∫—Ç ${firstProject.name} —Å —Ä–æ–ª—å—é 'member'`);
        await client.query(`
          INSERT INTO project_members (project_id, user_id, role, created_at)
          VALUES ($1, $2, 'member', NOW())
        `, [firstProject.id, firstUser.id]);
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!');
      }
    }
    
    client.release();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    await pool.end();
    await defaultPool.end();
  }
}

checkProjectMembers();