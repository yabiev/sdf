const BASE_URL = 'http://localhost:3000';

async function testProjectCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º CSRF —Ç–æ–∫–µ–Ω
    console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞...');
    const csrfResponse = await fetch(`${BASE_URL}/api/csrf`, {
      credentials: 'include'
    });
    
    console.log('CSRF Response status:', csrfResponse.status);
    const csrfData = await csrfResponse.json();
    console.log('CSRF Data:', csrfData);
    
    // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
    console.log('\n2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectData = {
      name: 'Test Project ' + Date.now(),
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏',
      color: '#6366f1'
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', projectData);
    
    const headers = {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };
    
    if (csrfData.csrfToken) {
      headers['X-CSRF-Token'] = csrfData.csrfToken;
    }
    
    const response = await fetch(`${BASE_URL}/api/projects`, {
      method: 'POST',
      headers,
      credentials: 'include',
      body: JSON.stringify(projectData)
    });
    
    console.log('\n3. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    const responseData = await response.json();
    console.log('Response Data:', JSON.stringify(responseData, null, 2));
    
    if (response.ok) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
      console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
      const projectsResponse = await fetch(`${BASE_URL}/api/projects`, {
        credentials: 'include',
        headers: {
          'Authorization': headers['Authorization'] || ''
        }
      });
      
      const projectsData = await projectsResponse.json();
      console.log('Projects list:', JSON.stringify(projectsData, null, 2));
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProjectCreation();