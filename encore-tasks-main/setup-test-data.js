const http = require('http');
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
  email: 'test@example.com',
  password: 'password123'
};

let authToken = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const protocol = options.protocol === 'https:' ? https : http;
    
    const req = protocol.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body
          });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞
async function login() {
  console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/auth/login',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = await makeRequest(options, TEST_USER);
    
    if (response.statusCode === 200 && response.body.token) {
      authToken = response.body.token;
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', response.body);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
async function createProject() {
  console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
  
  const projectData = {
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç API',
    description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–¥–∞—á'
  };
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/projects',
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = await makeRequest(options, projectData);
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);
    console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.body, null, 2));
    
    if (response.statusCode === 201 && response.body.success) {
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${response.body.data.name} (ID: ${response.body.data.id})`);
      return response.body.data.id;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', response.body);
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
async function createBoard(projectId) {
  console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–æ—Å–∫—É...');
  
  const boardData = {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ API',
    description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–¥–∞—á',
    project_id: projectId
  };
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/boards',
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = await makeRequest(options, boardData);
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);
    console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.body, null, 2));
    
    if (response.statusCode === 201 && response.body.success) {
      console.log(`‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${response.body.data.name} (ID: ${response.body.data.id})`);
      return response.body.data.id;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', response.body);
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
async function createColumn(boardId) {
  console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É...');
  
  const columnData = {
    name: '–í —Ä–∞–±–æ—Ç–µ',
    board_id: boardId,
    position: 1
  };
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/columns',
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`,
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = await makeRequest(options, columnData);
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}`);
    console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.body, null, 2));
    
    if (response.statusCode === 201 && response.body.success) {
      console.log(`‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${response.body.data.name} (ID: ${response.body.data.id})`);
      return response.body.data.id;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', response.body);
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async function setupTestData() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthCheck = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      method: 'GET'
    }).catch((error) => {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message);
      return null;
    });
    
    if (!healthCheck || healthCheck.statusCode === 0) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000');
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å:', healthCheck.statusCode, ')\n');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    const loginSuccess = await login();
    if (!loginSuccess) return;
    
    const projectId = await createProject();
    if (!projectId) return;
    
    const boardId = await createBoard(projectId);
    if (!boardId) return;
    
    const columnId = await createColumn(boardId);
    if (!columnId) return;
    
    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log(`–ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
    console.log(`–î–æ—Å–∫–∞ ID: ${boardId}`);
    console.log(`–ö–æ–ª–æ–Ω–∫–∞ ID: ${columnId}`);
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É