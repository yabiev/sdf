const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
});

const testUser = {
  email: 'axelencore@mail.ru',
  password: 'admin123'
};

async function debugPassword() {
  try {
    console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä–æ–ª—è...');
    
    const client = await pool.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const result = await client.query('SELECT password_hash FROM users WHERE email = $1', [testUser.email]);
    
    if (result.rows.length > 0) {
      const currentHash = result.rows[0].password_hash;
      console.log('üìã –¢–µ–∫—É—â–∏–π —Ö–µ—à –≤ –ë–î:', currentHash);
      console.log('üìã –î–ª–∏–Ω–∞ —Ö–µ—à–∞:', currentHash.length);
      console.log('üìã –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $2:', currentHash.startsWith('$2'));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å "admin123"...');
      const isValid1 = await bcrypt.compare('admin123', currentHash);
      console.log('‚úÖ admin123 –≤–∞–ª–∏–¥–µ–Ω:', isValid1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
      console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –ø–∞—Ä–æ–ª–∏...');
      const passwords = ['password', 'admin', '123456', 'test123', 'password123'];
      
      for (const pwd of passwords) {
        const isValid = await bcrypt.compare(pwd, currentHash);
        console.log(`‚úÖ ${pwd} –≤–∞–ª–∏–¥–µ–Ω:`, isValid);
        if (isValid) {
          console.log(`üéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–ê–†–û–õ–¨: ${pwd}`);
          break;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è admin123
      console.log('\nüîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è admin123...');
      const newHash = await bcrypt.hash('admin123', 10);
      console.log('üìã –ù–æ–≤—ã–π —Ö–µ—à:', newHash);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
      const newHashValid = await bcrypt.compare('admin123', newHash);
      console.log('‚úÖ –ù–æ–≤—ã–π —Ö–µ—à –≤–∞–ª–∏–¥–µ–Ω:', newHashValid);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('\nüíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –ë–î...');
      await client.query('UPDATE users SET password_hash = $1 WHERE email = $2', [newHash, testUser.email]);
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î');
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      const finalResult = await client.query('SELECT password_hash FROM users WHERE email = $1', [testUser.email]);
      const finalHash = finalResult.rows[0].password_hash;
      const finalValid = await bcrypt.compare('admin123', finalHash);
      console.log('\nüéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ admin123:', finalValid);
      
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    client.release();
    await pool.end();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –ø–∞—Ä–æ–ª—è:', error.message);
    await pool.end();
  }
}

debugPassword();