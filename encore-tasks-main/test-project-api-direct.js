const fetch = require('node-fetch');

async function testProjectCreationAPI() {
  console.log('üöÄ –¢–ï–°–¢: –ü—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ API');
  console.log('============================================');
  
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('1Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await fetch('http://localhost:3001/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'admin123'
      })
    });
    
    if (!loginResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResponse.status, loginResponse.statusText);
      const errorText = await loginResponse.text();
      console.log('üìÑ –û—Ç–≤–µ—Ç:', errorText);
      return;
    }
    
    const loginData = await loginResponse.json();
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', loginData.token ? '–î–∞' : '–ù–µ—Ç');
    
    const token = loginData.token;
    if (!token) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return;
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now(),
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è',
      status: 'active'
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', projectData);
    
    const createResponse = await fetch('http://localhost:3001/api/projects', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'Cookie': loginResponse.headers.get('set-cookie') || ''
      },
      body: JSON.stringify(projectData)
    });
    
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', createResponse.status, createResponse.statusText);
    
    if (!createResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
      const errorText = await createResponse.text();
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–∞–∫ JSON
      try {
        const errorJson = JSON.parse(errorText);
        console.log('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorJson);
      } catch (e) {
        console.log('üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', errorText);
      }
      return;
    }
    
    const projectResult = await createResponse.json();
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    const projectId = projectResult.data ? projectResult.data.id : projectResult.id;
    console.log('üÜî ID –ø—Ä–æ–µ–∫—Ç–∞:', projectId);
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', projectResult);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    const getResponse = await fetch(`http://localhost:3001/api/projects/${projectId}`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Cookie': loginResponse.headers.get('set-cookie') || ''
      }
    });
    
    if (getResponse.ok) {
      const projectCheck = await getResponse.json();
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', projectCheck);
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ');
    }
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const listResponse = await fetch('http://localhost:3001/api/projects', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Cookie': loginResponse.headers.get('set-cookie') || ''
      }
    });
    
    if (listResponse.ok) {
      const projectsResponse = await listResponse.json();
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      const projects = projectsResponse.data || projectsResponse;
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', Array.isArray(projects) ? projects.length : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', typeof projectsResponse);
      
      if (Array.isArray(projects)) {
        const createdProject = projects.find(p => p.id === projectId);
        if (createdProject) {
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
        } else {
          console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
        }
      } else {
        console.log('‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
    
    console.log('\n============================================');
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –£–°–ü–ï–®–ï–ù');
    console.log('‚úÖ –û—à–∏–±–∫–∞ "Failed to convert project or missing project ID" –ò–°–ü–†–ê–í–õ–ï–ù–ê');
    console.log('============================================');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('\n============================================');
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ù–ï–£–î–ê–ß–ï–ù');
    console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    console.log('============================================');
  }
}

testProjectCreationAPI();