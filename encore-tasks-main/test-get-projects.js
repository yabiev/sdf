const http = require('http');

// –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIzYTAyOGRkNS01MzI3LTQ1N2EtYjhkNC0xMWM3ZTJjNzA2Y2UiLCJlbWFpbCI6ImF4ZWxlbmNvcmVAbWFpbC5ydSIsInRpbWVzdGFtcCI6MTc1NjIxNzA5MjI4MiwicmFuZG9tIjoiMGVjbXI1a3RpNnE4IiwiaWF0IjoxNzU2MjE3MDkyLCJleHAiOjE3NTY4MjE4OTJ9.1Nxz5EyRp_luEdxpZX_lEaST8kucRsA8hMA2lYtGrTs';

const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/projects',
  method: 'GET',
  headers: {
    'Authorization': `Bearer ${token}`
  }
};

console.log('üöÄ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
console.log('üîë –¢–æ–∫–µ–Ω:', token.substring(0, 50) + '...');

const req = http.request(options, (res) => {
  console.log(`üìà –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', () => {
    console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    try {
      const response = JSON.parse(data);
      console.log(JSON.stringify(response, null, 2));
      
      if (response.success && response.data && response.data.length > 0) {
        console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:');
        response.data.forEach((project, index) => {
          console.log(`${index + 1}. ID: ${project.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
        });
        console.log('\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö project_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏');
      }
    } catch (e) {
      console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', data);
    }
  });
});

req.on('error', (e) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${e.message}`);
});

req.end();