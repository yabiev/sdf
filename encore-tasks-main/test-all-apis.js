const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'password123'
};

let authToken = '';

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, data = null, useAuth = true) {
  const url = `${BASE_URL}${endpoint}`;
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
    },
  };

  if (useAuth && authToken) {
    options.headers['Authorization'] = `Bearer ${authToken}`;
  }

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(url, options);
    const responseData = await response.text();
    
    let parsedData;
    try {
      parsedData = JSON.parse(responseData);
    } catch {
      parsedData = responseData;
    }

    return {
      status: response.status,
      data: parsedData,
      ok: response.ok
    };
  } catch (error) {
    return {
      status: 0,
      data: { error: error.message },
      ok: false
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints', 'bold');
  
  try {
    // 1. –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    logInfo('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const loginResponse = await makeRequest('POST', '/api/auth/login', testUser, false);
    
    if (loginResponse.ok && loginResponse.data.token) {
      logSuccess(`–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω (${loginResponse.status})`);
      authToken = loginResponse.data.token;
    } else {
      logError(`–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ (${loginResponse.status}): ${JSON.stringify(loginResponse.data)}`);
      return;
    }
    
    // 2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    logInfo('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/projects...');
    const getProjectsResponse = await makeRequest('GET', '/api/projects');
    if (getProjectsResponse.ok) {
      logSuccess(`GET –ø—Ä–æ–µ–∫—Ç—ã (${getProjectsResponse.status}) - –Ω–∞–π–¥–µ–Ω–æ: ${getProjectsResponse.data.length}`);
    } else {
      logError(`GET –ø—Ä–æ–µ–∫—Ç—ã (${getProjectsResponse.status}): ${JSON.stringify(getProjectsResponse.data)}`);
    }
    
    // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    logInfo('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/projects...');
    const createProjectData = {
      name: 'Test Project Quick',
      description: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞'
    };
    
    const createProjectResponse = await makeRequest('POST', '/api/projects', createProjectData);
    if (createProjectResponse.ok) {
      logSuccess(`POST –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω (${createProjectResponse.status}) - ID: ${createProjectResponse.data.id}`);
      
      const projectId = createProjectResponse.data.id;
      
      // 4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏
      logInfo('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/boards...');
      const createBoardData = {
        name: 'Test Board Quick',
        description: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–æ—Å–∫–∏',
        projectId: projectId
      };
      
      const createBoardResponse = await makeRequest('POST', '/api/boards', createBoardData);
      if (createBoardResponse.ok) {
        logSuccess(`POST –¥–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (${createBoardResponse.status}) - ID: ${createBoardResponse.data.id}`);
        
        const boardId = createBoardResponse.data.id;
        
        // 5. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
        logInfo('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/columns...');
        const createColumnData = {
          name: 'Test Column Quick',
          boardId: boardId,
          position: 1
        };
        
        const createColumnResponse = await makeRequest('POST', '/api/columns', createColumnData);
        if (createColumnResponse.ok) {
          logSuccess(`POST –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (${createColumnResponse.status}) - ID: ${createColumnResponse.data.id}`);
        } else {
          logError(`POST –∫–æ–ª–æ–Ω–∫–∞ (${createColumnResponse.status}): ${JSON.stringify(createColumnResponse.data)}`);
        }
        
      } else {
        logError(`POST –¥–æ—Å–∫–∞ (${createBoardResponse.status}): ${JSON.stringify(createBoardResponse.data)}`);
      }
      
    } else {
      logError(`POST –ø—Ä–æ–µ–∫—Ç (${createProjectResponse.status}): ${JSON.stringify(createProjectResponse.data)}`);
    }
    
    log('\nüéâ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'bold');
    
  } catch (error) {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();