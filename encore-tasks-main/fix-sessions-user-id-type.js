const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD
});

async function fixSessionsUserIdType() {
  const client = await pool.connect();
  
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö user_id –≤ —Ç–∞–±–ª–∏—Ü–µ sessions...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('BEGIN');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ sessions
    console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sessions...');
    const deleteResult = await client.query('DELETE FROM sessions');
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deleteResult.rowCount}`);
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞ user_id —Å integer –Ω–∞ UUID
    console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞ user_id —Å integer –Ω–∞ UUID...');
    await client.query(`
      ALTER TABLE sessions 
      ALTER COLUMN user_id TYPE UUID USING user_id::text::UUID
    `);
    console.log('   ‚úÖ –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ user_id –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞...');
    try {
      await client.query(`
        ALTER TABLE sessions 
        ADD CONSTRAINT fk_sessions_user_id 
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
      `);
      console.log('   ‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (fkError) {
      if (fkError.message.includes('already exists')) {
        console.log('   ‚ÑπÔ∏è  –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        throw fkError;
      }
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query('COMMIT');
    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const checkResult = await client.query(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'sessions' AND column_name = 'user_id'
    `);
    
    if (checkResult.rows.length > 0) {
      const column = checkResult.rows[0];
      console.log('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ sessions:');
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${column.column_name}`);
      console.log(`  –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${column.data_type}`);
      console.log(`  –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL: ${column.is_nullable}`);
      
      if (column.data_type === 'uuid') {
        console.log('\nüéâ –£–°–ü–ï–•! –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö user_id —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ UUID');
      } else {
        console.log('\n‚ùå –û–®–ò–ë–ö–ê! –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
      }
    }
    
  } catch (error) {
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await client.query('ROLLBACK');
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

async function main() {
  try {
    await fixSessionsUserIdType();
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

main();