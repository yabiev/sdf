const Database = require('better-sqlite3');
const path = require('path');
const fs = require('fs');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'database.db');

console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
if (fs.existsSync(dbPath)) {
  fs.unlinkSync(dbPath);
  console.log('‚úÖ –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞');
}

console.log('üî® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
const db = new Database(dbPath);

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É SQLite –∞–¥–∞–ø—Ç–µ—Ä—É
console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');

// –¢–∞–±–ª–∏—Ü–∞ users
db.exec(`
  CREATE TABLE IF NOT EXISTS users (
    id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),
    email TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    avatar_url TEXT,
    role TEXT DEFAULT 'user',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);
console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');

// –¢–∞–±–ª–∏—Ü–∞ user_sessions (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å session_token)
db.exec(`
  CREATE TABLE IF NOT EXISTS user_sessions (
    id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),
    user_id TEXT NOT NULL,
    session_token TEXT UNIQUE NOT NULL,
    refresh_token TEXT,
    ip_address TEXT,
    user_agent TEXT,
    expires_at DATETIME NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_activity_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
  )
`);
console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_sessions —Å–æ–∑–¥–∞–Ω–∞');

// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
db.exec(`
  CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON user_sessions(session_token);
  CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
  CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON user_sessions(expires_at);
`);
console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');

// –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
db.exec(`
  CREATE TABLE IF NOT EXISTS projects (
    id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),
    name TEXT NOT NULL,
    description TEXT,
    owner_id TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE
  )
`);

db.exec(`
  CREATE TABLE IF NOT EXISTS boards (
    id TEXT PRIMARY KEY DEFAULT (lower(hex(randomblob(16)))),
    name TEXT NOT NULL,
    description TEXT,
    project_id TEXT NOT NULL,
    visibility TEXT DEFAULT 'private',
    color TEXT DEFAULT '#3B82F6',
    settings TEXT DEFAULT '{}',
    created_by TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (project_id) REFERENCES projects(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
  )
`);

console.log('‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...');

const userSessionsStructure = db.prepare("PRAGMA table_info(user_sessions)").all();
console.log('\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_sessions:');
console.table(userSessionsStructure);

const sessionsExists = db.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name='sessions'").get();
if (sessionsExists) {
  console.log('\n‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ sessions –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  const sessionsStructure = db.prepare("PRAGMA table_info(sessions)").all();
  console.table(sessionsStructure);
} else {
  console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ sessions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)');
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
const testUserId = 'test-user-' + Date.now();
const insertUser = db.prepare(`
  INSERT INTO users (id, email, name) 
  VALUES (?, ?, ?)
`);
insertUser.run(testUserId, 'test@example.com', 'Test User');
console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', testUserId);

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
console.log('\nüîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...');
const testToken = 'test-token-' + Date.now();
const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(); // 24 —á–∞—Å–∞

const insertSession = db.prepare(`
  INSERT INTO user_sessions (user_id, session_token, expires_at) 
  VALUES (?, ?, ?)
`);
const result = insertSession.run(testUserId, testToken, expiresAt);
console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
  token: testToken,
  userId: testUserId,
  expiresAt: expiresAt,
  changes: result.changes
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏
console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏...');
const findSession = db.prepare(`
  SELECT s.*, u.email, u.name
  FROM user_sessions s
  JOIN users u ON s.user_id = u.id
  WHERE s.session_token = ? AND s.expires_at > datetime('now')
`);
const foundSession = findSession.get(testToken);

if (foundSession) {
  console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', foundSession);
} else {
  console.log('‚ùå –°–µ—Å—Å–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
const sessionCount = db.prepare('SELECT COUNT(*) as count FROM user_sessions').get();
console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userCount.count);
console.log('–°–µ—Å—Å–∏–π:', sessionCount.count);

db.close();
console.log('\nüîå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
console.log('\n‚úÖ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');