const axios = require('axios');

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ UI
async function testProjectCreationUI() {
  const API_BASE_URL = 'http://localhost:3000/api';
  
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const authResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'admin@example.com',
      password: 'admin123'
    });
    
    const token = authResponse.data.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsBeforeResponse = await axios.get(`${API_BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const projectsCountBefore = projectsBeforeResponse.data.data?.projects?.length || 0;
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsCountBefore}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const projectName = `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç UI ${Date.now()}`;
    console.log(`üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: ${projectName}`);
    
    const createResponse = await axios.post(`${API_BASE_URL}/projects`, {
      name: projectName,
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UI',
      color: '#3b82f6',
      isPrivate: false
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', createResponse.data);
    const createdProject = createResponse.data.data;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsAfterResponse = await axios.get(`${API_BASE_URL}/projects`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const projectsCountAfter = projectsAfterResponse.data.data?.projects?.length || 0;
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è: ${projectsCountAfter}`);
    
    if (projectsCountAfter > projectsCountBefore) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:');
      console.log('- ID:', createdProject.id);
      console.log('- –ù–∞–∑–≤–∞–Ω–∏–µ:', createdProject.name);
      console.log('- –û–ø–∏—Å–∞–Ω–∏–µ:', createdProject.description);
      console.log('- –¶–≤–µ—Ç:', createdProject.color);
      console.log('- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π:', createdProject.isPrivate);
      console.log('- –°–æ–∑–¥–∞—Ç–µ–ª—å:', createdProject.createdBy);
      console.log('- –£—á–∞—Å—Ç–Ω–∏–∫–∏:', createdProject.members?.length || 0);
      console.log('- –î–æ—Å–∫–∏:', createdProject.boards?.length || 0);
      
      return true;
    } else {
      console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –ø—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
    }
    return false;
  }
}

testProjectCreationUI();