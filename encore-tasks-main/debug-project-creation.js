const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function debugProjectCreation() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const timestamp = Date.now();
  const testEmail = `debug-${timestamp}@example.com`;
  const testPassword = 'testpassword123';
  
  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥
    console.log('\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/register',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      name: 'Debug User',
      email: testEmail,
      password: testPassword
    });
    
    if (registerResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.data);
      return;
    }
    
    console.log('üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const loginResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: testEmail,
      password: testPassword
    });
    
    if (loginResponse.status !== 200) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginResponse.data);
      return;
    }
    
    const authToken = loginResponse.data.token;
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/projects',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      }
    }, {
      name: 'Debug Project',
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏'
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', projectResponse.status);
    console.log('üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(projectResponse.data, null, 2));
    
    if (projectResponse.status === 201) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      if (projectResponse.data && projectResponse.data.project) {
        console.log('üìÅ ID –ø—Ä–æ–µ–∫—Ç–∞:', projectResponse.data.project.id);
      } else {
        console.log('‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç project.id');
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Object.keys(projectResponse.data || {}));
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–∫–µ:', error);
  }
}

debugProjectCreation();