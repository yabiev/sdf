const { Pool } = require('pg');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '.env.local') });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
});

async function checkAndFixUserApproval() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    const columnsResult = await pool.query(`
      SELECT column_name, data_type, is_nullable, column_default 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND table_schema = 'public'
      ORDER BY ordinal_position;
    `);
    
    console.log('\nüìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users:');
    columnsResult.rows.forEach(col => {
      console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable}, default: ${col.column_default})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è approval_status –∏–ª–∏ is_approved
    const hasApprovalStatus = columnsResult.rows.some(col => col.column_name === 'approval_status');
    const hasIsApproved = columnsResult.rows.some(col => col.column_name === 'is_approved');
    
    console.log(`\nüîç –ü–æ–ª–µ approval_status: ${hasApprovalStatus ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    console.log(`üîç –ü–æ–ª–µ is_approved: ${hasIsApproved ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º approval_status
    if (!hasApprovalStatus && !hasIsApproved) {
      console.log('\nüîß –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ approval_status...');
      
      await pool.query(`
        ALTER TABLE users 
        ADD COLUMN approval_status VARCHAR(20) NOT NULL DEFAULT 'approved' 
        CHECK (approval_status IN ('pending', 'approved', 'rejected'));
      `);
      
      await pool.query(`
        CREATE INDEX IF NOT EXISTS idx_users_approval_status ON users(approval_status);
      `);
      
      console.log('‚úÖ –ü–æ–ª–µ approval_status –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    let usersQuery;
    if (hasApprovalStatus) {
      usersQuery = 'SELECT id, name, email, role, approval_status FROM users ORDER BY created_at DESC';
    } else if (hasIsApproved) {
      usersQuery = 'SELECT id, name, email, role, is_approved as approval_status FROM users ORDER BY created_at DESC';
    } else {
      usersQuery = "SELECT id, name, email, role, 'approved' as approval_status FROM users ORDER BY created_at DESC";
    }
    const usersResult = await pool.query(usersQuery);
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResult.rows.length}`);
    usersResult.rows.forEach(user => {
      console.log(`  - ${user.name} (${user.email}) - —Ä–æ–ª—å: ${user.role}, —Å—Ç–∞—Ç—É—Å: ${user.approval_status}`);
    });
    
    // –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    const unapprovedAdmins = usersResult.rows.filter(user => 
      user.role === 'admin' && 
      (user.approval_status === 'pending' || user.approval_status === false)
    );
    
    if (unapprovedAdmins.length > 0) {
      console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º:');
      unapprovedAdmins.forEach(admin => {
        console.log(`  - ${admin.name} (${admin.email}) - —Å—Ç–∞—Ç—É—Å: ${admin.approval_status}`);
      });
      
      console.log('\nüîß –û–¥–æ–±—Ä—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
      
      const approvalField = hasApprovalStatus ? 'approval_status' : 'is_approved';
      const approvalValue = hasApprovalStatus ? 'approved' : true;
      
      const updateResult = await pool.query(`
        UPDATE users 
        SET ${approvalField} = $1, updated_at = CURRENT_TIMESTAMP 
        WHERE role = 'admin' 
        RETURNING id, name, email, ${approvalField};
      `, [approvalValue]);
      
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ–¥–æ–±—Ä–µ–Ω—ã:');
      updateResult.rows.forEach(admin => {
        console.log(`  - ${admin.name} (${admin.email}) - –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${admin[approvalField]}`);
      });
    } else {
      console.log('\n‚úÖ –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    throw error;
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
checkAndFixUserApproval().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});