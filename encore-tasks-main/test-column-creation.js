const fetch = require('node-fetch');

async function testColumnCreation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏');
  
  try {
    // 1. –õ–æ–≥–∏–Ω
    console.log('1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...');
    const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123'
      })
    });
    
    if (!loginResponse.ok) {
      throw new Error(`Login failed: ${loginResponse.status} ${await loginResponse.text()}`);
    }
    
    const loginData = await loginResponse.json();
    const token = loginData.token;
    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsResponse = await fetch('http://localhost:3000/api/projects', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!projectsResponse.ok) {
      throw new Error(`Get projects failed: ${projectsResponse.status} ${await projectsResponse.text()}`);
    }
    
    const projectsData = await projectsResponse.json();
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', projectsData.projects?.length || 0);
    
    if (!projectsData.projects || projectsData.projects.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
      return;
    }
    
    const project = projectsData.projects[0];
    console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç:', project.name);
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫...');
    const boardsResponse = await fetch(`http://localhost:3000/api/boards?project_id=${project.id}`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (!boardsResponse.ok) {
      throw new Error(`Get boards failed: ${boardsResponse.status} ${await boardsResponse.text()}`);
    }
    
    const boardsData = await boardsResponse.json();
    console.log('‚úÖ –î–æ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', boardsData.boards?.length || 0);
    
    if (!boardsData.boards || boardsData.boards.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
      return;
    }
    
    const board = boardsData.boards[0];
    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É:', board.name);
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏...');
    const columnData = {
      title: 'Test Column ' + Date.now(),
      board_id: board.id,
      position: 0
    };
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', JSON.stringify(columnData, null, 2));
    
    const createColumnResponse = await fetch('http://localhost:3000/api/columns', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(columnData)
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', createColumnResponse.status);
    const responseText = await createColumnResponse.text();
    console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
    
    if (!createColumnResponse.ok) {
      throw new Error(`Create column failed: ${createColumnResponse.status} ${responseText}`);
    }
    
    const columnResult = JSON.parse(responseText);
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', columnResult.column?.title);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
}

testColumnCreation();