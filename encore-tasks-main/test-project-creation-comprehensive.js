const puppeteer = require('puppeteer');

async function testProjectCreation() {
  let browser;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    browser = await puppeteer.launch({
      headless: false,
      devtools: false,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu'
      ]
    });
    
    const page = await browser.newPage();
    await page.setViewport({ width: 1280, height: 720 });
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle0' });
    
    console.log('\n=== –≠–¢–ê–ü 1: –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ===');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥"
    const loginButtonFound = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const loginBtn = buttons.find(btn => btn.textContent?.includes('–í—Ö–æ–¥'));
      if (loginBtn) {
        loginBtn.click();
        return true;
      }
      return false;
    });
    
    if (!loginButtonFound) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í—Ö–æ–¥" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      await page.screenshot({ path: 'test-error-screenshot.png' });
      return;
    }
    
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–í—Ö–æ–¥" –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞');
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const emailInput = await page.$('input[type="email"], input[name="email"]');
    const passwordInput = await page.$('input[type="password"], input[name="password"]');
    
    if (emailInput && passwordInput) {
      await emailInput.type('admin@example.com');
      await passwordInput.type('admin123');
      console.log('‚úÖ –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
      
      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" (submit)
      const submitButton = await page.$('button[type="submit"]');
      if (submitButton) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        const buttonText = await page.evaluate(btn => btn.textContent?.trim(), submitButton);
        console.log('üîç –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', buttonText);
        
        if (buttonText?.includes('–í–æ–π—Ç–∏') || buttonText?.includes('–í—Ö–æ–¥')) {
          await submitButton.click();
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–∞–∂–∞—Ç–∞');
        } else {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
          await submitButton.click();
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∞');
        }
      } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        await page.screenshot({ path: 'test-error-screenshot.png' });
        return;
      }
    } else {
      console.log('‚ùå –ü–æ–ª—è email –∏–ª–∏ password –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
      await page.screenshot({ path: 'test-error-screenshot.png' });
      return;
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('\n=== –≠–¢–ê–ü 2: –ü–ï–†–ï–•–û–î –ù–ê –°–¢–†–ê–ù–ò–¶–£ –ü–†–û–ï–ö–¢–û–í ===');
    
    // –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏–ª–∏ –º–µ–Ω—é
    const projectsNavigation = await page.evaluate(() => {
      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–æ–µ–∫—Ç—ã"
      const elements = Array.from(document.querySelectorAll('a, button, [role="button"]'));
      const projectsElement = elements.find(el => {
        const text = el.textContent?.toLowerCase() || '';
        return text.includes('–ø—Ä–æ–µ–∫—Ç') || text.includes('project');
      });
      
      if (projectsElement) {
        return {
          found: true,
          text: projectsElement.textContent?.trim(),
          tagName: projectsElement.tagName
        };
      }
      
      return { found: false };
    });
    
    if (projectsNavigation.found) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º:', projectsNavigation.text);
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
      await page.evaluate(() => {
        const elements = Array.from(document.querySelectorAll('a, button, [role="button"]'));
        const projectsElement = elements.find(el => {
          const text = el.textContent?.toLowerCase() || '';
          return text.includes('–ø—Ä–æ–µ–∫—Ç') || text.includes('project');
        });
        if (projectsElement) {
          projectsElement.click();
        }
      });
      
      console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      await new Promise(resolve => setTimeout(resolve, 2000));
    } else {
      console.log('‚ö†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    }
    
    console.log('\n=== –≠–¢–ê–ü 3: –ü–û–ò–°–ö –ö–ù–û–ü–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const currentPageInfo = await page.evaluate(() => {
      return {
        url: window.location.href,
        title: document.title,
        bodyText: document.body.textContent?.substring(0, 500)
      };
    });
    
    console.log('üìç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', currentPageInfo.url);
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫:', currentPageInfo.title);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createProjectButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button, [role="button"], a'));
      return buttons.map((btn, index) => {
        const text = btn.textContent?.trim().toLowerCase() || '';
        const isCreateButton = 
          text.includes('—Å–æ–∑–¥–∞—Ç—å') ||
          text.includes('–¥–æ–±–∞–≤–∏—Ç—å') ||
          text.includes('–Ω–æ–≤—ã–π') ||
          text.includes('create') ||
          text.includes('add') ||
          text.includes('new') ||
          text.includes('+') ||
          btn.className.includes('create') ||
          btn.className.includes('add');
        
        return {
          index,
          text: btn.textContent?.trim() || '',
          className: btn.className,
          tagName: btn.tagName,
          isCreateButton
        };
      }).filter(btn => btn.isCreateButton);
    });
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è:', createProjectButtons.length);
    createProjectButtons.forEach((btn, i) => {
      console.log(`   ${i + 1}. "${btn.text}" (${btn.tagName}, className: "${btn.className}")`);
    });
    
    if (createProjectButtons.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É
      const bestButton = createProjectButtons.find(btn => 
        btn.text.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç') || 
        btn.text.toLowerCase().includes('project')
      ) || createProjectButtons[0];
      
      console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞:', bestButton.text);
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      await page.evaluate((buttonIndex) => {
        const buttons = Array.from(document.querySelectorAll('button, [role="button"], a'));
        const createButtons = buttons.filter((btn) => {
          const text = btn.textContent?.trim().toLowerCase() || '';
          return text.includes('—Å–æ–∑–¥–∞—Ç—å') ||
                 text.includes('–¥–æ–±–∞–≤–∏—Ç—å') ||
                 text.includes('–Ω–æ–≤—ã–π') ||
                 text.includes('create') ||
                 text.includes('add') ||
                 text.includes('new') ||
                 text.includes('+') ||
                 btn.className.includes('create') ||
                 btn.className.includes('add');
        });
        
        if (createButtons[buttonIndex]) {
          createButtons[buttonIndex].click();
        }
      }, bestButton.index);
      
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–∞—Ç–∞');
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('\n=== –≠–¢–ê–ü 4: –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´ –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===');
      
      // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      const formFields = await page.evaluate(() => {
        const nameInput = document.querySelector('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–∏–º—è"], input[placeholder*="name"]');
        const descInput = document.querySelector('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="description"], input[name="description"]');
        
        return {
          hasNameField: !!nameInput,
          hasDescField: !!descInput,
          nameFieldType: nameInput?.tagName || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
          descFieldType: descInput?.tagName || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        };
      });
      
      console.log('üìù –ü–æ–ª—è —Ñ–æ—Ä–º—ã:', JSON.stringify(formFields, null, 2));
      
      if (formFields.hasNameField) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        const nameField = await page.$('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–∏–º—è"], input[placeholder*="name"]');
        if (nameField) {
          await nameField.clear();
          await nameField.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now());
          console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (formFields.hasDescField) {
          const descField = await page.$('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"], textarea[placeholder*="description"], input[name="description"]');
          if (descField) {
            await descField.clear();
            await descField.type('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
            console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ');
          }
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const saveButtons = await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button, [role="button"]'));
          return buttons.map((btn, index) => {
            const text = btn.textContent?.trim().toLowerCase() || '';
            const isSaveButton = 
              text.includes('—Å–æ–∑–¥–∞—Ç—å') ||
              text.includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') ||
              text.includes('–¥–æ–±–∞–≤–∏—Ç—å') ||
              text.includes('create') ||
              text.includes('save') ||
              text.includes('add') ||
              btn.type === 'submit';
            
            return {
              index,
              text: btn.textContent?.trim() || '',
              type: btn.type || '',
              isSaveButton
            };
          }).filter(btn => btn.isSaveButton);
        });
        
        console.log('üíæ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saveButtons.length);
        saveButtons.forEach((btn, i) => {
          console.log(`   ${i + 1}. "${btn.text}" (type: ${btn.type})`);
        });
        
        if (saveButtons.length > 0) {
          // –í—ã–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          const saveButton = saveButtons[0];
          
          await page.evaluate((buttonIndex) => {
            const buttons = Array.from(document.querySelectorAll('button, [role="button"]'));
            const saveButtons = buttons.filter((btn) => {
              const text = btn.textContent?.trim().toLowerCase() || '';
              return text.includes('—Å–æ–∑–¥–∞—Ç—å') ||
                     text.includes('—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') ||
                     text.includes('–¥–æ–±–∞–≤–∏—Ç—å') ||
                     text.includes('create') ||
                     text.includes('save') ||
                     text.includes('add') ||
                     btn.type === 'submit';
            });
            
            if (saveButtons[buttonIndex]) {
              saveButtons[buttonIndex].click();
            }
          }, saveButton.index);
          
          console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          console.log('\n=== –≠–¢–ê–ü 5: –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è
          const finalResult = await page.evaluate(() => {
            return {
              url: window.location.href,
              title: document.title,
              hasSuccessMessage: document.body.textContent?.includes('—É—Å–ø–µ—à–Ω–æ') || 
                               document.body.textContent?.includes('—Å–æ–∑–¥–∞–Ω') ||
                               document.body.textContent?.includes('–¥–æ–±–∞–≤–ª–µ–Ω'),
              hasErrorMessage: document.body.textContent?.includes('–æ—à–∏–±–∫–∞') ||
                             document.body.textContent?.includes('error'),
              bodyText: document.body.textContent?.substring(0, 1000)
            };
          });
          
          console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(finalResult, null, 2));
          
          if (finalResult.hasSuccessMessage) {
            console.log('\nüéâ –£–°–ü–ï–•! –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
            await page.screenshot({ path: 'test-success-screenshot.png' });
          } else if (finalResult.hasErrorMessage) {
            console.log('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!');
            await page.screenshot({ path: 'test-error-screenshot.png' });
          } else {
            console.log('\n‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—è—Å–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç');
            await page.screenshot({ path: 'test-unclear-screenshot.png' });
          }
        } else {
          console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
          await page.screenshot({ path: 'test-error-screenshot.png' });
        }
      } else {
        console.log('‚ùå –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        await page.screenshot({ path: 'test-error-screenshot.png' });
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      await page.screenshot({ path: 'test-error-screenshot.png' });
    }
    
    // –î–µ—Ä–∂–∏–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\n‚è≥ –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
    if (browser) {
      const page = (await browser.pages())[0];
      if (page) {
        await page.screenshot({ path: 'test-error-screenshot.png' });
      }
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

testProjectCreation();