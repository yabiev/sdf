const puppeteer = require('puppeteer');

async function testAuthAndProjectCreation() {
  let browser;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    browser = await puppeteer.launch({ 
      headless: false, 
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    page.on('pageerror', error => {
      console.log('‚ùå –û—à–∏–±–∫–∞ JavaScript:', error.message);
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ù–∞–π–¥–µ–º –ø–æ–ª—è email –∏ password
    const emailInput = await page.$('input[type="email"], input[name="email"]');
    const passwordInput = await page.$('input[type="password"], input[name="password"]');
    
    if (emailInput && passwordInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è');
      
      // –ó–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É
      await emailInput.click();
      await emailInput.type('test@example.com');
      await new Promise(resolve => setTimeout(resolve, 500));
      
      await passwordInput.click();
      await passwordInput.type('password123');
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –ù–∞–π–¥–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" (–ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º)
      const loginButtons = await page.$$('button');
      let loginButton = null;
      
      for (let button of loginButtons) {
        const text = await page.evaluate(btn => btn.textContent.trim(), button);
        if (text === '–í–æ–π—Ç–∏') {
          loginButton = button;
        }
      }
      
      if (loginButton) {
        console.log('üîë –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"');
        await loginButton.click();
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        const newUrl = page.url();
        console.log('URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:', newUrl);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageContent = await page.evaluate(() => document.body.textContent);
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):', pageContent.substring(0, 300));
        
      } else {
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    // –°–¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await page.screenshot({ path: 'after-login-attempt.png', fullPage: true });
    console.log('–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    const allButtons = await page.$$eval('button', buttons => 
      buttons.map(btn => ({
        text: btn.textContent.trim(),
        visible: btn.offsetParent !== null,
        disabled: btn.disabled,
        className: btn.className
      }))
    );
    
    console.log('–í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allButtons);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const allLinks = await page.$$eval('a', links => 
      links.map(link => ({
        text: link.textContent.trim(),
        href: link.href,
        visible: link.offsetParent !== null
      }))
    );
    
    console.log('–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allLinks);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "–ø—Ä–æ–µ–∫—Ç"
    const projectElements = await page.$$eval('*', elements => 
      elements
        .filter(el => el.textContent && el.textContent.toLowerCase().includes('–ø—Ä–æ–µ–∫—Ç'))
        .map(el => ({
          tagName: el.tagName,
          text: el.textContent.trim().substring(0, 100),
          className: el.className
        }))
        .slice(0, 10) // –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    );
    
    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å–ª–æ–≤–æ–º "–ø—Ä–æ–µ–∫—Ç":', projectElements);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Å —Å–∏–º–≤–æ–ª–æ–º "+"
    const plusButtons = await page.$$eval('button', buttons => 
      buttons
        .filter(btn => btn.textContent.includes('+') || btn.innerHTML.includes('+'))
        .map(btn => ({
          text: btn.textContent.trim(),
          innerHTML: btn.innerHTML.substring(0, 100),
          visible: btn.offsetParent !== null
        }))
    );
    
    console.log('–ö–Ω–æ–ø–∫–∏ —Å —Å–∏–º–≤–æ–ª–æ–º "+":', plusButtons);
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    if (browser) {
      console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
      await new Promise(resolve => setTimeout(resolve, 10000)); // –ü–æ–¥–æ–∂–¥–µ–º, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAuthAndProjectCreation();