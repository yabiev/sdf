const bcrypt = require('bcryptjs');
const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return {};
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^[\"']|[\"']$/g, '');
      }
    }
  });
  
  return env;
}

async function testApiLogin() {
  const env = loadEnvFile();
  
  const config = {
    host: env.POSTGRES_HOST || 'localhost',
    port: parseInt(env.POSTGRES_PORT) || 5432,
    database: env.POSTGRES_DB || 'encore_tasks',
    user: env.POSTGRES_USER || 'postgres',
    password: env.POSTGRES_PASSWORD || ''
  };
  
  const pool = new Pool(config);
  
  try {
    const client = await pool.connect();
    
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–≥–æ –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞–∫ –≤ API login...');
    console.log('');
    
    const email = 'axelencore@mail.ru';
    const password = 'Ad50dc6axelencore';
    
    console.log('üìß Email:', email);
    console.log('üîë Password:', password);
    console.log('');
    
    // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ API)
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email...');
    const userResult = await client.query(
      'SELECT * FROM users WHERE email = $1',
      [email]
    );
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    const user = userResult.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log('   ID:', user.id);
    console.log('   Email:', user.email);
    console.log('   Has password hash:', !!user.password_hash);
    console.log('   Password hash length:', user.password_hash ? user.password_hash.length : 'NULL');
    console.log('   Password hash:', user.password_hash);
    console.log('');
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ API)
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å bcrypt.compare...');
    console.log('   –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–æ–ª—å:', password);
    console.log('   –¢–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:', typeof password);
    console.log('   –î–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è:', password.length);
    console.log('   –•–µ—à –∏–∑ –±–∞–∑—ã:', user.password_hash);
    console.log('   –¢–∏–ø —Ö–µ—à–∞:', typeof user.password_hash);
    console.log('   –î–ª–∏–Ω–∞ —Ö–µ—à–∞:', user.password_hash ? user.password_hash.length : 'NULL');
    console.log('');
    
    const isValidPassword = user.password_hash ? await bcrypt.compare(password, user.password_hash) : false;
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt.compare:', isValidPassword);
    
    if (isValidPassword) {
      console.log('‚úÖ –ü–ê–†–û–õ–¨ –ü–†–ê–í–ò–õ–¨–ù–´–ô!');
    } else {
      console.log('‚ùå –ü–ê–†–û–õ–¨ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô!');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      console.log('');
      console.log('üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –ª–∏ bcrypt –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ö–µ—à–µ–º
      try {
        const testResult1 = await bcrypt.compare('test', user.password_hash);
        console.log('   –¢–µ—Å—Ç —Å –ø–∞—Ä–æ–ª–µ–º "test":', testResult1);
        
        const testResult2 = await bcrypt.compare('', user.password_hash);
        console.log('   –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º:', testResult2);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ö–µ—à –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å
        const newHash = await bcrypt.hash(password, 12);
        console.log('   –ù–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–∞—Ä–æ–ª—è:', newHash);
        
        const newHashTest = await bcrypt.compare(password, newHash);
        console.log('   –¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º —Ö–µ—à–µ–º:', newHashTest);
        
      } catch (bcryptError) {
        console.log('   –û—à–∏–±–∫–∞ bcrypt:', bcryptError.message);
      }
    }
    
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    await pool.end();
  }
}

testApiLogin().catch(console.error);