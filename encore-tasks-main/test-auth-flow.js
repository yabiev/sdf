const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'encore_tasks',
  user: 'postgres',
  password: 'postgres',
  ssl: false
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'axelencore@mail.ru',
  password: 'admin123',
  name: 'Admin User'
};

const JWT_SECRET = 'your-secret-key-here';
const SESSION_SECRET = 'your-session-secret-here';
const API_BASE_URL = 'http://localhost:3000';

async function testDatabaseConnection() {
  console.log('\nüîç 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ:', result.rows[0].now);
    client.release();
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    return false;
  }
}

async function testUserInDatabase() {
  console.log('\nüîç 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT * FROM users WHERE email = $1', [testUser.email]);
    
    if (result.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      client.release();
      return false;
    }
    
    const user = result.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      email: user.email,
      name: user.name,
      created_at: user.created_at
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const passwordMatch = await bcrypt.compare(testUser.password, user.password_hash);
    if (passwordMatch) {
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    } else {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    }
    
    client.release();
    return passwordMatch;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return false;
  }
}

async function testSessionTable() {
  console.log('\nüîç 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π...');
  try {
    const client = await pool.connect();
    const result = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'user_sessions' AND table_schema = 'public'
      ORDER BY ordinal_position
    `);
    
    if (result.rows.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ user_sessions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      client.release();
      return false;
    }
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_sessions –Ω–∞–π–¥–µ–Ω–∞ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏:');
    result.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type}`);
    });
    
    client.release();
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã —Å–µ—Å—Å–∏–π:', error.message);
    return false;
  }
}

async function testJWTGeneration() {
  console.log('\nüîç 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞...');
  try {
    const payload = {
      userId: '1',
      email: testUser.email,
      role: 'admin',
      name: testUser.name
    };
    
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '24h' });
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', token.substring(0, 50) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:', {
      userId: decoded.userId,
      email: decoded.email,
      role: decoded.role
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å JWT:', error.message);
    return false;
  }
}

async function testLoginAPI() {
  console.log('\nüîç 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—Ö–æ–¥–∞...');
  try {
    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testUser.email,
        password: testUser.password
      })
    });
    
    const data = await response.json();
    
    if (response.ok && data.message === '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') {
      console.log('‚úÖ API –≤—Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
        message: data.message,
        user: data.user ? {
          id: data.user.id,
          email: data.user.email,
          name: data.user.name
        } : null,
        token: data.token ? '–ø–æ–ª—É—á–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      });
      return true;
    } else {
      console.log('‚ùå API –≤—Ö–æ–¥–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API –≤—Ö–æ–¥–∞:', error.message);
    return false;
  }
}

async function testCurrentUserAPI() {
  console.log('\nüîç 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏–Ω–∏–º—Å—è
    const loginResponse = await fetch(`${API_BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testUser.email,
        password: testUser.password
      })
    });
    
    const loginData = await loginResponse.json();
    if (!loginResponse.ok || loginData.message !== '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('‚ùå –û—Ç–≤–µ—Ç –≤—Ö–æ–¥–∞:', loginData);
      return false;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º cookies
    const cookies = loginResponse.headers.get('set-cookie');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentUserResponse = await fetch(`${API_BASE_URL}/api/auth/me`, {
      method: 'GET',
      headers: {
        'Cookie': cookies || ''
      }
    });
    
    const userData = await currentUserResponse.json();
    
    if (currentUserResponse.ok && userData.user) {
      console.log('‚úÖ API —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        id: userData.user.id,
        email: userData.user.email,
        name: userData.user.name
      });
      return true;
    } else {
      console.log('‚ùå API —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', userData);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return false;
  }
}

async function runFullAuthTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n');
  
  const tests = [
    { name: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', test: testDatabaseConnection },
    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î', test: testUserInDatabase },
    { name: '–¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π', test: testSessionTable },
    { name: 'JWT —Ç–æ–∫–µ–Ω—ã', test: testJWTGeneration },
    { name: 'API –≤—Ö–æ–¥–∞', test: testLoginAPI },
    { name: 'API —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', test: testCurrentUserAPI }
  ];
  
  let passedTests = 0;
  
  for (const { name, test } of tests) {
    try {
      const result = await test();
      if (result) {
        passedTests++;
      }
    } catch (error) {
      console.error(`‚ùå –¢–µ—Å—Ç "${name}" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:`, error.message);
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${passedTests}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  
  if (passedTests === tests.length) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.');
  }
  
  await pool.end();
}

runFullAuthTest().catch(console.error);