const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const HOST = 'localhost';
const PORT = 3000;
const TIMEOUT = 5000; // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: HOST,
      port: PORT,
      path: path,
      method: method,
      timeout: TIMEOUT,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonBody = body ? JSON.parse(body) : {};
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: jsonBody
          });
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body
          });
        }
      });
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logResult(testName, success, details = '') {
  const status = success ? `${colors.green}‚úì PASS${colors.reset}` : `${colors.red}‚úó FAIL${colors.reset}`;
  console.log(`${status} ${testName}`);
  if (details) {
    console.log(`   ${details}`);
  }
}

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API endpoints
async function quickTest() {
  console.log(`${colors.bold}${colors.blue}üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê API ENDPOINTS${colors.reset}`);
  console.log(`${colors.yellow}–°–µ—Ä–≤–µ—Ä: http://${HOST}:${PORT}${colors.reset}\n`);
  
  const tests = [
    {
      name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (POST /api/auth/login)',
      method: 'POST',
      path: '/api/auth/login',
      data: { email: 'test@example.com', password: 'password123' },
      expectedStatus: [200, 401] // 200 –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, 401 –µ—Å–ª–∏ –Ω–µ—Ç
    },
    {
      name: '–ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (GET /api/projects)',
      method: 'GET',
      path: '/api/projects',
      expectedStatus: [401] // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    },
    {
      name: '–î–æ—Å–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (GET /api/boards)',
      method: 'GET',
      path: '/api/boards',
      expectedStatus: [401] // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    },
    {
      name: '–ö–æ–ª–æ–Ω–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (GET /api/columns)',
      method: 'GET',
      path: '/api/columns',
      expectedStatus: [401] // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    },
    {
      name: '–ó–∞–¥–∞—á–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (GET /api/tasks)',
      method: 'GET',
      path: '/api/tasks',
      expectedStatus: [401] // –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    }
  ];
  
  let passedTests = 0;
  let authToken = null;
  
  for (const test of tests) {
    try {
      console.log(`\n${colors.blue}–¢–µ—Å—Ç–∏—Ä—É—é: ${test.name}${colors.reset}`);
      
      const response = await makeRequest(test.method, test.path, test.data, test.headers || {});
      
      const statusOk = test.expectedStatus.includes(response.statusCode);
      
      if (statusOk) {
        logResult(test.name, true, `–°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
        passedTests++;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ —ç—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if (test.path === '/api/auth/login' && response.statusCode === 200 && response.body.token) {
          authToken = response.body.token;
          console.log(`   ${colors.green}–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${authToken.substring(0, 20)}...${colors.reset}`);
        }
      } else {
        logResult(test.name, false, `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å ${test.expectedStatus}, –ø–æ–ª—É—á–µ–Ω ${response.statusCode}`);
        if (response.body && typeof response.body === 'object') {
          console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response.body)}`);
        }
      }
      
    } catch (error) {
      logResult(test.name, false, `–û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω
  if (authToken) {
    console.log(`\n${colors.blue}=== –¢–ï–°–¢–´ –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ===${colors.reset}`);
    
    const authHeaders = { 'Authorization': `Bearer ${authToken}` };
    
    const authTests = [
      {
        name: '–ü—Ä–æ–µ–∫—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (GET /api/projects)',
        method: 'GET',
        path: '/api/projects',
        headers: authHeaders,
        expectedStatus: [200]
      },
      {
        name: '–î–æ—Å–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (GET /api/boards)',
        method: 'GET',
        path: '/api/boards',
        headers: authHeaders,
        expectedStatus: [200, 400] // 400 –µ—Å–ª–∏ –Ω–µ—Ç project_id
      },
      {
        name: '–ö–æ–ª–æ–Ω–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (GET /api/columns)',
        method: 'GET',
        path: '/api/columns',
        headers: authHeaders,
        expectedStatus: [200, 400] // 400 –µ—Å–ª–∏ –Ω–µ—Ç board_id
      },
      {
        name: '–ó–∞–¥–∞—á–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (GET /api/tasks)',
        method: 'GET',
        path: '/api/tasks',
        headers: authHeaders,
        expectedStatus: [200, 400] // 400 –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      }
    ];
    
    for (const test of authTests) {
      try {
        console.log(`\n${colors.blue}–¢–µ—Å—Ç–∏—Ä—É—é: ${test.name}${colors.reset}`);
        
        const response = await makeRequest(test.method, test.path, test.data, test.headers);
        
        const statusOk = test.expectedStatus.includes(response.statusCode);
        
        if (statusOk) {
          logResult(test.name, true, `–°—Ç–∞—Ç—É—Å: ${response.statusCode}`);
          passedTests++;
        } else {
          logResult(test.name, false, `–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å ${test.expectedStatus}, –ø–æ–ª—É—á–µ–Ω ${response.statusCode}`);
          if (response.body && typeof response.body === 'object') {
            console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response.body)}`);
          }
        }
        
      } catch (error) {
        logResult(test.name, false, `–û—à–∏–±–∫–∞: ${error.message}`);
      }
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log(`\n${colors.bold}${colors.blue}=== –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===${colors.reset}`);
  
  const totalTests = tests.length + (authToken ? 4 : 0);
  
  console.log(`${colors.bold}–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}${colors.reset}`);
  
  if (passedTests >= totalTests * 0.8) { // 80% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    console.log(`\n${colors.bold}${colors.green}üéâ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û! API –†–ê–ë–û–¢–ê–ï–¢!${colors.reset}`);
  } else {
    console.log(`\n${colors.bold}${colors.red}‚ùå –ú–ù–û–ì–û –ù–ï–£–î–ê–ß–ù–´–• –¢–ï–°–¢–û–í. –¢–†–ï–ë–£–ï–¢–°–Ø –û–¢–õ–ê–î–ö–ê.${colors.reset}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ 500
  console.log(`\n${colors.yellow}–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:${colors.reset}`);
  console.log(`${colors.green}‚úì${colors.reset} –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã`);
  console.log(`${colors.green}‚úì${colors.reset} API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã`);
  console.log(`${colors.green}‚úì${colors.reset} –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ 500`);
  console.log(`${colors.green}‚úì${colors.reset} –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç`);
}

// –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
quickTest().catch(console.error);