const puppeteer = require('puppeteer');

(async () => {
  console.log('üöÄ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
    console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    await page.type('input[type="email"]', 'test@example.com');
    await page.type('input[type="password"]', 'password123');
    
    await page.click('button[type="submit"]');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üìç –¢–µ–∫—É—â–∏–π URL:', page.url());
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const fullHTML = await page.content();
    console.log('üìÑ –ü–æ–ª–Ω—ã–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log(fullHTML.substring(0, 2000));
    
    // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "–ø—Ä–æ–µ–∫—Ç", "project", "—Å–æ–∑–¥–∞—Ç—å", "create", "new"
    console.log('\nüîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏...');
    
    const projectElements = await page.evaluate(() => {
      const elements = [];
      const searchTerms = ['–ø—Ä–æ–µ–∫—Ç', 'project', '—Å–æ–∑–¥–∞—Ç—å', 'create', 'new', '–¥–æ–±–∞–≤–∏—Ç—å', 'add', '+'];
      
      // –ò—â–µ–º –≤–æ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —É–∑–ª–∞—Ö
      const walker = document.createTreeWalker(
        document.body,
        NodeFilter.SHOW_TEXT,
        null,
        false
      );
      
      let node;
      while (node = walker.nextNode()) {
        const text = node.textContent.toLowerCase().trim();
        if (text && searchTerms.some(term => text.includes(term))) {
          const parent = node.parentElement;
          if (parent) {
            elements.push({
              tag: parent.tagName,
              text: text,
              className: parent.className,
              id: parent.id,
              outerHTML: parent.outerHTML.substring(0, 200)
            });
          }
        }
      }
      
      return elements;
    });
    
    console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    projectElements.forEach((el, index) => {
      console.log(`${index + 1}. ${el.tag}: "${el.text}" (class: ${el.className})`);
      console.log(`   HTML: ${el.outerHTML}`);
    });
    
    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏
    console.log('\nüîò –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    const buttons = await page.evaluate(() => {
      const btns = Array.from(document.querySelectorAll('button, a, [role="button"]'));
      return btns.map(btn => ({
        tag: btn.tagName,
        text: btn.textContent.trim(),
        className: btn.className,
        href: btn.href || '',
        onclick: btn.onclick ? btn.onclick.toString() : ''
      }));
    });
    
    buttons.forEach((btn, index) => {
      console.log(`${index + 1}. ${btn.tag}: "${btn.text}" (class: ${btn.className})`);
      if (btn.href) console.log(`   href: ${btn.href}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏–ª–∏ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('\nüëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
    const hiddenElements = await page.evaluate(() => {
      const hidden = Array.from(document.querySelectorAll('[style*="display: none"], [style*="visibility: hidden"], .hidden'));
      return hidden.map(el => ({
        tag: el.tagName,
        className: el.className,
        text: el.textContent.trim().substring(0, 100)
      }));
    });
    
    console.log('üîç –°–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
    hiddenElements.forEach((el, index) => {
      console.log(`${index + 1}. ${el.tag}: "${el.text}" (class: ${el.className})`);
    });
    
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    await browser.close();
  }
})();