const { Pool } = require('pg');
require('dotenv').config();

async function fixSessionTokenLength() {
  const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
  });

  try {
    console.log('üîß –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è session_token...');
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è session_token –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤
    const alterQuery = `
      ALTER TABLE sessions 
      ALTER COLUMN session_token TYPE VARCHAR(500);
    `;
    
    await pool.query(alterQuery);
    
    console.log('‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–ª—è session_token —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const checkQuery = `
      SELECT 
        column_name, 
        data_type, 
        character_maximum_length
      FROM information_schema.columns 
      WHERE table_schema = 'public' 
        AND table_name = 'sessions'
        AND column_name = 'session_token';
    `;
    
    const result = await pool.query(checkQuery);
    
    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—è session_token:');
    console.log('============================================');
    result.rows.forEach(row => {
      console.log(`${row.column_name}: ${row.data_type}(${row.character_maximum_length})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è session_token:', error.message);
  } finally {
    await pool.end();
  }
}

fixSessionTokenLength();