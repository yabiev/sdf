// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const path = require('path');
const fs = require('fs');

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envPath = path.join(__dirname, '.env.local');
    let envContent = '';
    
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
      console.log('üìÑ –ù–∞–π–¥–µ–Ω .env.local —Ñ–∞–π–ª');
    } else {
      console.log('‚ö†Ô∏è .env.local —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const hasPostgres = envContent.includes('DATABASE_URL') || 
                       envContent.includes('POSTGRES') ||
                       process.env.DATABASE_URL ||
                       process.env.POSTGRES_URL;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQLite —Ñ–∞–π–ª–æ–≤
    const sqliteFiles = [
      path.join(__dirname, 'database.sqlite'),
      path.join(__dirname, 'database', 'database.sqlite'),
      path.join(__dirname, 'src', 'database.sqlite')
    ];
    
    const hasSqlite = sqliteFiles.some(file => fs.existsSync(file));
    
    console.log('üìä –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log('  PostgreSQL –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', hasPostgres ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('  SQLite —Ñ–∞–π–ª—ã:', hasSqlite ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã');
    
    if (hasPostgres) {
      console.log('üéØ –í–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: PostgreSQL');
    } else if (hasSqlite) {
      console.log('üéØ –í–µ—Ä–æ—è—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: SQLite');
      console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã users –≤ SQLite');
    } else {
      console.log('‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env.local
    if (envContent) {
      console.log('\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      const lines = envContent.split('\n').filter(line => 
        line.trim() && !line.startsWith('#') && 
        (line.includes('DATABASE') || line.includes('POSTGRES') || line.includes('SQLITE'))
      );
      lines.forEach(line => {
        const [key] = line.split('=');
        console.log(`  ${key}=***`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

checkDatabase();