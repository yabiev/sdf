const puppeteer = require('puppeteer');

async function testProjectList() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ http://localhost:3000');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    // –í–≤–æ–¥–∏–º email
    const emailInput = await page.$('input[type="email"], input[name="email"]');
    if (emailInput) {
      await emailInput.type('axelencore@mail.ru');
      console.log('‚úâÔ∏è Email –≤–≤–µ–¥–µ–Ω');
    }
    
    // –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
    const passwordInput = await page.$('input[type="password"], input[name="password"]');
    if (passwordInput) {
      await passwordInput.type('Ad580dc6axelencore');
      console.log('üîë –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
    }
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    let loginButton = await page.$('button[type="submit"]');
    
    if (!loginButton) {
      // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
      loginButton = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        return buttons.find(btn => {
          const text = btn.textContent?.toLowerCase() || '';
          return text.includes('–≤–æ–π—Ç–∏') || text.includes('login') || text.includes('sign in');
        });
      });
      
      if (loginButton && loginButton.asElement) {
        loginButton = loginButton.asElement();
      } else {
        loginButton = null;
      }
    }
    
    if (loginButton) {
      await loginButton.click();
      console.log('üö™ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
    }
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const projects = await page.evaluate(() => {
      // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã
      const projectElements = [];
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
      const selectors = [
        '[data-testid*="project"]',
        '.project-item',
        '.project-card',
        '[class*="project"]',
        'div:has(h1), div:has(h2), div:has(h3)' // –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      ];
      
      selectors.forEach(selector => {
        try {
          const elements = document.querySelectorAll(selector);
          elements.forEach(el => {
            const text = el.textContent?.trim();
            if (text && text.length > 0 && text.length < 200) {
              projectElements.push({
                selector,
                text: text.substring(0, 100),
                className: el.className,
                tagName: el.tagName
              });
            }
          });
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        }
      });
      
      return projectElements;
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${projects.length}`);
    
    if (projects.length > 0) {
      console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
      projects.slice(0, 10).forEach((project, index) => {
        console.log(`  ${index + 1}. [${project.tagName}] ${project.text}`);
      });
    }
    
    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const testProject = projects.find(p => 
      p.text.toLowerCase().includes('—Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç') ||
      p.text.toLowerCase().includes('test project')
    );
    
    if (testProject) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
      console.log(`üìù –¢–µ–∫—Å—Ç: ${testProject.text}`);
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectCount = projects.filter(p => 
      p.text.length > 5 && 
      !p.text.toLowerCase().includes('loading') &&
      !p.text.toLowerCase().includes('–∑–∞–≥—Ä—É–∑–∫–∞')
    ).length;
    
    console.log(`üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectCount}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏
    const logs = await page.evaluate(() => {
      return window.consoleLogs || [];
    });
    
    if (logs.length > 0) {
      console.log('\nüìã –õ–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞:');
      logs.forEach(log => {
        console.log(`üñ•Ô∏è Console ${log.type}: ${log.message}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
  } finally {
    await browser.close();
    console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...');
  }
}

testProjectList();