const puppeteer = require('puppeteer');

async function testAuthAndFunctions() {
  console.log('üåê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
  
  const browser = await puppeteer.launch({
    headless: false,
    devtools: true,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  page.on('console', msg => {
    console.log(`üñ•Ô∏è [BROWSER ${msg.type().toUpperCase()}]:`, msg.text());
  });
  
  try {
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    // –ò—â–µ–º –ø–æ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞
    const emailSelector = 'input[type="email"], input[name="email"], input[placeholder*="email" i]';
    const passwordSelector = 'input[type="password"], input[name="password"]';
    
    await page.waitForSelector(emailSelector, { timeout: 10000 });
    await page.waitForSelector(passwordSelector, { timeout: 10000 });
    
    // –í–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await page.type(emailSelector, 'axelencore@mail.ru');
    await page.type(passwordSelector, 'Ad580dc6axelencore');
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    const loginButtonSelector = 'button[type="submit"], button:contains("–í–æ–π—Ç–∏"), button:contains("Login"), button:contains("Sign in")';
    
    try {
      await page.waitForSelector('button[type="submit"]', { timeout: 5000 });
      await page.click('button[type="submit"]');
    } catch {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É
      const buttons = await page.$$('button');
      for (const button of buttons) {
        const text = await page.evaluate(el => el.textContent, button);
        if (text && (text.includes('–í–æ–π—Ç–∏') || text.includes('Login') || text.includes('Sign in'))) {
          await button.click();
          break;
        }
      }
    }
    
    console.log('üîÑ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const currentUrl = page.url();
    console.log(`üìç –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);
    
    console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createProjectSelectors = [
      'button:contains("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")',
      'button:contains("Create Project")',
      'button[data-testid="create-project"]',
      '.create-project-button',
      '[aria-label*="—Å–æ–∑–¥–∞—Ç—å" i]',
      'button[title*="—Å–æ–∑–¥–∞—Ç—å" i]',
      'button svg[data-lucide="plus"]'
    ];
    
    let createButton = null;
    for (const selector of createProjectSelectors) {
      try {
        if (selector.includes('contains')) {
          // –î–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å :contains –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
          const text = selector.includes('–°–æ–∑–¥–∞—Ç—å') ? '–°–æ–∑–¥–∞—Ç—å' : 'Create';
          const xpath = `//button[contains(text(), '${text}')]`;
          const elements = await page.$x(xpath);
          if (elements.length > 0) {
            createButton = elements[0];
            break;
          }
        } else {
          createButton = await page.$(selector);
          if (createButton) break;
        }
      } catch (e) {
        continue;
      }
    }
    
    if (!createButton) {
      // –ò—â–µ–º –ª—é–±—É—é –∫–Ω–æ–ø–∫—É —Å –ø–ª—é—Å–æ–º
      const plusButtons = await page.$$('button');
      for (const button of plusButtons) {
        const html = await page.evaluate(el => el.innerHTML, button);
        if (html.includes('plus') || html.includes('+')) {
          createButton = button;
          break;
        }
      }
    }
    
    if (createButton) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, –∫–ª–∏–∫–∞–µ–º...');
      await createButton.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–ª–∏ —Ñ–æ—Ä–º—É
      const modalSelectors = [
        '.modal',
        '[role="dialog"]',
        '.dialog',
        '.popup',
        'form'
      ];
      
      let modal = null;
      for (const selector of modalSelectors) {
        modal = await page.$(selector);
        if (modal) break;
      }
      
      if (modal) {
        console.log('üìù –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
        
        // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        const nameInput = await page.$('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ" i], input[placeholder*="name" i]');
        const descInput = await page.$('textarea[name="description"], input[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ" i]');
        
        if (nameInput) {
          await nameInput.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now());
        }
        
        if (descInput) {
          await descInput.type('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
        }
        
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
        const submitButton = await page.$('button[type="submit"], button:contains("–°–æ–∑–¥–∞—Ç—å"), button:contains("Create")');
        if (submitButton) {
          console.log('üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç...');
          await submitButton.click();
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∞–º–∏...');
    
    // –ò—â–µ–º –¥–æ—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã
    const boardSelectors = [
      '.board',
      '.project-card',
      '.project-item',
      '[data-testid="board"]',
      '[data-testid="project"]'
    ];
    
    let boards = [];
    for (const selector of boardSelectors) {
      boards = await page.$$(selector);
      if (boards.length > 0) break;
    }
    
    if (boards.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${boards.length} –¥–æ—Å–æ–∫/–ø—Ä–æ–µ–∫—Ç–æ–≤`);
      
      // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é –¥–æ—Å–∫—É
      await boards[0].click();
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á...');
      
      // –ò—â–µ–º –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
      const taskSelectors = [
        '.task',
        '.task-card',
        '.todo-item',
        '[data-testid="task"]',
        'button:contains("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")',
        'button:contains("Add task")'
      ];
      
      let tasks = [];
      for (const selector of taskSelectors) {
        if (selector.includes('contains')) {
          const text = selector.includes('–î–æ–±–∞–≤–∏—Ç—å') ? '–î–æ–±–∞–≤–∏—Ç—å' : 'Add';
          const xpath = `//button[contains(text(), '${text}')]`;
          const elements = await page.$x(xpath);
          tasks = elements;
        } else {
          tasks = await page.$$(selector);
        }
        if (tasks.length > 0) break;
      }
      
      console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á`);
    } else {
      console.log('‚ùå –î–æ—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    const logs = await page.evaluate(() => {
      return window.console.errors || [];
    });
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:');
    console.log('- ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    console.log('- ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('- ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    console.log('- ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîß –ë—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    console.log('üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
    
    // –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç
    await new Promise(resolve => setTimeout(resolve, 600000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await browser.close();
  }
}

testAuthAndFunctions().catch(console.error);