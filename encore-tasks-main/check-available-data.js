const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
  email: 'test@example.com',
  password: 'password123'
};

let authToken = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const result = {
            statusCode: res.statusCode,
            headers: res.headers,
            body: body ? JSON.parse(body) : null
          };
          resolve(result);
        } catch (e) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            body: body
          });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏–Ω–∞
async function login() {
  console.log('üîê –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/auth/login',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    }
  };
  
  try {
    const response = await makeRequest(options, TEST_USER);
    
    if (response.statusCode === 200 && response.body.token) {
      authToken = response.body.token;
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
async function getProjects() {
  console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/api/projects',
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${authToken}`
    }
  };
  
  try {
    const response = await makeRequest(options);
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', response.statusCode);
    console.log('–ü—Ä–æ–µ–∫—Ç—ã:', JSON.stringify(response.body, null, 2));
    
    return response.body;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫
async function getBoards(projectId = null) {
  console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫...');
  
  const path = projectId ? `/api/boards?project_id=${projectId}` : '/api/boards';
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: path,
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${authToken}`
    }
  };
  
  try {
    const response = await makeRequest(options);
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –¥–æ—Å–æ–∫:', response.statusCode);
    console.log('–î–æ—Å–∫–∏:', JSON.stringify(response.body, null, 2));
    
    return response.body;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
async function getColumns(boardId = null) {
  console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫...');
  
  const path = boardId ? `/api/columns?board_id=${boardId}` : '/api/columns';
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: path,
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${authToken}`
    }
  };
  
  try {
    const response = await makeRequest(options);
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫:', response.statusCode);
    console.log('–ö–æ–ª–æ–Ω–∫–∏:', JSON.stringify(response.body, null, 2));
    
    return response.body;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function checkAvailableData() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n');
  
  try {
    const loginSuccess = await login();
    if (!loginSuccess) return;
    
    console.log('\n--- –ü—Ä–æ–µ–∫—Ç—ã ---');
    const projects = await getProjects();
    
    console.log('\n--- –î–æ—Å–∫–∏ ---');
    const boards = await getBoards();
    
    console.log('\n--- –ö–æ–ª–æ–Ω–∫–∏ ---');
    const columns = await getColumns();
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkAvailableData().then(() => {
  console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
}).catch((error) => {
  console.log('\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
  console.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
});