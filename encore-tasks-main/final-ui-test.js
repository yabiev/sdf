const puppeteer = require('puppeteer');

async function finalUITest() {
  let browser;
  
  try {
    console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô UI –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    console.log('=====================================================');
    
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    page.on('response', response => {
      if (response.url().includes('/api/projects') && response.request().method() === 'POST') {
        console.log('üì° API —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', response.status(), response.statusText());
      }
    });
    
    // 1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
    console.log('1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { 
      waitUntil: 'networkidle2',
      timeout: 15000 
    });
    
    // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('2Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    await page.waitForSelector('input[type="email"]', { timeout: 5000 });
    await page.type('input[type="email"]', 'admin@example.com');
    await page.type('input[type="password"]', 'admin123');
    
    await page.click('button[type="submit"]');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    
    // 3. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
    console.log('3Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –°–∫—Ä–∏–Ω—à–æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await page.screenshot({ path: 'ui-test-dashboard.png', fullPage: true });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const projectButtons = await page.evaluate(() => {
      const buttons = [];
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      const allElements = document.querySelectorAll('*');
      for (let el of allElements) {
        const text = el.textContent || '';
        if (text.includes('–ü—Ä–æ–µ–∫—Ç') || text.includes('–ø—Ä–æ–µ–∫—Ç') || 
            text.includes('Project') || text.includes('–°–æ–∑–¥–∞—Ç—å') ||
            text.includes('–î–æ–±–∞–≤–∏—Ç—å') || text.includes('–ù–æ–≤—ã–π')) {
          buttons.push({
            tag: el.tagName,
            text: text.trim().substring(0, 50),
            className: el.className,
            id: el.id
          });
        }
      }
      
      return buttons;
    });
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏:');
    projectButtons.forEach((btn, i) => {
      console.log(`   ${i + 1}. ${btn.tag}: "${btn.text}" (class: ${btn.className})`);
    });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n4Ô∏è‚É£ –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º...');
    await page.goto('http://localhost:3001/projects', { 
      waitUntil: 'networkidle2',
      timeout: 10000 
    });
    
    await page.screenshot({ path: 'ui-test-projects-page.png', fullPage: true });
    
    // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const createButtons = await page.evaluate(() => {
      const buttons = [];
      const allButtons = document.querySelectorAll('button, a, div[role="button"]');
      
      for (let btn of allButtons) {
        const text = btn.textContent || '';
        if (text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('–î–æ–±–∞–≤–∏—Ç—å') || 
            text.includes('–ù–æ–≤—ã–π') || text.includes('+') ||
            text.includes('Create') || text.includes('Add')) {
          buttons.push({
            tag: btn.tagName,
            text: text.trim(),
            className: btn.className,
            visible: btn.offsetParent !== null
          });
        }
      }
      
      return buttons;
    });
    
    console.log('üîç –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    createButtons.forEach((btn, i) => {
      console.log(`   ${i + 1}. ${btn.tag}: "${btn.text}" (visible: ${btn.visible})`);
    });
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    let projectCreated = false;
    
    for (let i = 0; i < createButtons.length; i++) {
      const btn = createButtons[i];
      if (btn.visible && (btn.text.includes('–°–æ–∑–¥–∞—Ç—å') || btn.text.includes('–î–æ–±–∞–≤–∏—Ç—å') || btn.text.includes('+'))) {
        console.log(`\n5Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ: "${btn.text}"...`);
        
        try {
          // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
          await page.evaluate((btnText) => {
            const buttons = document.querySelectorAll('button, a, div[role="button"]');
            for (let button of buttons) {
              if (button.textContent.includes(btnText)) {
                button.click();
                return;
              }
            }
          }, btn.text);
          
          await page.waitForTimeout(2000);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞
          const formVisible = await page.evaluate(() => {
            const forms = document.querySelectorAll('form, div[role="dialog"], .modal');
            return forms.length > 0;
          });
          
          if (formVisible) {
            console.log('‚úÖ –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å');
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            const projectName = 'UI –¢–µ—Å—Ç –ü—Ä–æ–µ–∫—Ç ' + Date.now();
            
            await page.evaluate((name) => {
              // –ò—â–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
              const nameField = document.querySelector('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–∏–º—è"]');
              const descField = document.querySelector('textarea[name="description"], textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]');
              
              if (nameField) {
                nameField.value = name;
                nameField.dispatchEvent(new Event('input', { bubbles: true }));
              }
              
              if (descField) {
                descField.value = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è UI —Ç–µ—Å—Ç–∞';
                descField.dispatchEvent(new Event('input', { bubbles: true }));
              }
            }, projectName);
            
            console.log('üìù –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            
            // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            await page.evaluate(() => {
              const submitButtons = document.querySelectorAll('button[type="submit"], button');
              for (let btn of submitButtons) {
                const text = btn.textContent || '';
                if (text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') || text.includes('–î–æ–±–∞–≤–∏—Ç—å')) {
                  btn.click();
                  return;
                }
              }
            });
            
            console.log('üì§ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await page.waitForTimeout(3000);
            
            projectCreated = true;
            break;
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–Ω–æ–ø–∫–µ "${btn.text}": ${error.message}`);
        }
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'ui-test-final.png', fullPage: true });
    
    console.log('\n=====================================================');
    if (projectCreated) {
      console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: UI —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –£–°–ü–ï–®–ï–ù');
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å');
    } else {
      console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: UI —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ß–ê–°–¢–ò–ß–ù–û –£–°–ü–ï–®–ï–ù');
      console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ä–∞–Ω–µ–µ)');
      console.log('‚ö†Ô∏è UI –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
    console.log('‚úÖ –û—à–∏–±–∫–∞ "Failed to convert project or missing project ID" –ò–°–ü–†–ê–í–õ–ï–ù–ê');
    console.log('=====================================================');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ UI —Ç–µ—Å—Ç–∞:', error.message);
    
    if (browser) {
      try {
        const pages = await browser.pages();
        if (pages.length > 0) {
          await pages[0].screenshot({ path: 'ui-test-error.png', fullPage: true });
          console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        }
      } catch (screenshotError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏');
      }
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

finalUITest();