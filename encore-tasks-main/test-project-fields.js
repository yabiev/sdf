// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
const API_BASE = 'http://localhost:3000/api';

async function testProjectFields() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const authResponse = await fetch(`${API_BASE}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'admin@example.com',
        password: 'admin123'
      })
    });
    
    if (!authResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${authResponse.status}`);
    }
    
    const authData = await authResponse.json();
    const token = authData.token;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const projectData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      color: '#FF5722',
      memberIds: [],
      telegramChatId: '-1001234567890',
      telegramTopicId: '123'
    };
    
    const createResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(projectData)
    });
    
    if (!createResponse.ok) {
      const errorText = await createResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${createResponse.status} - ${errorText}`);
    }
    
    const response = await createResponse.json();
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:');
    console.log(JSON.stringify(response, null, 2));
    
    const createdProject = response.data;
    console.log('ID –ø—Ä–æ–µ–∫—Ç–∞:', createdProject.id);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!createdProject.id) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ id. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', Object.keys(createdProject));
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ id');
    }
    console.log('‚úÖ –ü–æ–ª–µ id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.id);
    
    if (!createdProject.name || createdProject.name !== projectData.name) {
      throw new Error(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ name: –æ–∂–∏–¥–∞–ª–æ—Å—å "${projectData.name}", –ø–æ–ª—É—á–µ–Ω–æ "${createdProject.name}"`);
    }
    console.log('‚úÖ –ü–æ–ª–µ name –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', createdProject.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    console.log('‚úÖ –ü–æ–ª–µ color –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.color);
    
    if (!createdProject.created_by) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ created_by');
    }
    console.log('‚úÖ –ü–æ–ª–µ created_by –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.created_by);
    
    if (!createdProject.created_at) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ created_at');
    }
    console.log('‚úÖ –ü–æ–ª–µ created_at –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.created_at);
    
    if (!createdProject.updated_at) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ updated_at');
    }
    console.log('‚úÖ –ü–æ–ª–µ updated_at –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.updated_at);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –ø–æ–ª—è (–º–æ–≥—É—Ç –±—ã—Ç—å null)
    console.log('‚úÖ –ü–æ–ª–µ telegram_chat_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.telegram_chat_id);
    console.log('‚úÖ –ü–æ–ª–µ telegram_topic_id –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', createdProject.telegram_topic_id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (typeof createdProject.members_count !== 'number') {
      throw new Error('‚ùå –ü–æ–ª–µ members_count –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    console.log('‚úÖ –ü–æ–ª–µ members_count –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', createdProject.members_count);
    
    if (typeof createdProject.boards_count !== 'number') {
      throw new Error('‚ùå –ü–æ–ª–µ boards_count –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    console.log('‚úÖ –ü–æ–ª–µ boards_count –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', createdProject.boards_count);
    
    if (typeof createdProject.tasks_count !== 'number') {
      throw new Error('‚ùå –ü–æ–ª–µ tasks_count –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    console.log('‚úÖ –ü–æ–ª–µ tasks_count –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:', createdProject.tasks_count);
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    const minimalResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        name: '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç',
        description: '–ü—Ä–æ–µ–∫—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
      })
    });

    if (minimalResponse.ok) {
      const minimalResponse_data = await minimalResponse.json();
      const minimalProject = minimalResponse_data.data;
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω:', minimalProject.name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (minimalProject.color) {
        console.log('‚úÖ –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', minimalProject.color);
      } else {
        console.log('‚ùå –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
      if (minimalProject.telegram_chat_id === null && minimalProject.telegram_topic_id === null) {
        console.log('‚úÖ Telegram –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ null');
      } else {
        console.log('‚ùå Telegram –ø–æ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
      }
    } else {
      const errorText = await minimalResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${minimalResponse.status} - ${errorText}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –ø–æ–ª–µ–π
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –ø–æ–ª–µ–π...');
    const invalidTelegramProject = {
      name: '–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
      color: '#4CAF50',
      memberIds: [],
      telegramChatId: 'invalid-chat-id', // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      telegramTopicId: 'invalid-topic-id' // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    };
    
    const invalidResponse = await fetch(`${API_BASE}/projects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(invalidTelegramProject)
    });
    
    // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (invalidResponse.ok) {
      console.log('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –ø–æ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)');
    } else {
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –ø–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø—Ä–æ–µ–∫—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω)');
    }
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –ø–æ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    process.exit(1);
  }
}

testProjectFields();