const puppeteer = require('puppeteer');

async function debugAuth() {
  let browser;
  
  try {
    console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const requests = [];
    const responses = [];
    
    page.on('request', request => {
      requests.push({
        url: request.url(),
        method: request.method(),
        headers: request.headers()
      });
      console.log('üì§ –ó–∞–ø—Ä–æ—Å:', request.method(), request.url());
    });
    
    page.on('response', response => {
      responses.push({
        url: response.url(),
        status: response.status(),
        statusText: response.statusText()
      });
      console.log('üì• –û—Ç–≤–µ—Ç:', response.status(), response.url());
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { 
      waitUntil: 'networkidle2',
      timeout: 15000 
    });
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã
    await page.waitForSelector('input[type="email"]', { timeout: 5000 });
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    await page.type('input[type="email"]', 'admin@example.com');
    await page.type('input[type="password"]', 'admin123');
    
    console.log('üìù –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    
    // –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    await page.screenshot({ path: 'before-submit.png', fullPage: true });
    
    // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
    const [response] = await Promise.all([
      page.waitForResponse(response => 
        response.url().includes('/api/auth/login') || 
        response.url().includes('/login'), 
        { timeout: 10000 }
      ),
      page.click('button[type="submit"]')
    ]);
    
    console.log('üîê –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥:', response.status(), response.statusText());
    
    if (response.status() === 200) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      try {
        await page.waitForNavigation({ 
          waitUntil: 'networkidle2',
          timeout: 5000 
        });
        console.log('üåê –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      } catch (navError) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      }
      
      // –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await page.screenshot({ path: 'auth-result.png', fullPage: true });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const currentUrl = page.url();
      console.log('üåê –¢–µ–∫—É—â–∏–π URL:', currentUrl);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
      const dashboardElements = await page.$$eval('*', elements => 
        elements.filter(el => 
          el.textContent && (
            el.textContent.includes('–ì–ª–∞–≤–Ω–∞—è') ||
            el.textContent.includes('–î–æ—Å–∫–∏') ||
            el.textContent.includes('–ü—Ä–æ–µ–∫—Ç—ã') ||
            el.textContent.includes('Dashboard')
          )
        ).map(el => el.textContent.trim())
      );
      
      console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', dashboardElements);
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status());
      const responseText = await response.text();
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', responseText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    if (browser) {
      try {
        const pages = await browser.pages();
        if (pages.length > 0) {
          await pages[0].screenshot({ path: 'debug-error.png', fullPage: true });
          console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        }
      } catch (screenshotError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏');
      }
    }
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

debugAuth();