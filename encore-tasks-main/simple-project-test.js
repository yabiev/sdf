const axios = require('axios');

const BASE_URL = 'http://localhost:3000';
const API_BASE_URL = 'http://localhost:3000/api';

async function testProjectCreation() {
  console.log('=== –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ===\n');
  
  try {
    // 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'admin@example.com',
      password: 'admin123'
    });
    
    if (loginResponse.status === 200 && loginResponse.data.token) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      const token = loginResponse.data.token;
      
      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
      const projectsBeforeResponse = await axios.get(`${API_BASE_URL}/projects`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      const projectsCountBefore = projectsBeforeResponse.data.data?.projects?.length || projectsBeforeResponse.data.length || 0;
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsCountBefore}`);
      
      // 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
      const newProject = {
        name: `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ${Date.now()}`,
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API',
        status: 'active',
        icon: 'üìã',
        color: '#3B82F6'
      };
      
      const createResponse = await axios.post(`${API_BASE_URL}/projects`, newProject, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      if (createResponse.status === 201) {
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', JSON.stringify(createResponse.data, null, 2));
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        const projectsAfterResponse = await axios.get(`${API_BASE_URL}/projects`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const projectsCountAfter = projectsAfterResponse.data.data?.projects?.length || projectsAfterResponse.data.length || 0;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projectsCountAfter}`);
        
        if (projectsCountAfter > projectsCountBefore) {
          console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ!');
        } else {
          console.log('\n‚ùå –û–®–ò–ë–ö–ê: –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ');
        }
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createResponse.status);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
  } catch (error) {
    console.log('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    if (error.response) {
      console.log('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.log('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.log('–û—à–∏–±–∫–∞:', error.message);
    }
  }
  
  console.log('\n==================================================');
}

testProjectCreation();