const Database = require('better-sqlite3');
const jwt = require('jsonwebtoken');
const path = require('path');

console.log('=== –°–û–ó–î–ê–ù–ò–ï JWT –°–ï–°–°–ò–ò ===');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
const dbPath = path.join(__dirname, 'database.sqlite');
console.log('üìÅ –ü—É—Ç—å –∫ –ë–î:', dbPath);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new Database(dbPath);

// JWT Secret
const JWT_SECRET = 'your-super-secret-jwt-key-here-change-in-production';

async function createSession() {
  try {
    // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º ID
    const targetUserId = '3a028dd5-5327-457a-b8d4-11c7e2c706ce';
    
    let user = db.prepare('SELECT * FROM users WHERE id = ?').get(targetUserId);
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID', targetUserId, '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = db.prepare('SELECT * FROM users LIMIT 1').get();
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        process.exit(1);
      }
      console.log('üìã –ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.email);
    }
    
    console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id, user.email);
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = {
      userId: user.id,
      email: user.email,
      role: user.role || 'user',
      name: user.name,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 —á–∞—Å–∞
    };
    
    const jwtToken = jwt.sign(payload, JWT_SECRET);
    console.log('üîë –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω:', jwtToken);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deleteStmt = db.prepare('DELETE FROM sessions WHERE user_id = ?');
    const deleteResult = deleteStmt.run(user.id);
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π:', deleteResult.changes);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
    const createdAt = new Date();
    
    const insertStmt = db.prepare(`
      INSERT INTO sessions (token, user_id, expires_at, created_at) 
      VALUES (?, ?, ?, ?)
    `);
    
    const insertResult = insertStmt.run(
      jwtToken,
      user.id,
      expiresAt.toISOString(),
      createdAt.toISOString()
    );
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, ID:', insertResult.lastInsertRowid);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const checkStmt = db.prepare('SELECT * FROM sessions WHERE token = ?');
    const session = checkStmt.get(jwtToken);
    
    if (session) {
      console.log('‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î:', {
        token: session.token.substring(0, 50) + '...',
        user_id: session.user_id,
        expires_at: session.expires_at
      });
    } else {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è');
    }
    
    console.log('\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(jwtToken);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    db.close();
  }
}

createSession();