const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks_db',
  password: 'postgres',
  port: 5432,
});

async function checkCurrentHash() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–µ—à
    const result = await pool.query(
      'SELECT password_hash FROM users WHERE email = $1',
      ['axelencore@mail.ru']
    );
    
    if (result.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const currentHash = result.rows[0].password_hash;
    console.log('üìã –¢–µ–∫—É—â–∏–π —Ö–µ—à –≤ –ë–î:', currentHash);
    console.log('üìã –ù–∞—á–∞–ª–æ —Ö–µ—à–∞:', currentHash.substring(0, 20) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å admin123
    const isValid = await bcrypt.compare('admin123', currentHash);
    console.log('üîê –ü–∞—Ä–æ–ª—å admin123 –≤–∞–ª–∏–¥–µ–Ω:', isValid);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const newHash = await bcrypt.hash('admin123', 10);
    console.log('üÜï –ù–æ–≤—ã–π —Ö–µ—à –¥–ª—è admin123:', newHash);
    console.log('üÜï –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞:', newHash.substring(0, 20) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ö–µ—à
    const newHashValid = await bcrypt.compare('admin123', newHash);
    console.log('üîê –ù–æ–≤—ã–π —Ö–µ—à –≤–∞–ª–∏–¥–µ–Ω:', newHashValid);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await pool.query(
      'UPDATE users SET password_hash = $1 WHERE email = $2',
      [newHash, 'axelencore@mail.ru']
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    const updatedResult = await pool.query(
      'SELECT password_hash FROM users WHERE email = $1',
      ['axelencore@mail.ru']
    );
    
    const updatedHash = updatedResult.rows[0].password_hash;
    console.log('‚úÖ –•–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î:', updatedHash.substring(0, 20) + '...');
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const finalCheck = await bcrypt.compare('admin123', updatedHash);
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', finalCheck);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

checkCurrentHash();