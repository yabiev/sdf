const axios = require('axios');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
    baseURL: 'http://localhost:3000',
    timeout: 10000,
    testUser: {
        email: 'admin@example.com',
        password: 'admin123'
    },
    testData: {
        validProject: {
            name: 'Test Project Valid',
            description: 'Valid test project description'
        },
        invalidProject: {
            name: '', // –ü—É—Å—Ç–æ–µ –∏–º—è
            description: 'Invalid project with empty name'
        },
        validBoard: {
            name: 'Test Board',
            description: 'Test board description'
        },
        validTask: {
            title: 'Test Task',
            description: 'Test task description',
            status: 'todo'
        }
    }
};

class ComprehensiveErrorDetector {
    constructor() {
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            errors: [],
            warnings: [],
            details: []
        };
        this.authToken = null;
        this.testProjectId = null;
        this.testBoardId = null;
        this.testTaskId = null;
    }

    log(message, type = 'info') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${type.toUpperCase()}] ${message}`;
        console.log(logMessage);
        
        if (type === 'error') {
            this.results.errors.push(message);
        } else if (type === 'warning') {
            this.results.warnings.push(message);
        }
    }

    async makeRequest(endpoint, method, data = null, headers = {}) {
        try {
            const config = {
                method,
                url: `${CONFIG.baseURL}${endpoint}`,
                timeout: CONFIG.timeout,
                headers: {
                    'Content-Type': 'application/json',
                    ...headers
                }
            };

            if (this.authToken) {
                config.headers.Authorization = `Bearer ${this.authToken}`;
            }

            if (data) {
                config.data = data;
            }

            const response = await axios(config);
            return {
                success: true,
                data: response.data,
                status: response.status,
                headers: response.headers
            };
        } catch (error) {
            return {
                success: false,
                error: error.message,
                status: error.response?.status,
                data: error.response?.data
            };
        }
    }

    async testAuthentication() {
        this.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        
        // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        const validAuth = await this.makeRequest('/api/auth/login', 'POST', CONFIG.testUser);
        
        if (validAuth.success && validAuth.data?.token) {
            this.authToken = validAuth.data.token;
            this.log('‚úÖ –í–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –í–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        const invalidAuth = await this.makeRequest('/api/auth/login', 'POST', {
            email: 'invalid@example.com',
            password: 'wrongpassword'
        });
        
        if (!invalidAuth.success && invalidAuth.status === 401) {
            this.log('‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 3: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        const emptyAuth = await this.makeRequest('/api/auth/login', 'POST', {});
        
        if (!emptyAuth.success && (emptyAuth.status === 400 || emptyAuth.status === 422)) {
            this.log('‚úÖ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
            this.results.passed++;
        } else {
            this.log('‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã', 'error');
            this.results.failed++;
        }
        this.results.total++;
    }

    async testProjectsAPI() {
        this.log('üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        
        if (!this.authToken) {
            this.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
            return;
        }

        // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        const getProjects = await this.makeRequest('/api/projects', 'GET');
        
        if (getProjects.success) {
            this.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            if (getProjects.success && getProjects.data && getProjects.data.data && Array.isArray(getProjects.data.data.projects)) {
                this.log('‚úÖ –§–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
                this.results.passed++;
            } else {
                this.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
                this.log(`–ü–æ–ª—É—á–µ–Ω —Ñ–æ—Ä–º–∞—Ç: ${JSON.stringify(getProjects, null, 2)}`, 'debug');
                this.results.failed++;
            }
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', 'error');
            this.results.failed++;
        }
        this.results.total += 2;

        // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        const createProject = await this.makeRequest('/api/projects', 'POST', CONFIG.testData.validProject);
        
        if (createProject.status === 201 && createProject.data?.data?.id) {
            this.testProjectId = createProject.data.data.id;
            this.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', 'error');
            this.log(`–°—Ç–∞—Ç—É—Å: ${createProject.status}`, 'debug');
            this.log(`–û—à–∏–±–∫–∞: ${createProject.error}`, 'debug');
            this.log(`–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(createProject.data, null, 2)}`, 'debug');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        const createInvalidProject = await this.makeRequest('/api/projects', 'POST', CONFIG.testData.invalidProject);
        
        if (!createInvalidProject.success && (createInvalidProject.status === 400 || createInvalidProject.status === 422)) {
            this.log('‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if (this.testProjectId) {
            this.log(`DEBUG: –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–µ–∫—Ç–∞ —Å ID: ${this.testProjectId}`, 'debug');
            const getProject = await this.makeRequest(`/api/projects/${this.testProjectId}`, 'GET');
            this.log(`DEBUG: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${JSON.stringify(getProject, null, 2)}`, 'debug');
            
            if (getProject.success && getProject.data?.data?.project?.id === this.testProjectId) {
                this.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
                this.results.passed++;
            } else {
                this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', 'error');
                this.log(`–û—à–∏–±–∫–∞: ${getProject.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                this.results.failed++;
            }
            this.results.total++;
        }
    }

    async testBoardsAPI() {
        this.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ—Å–æ–∫...');
        
        if (!this.authToken || !this.testProjectId) {
            this.log('‚ùå –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–æ–∫', 'error');
            return;
        }

        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
        const boardData = {
            ...CONFIG.testData.validBoard,
            project_id: this.testProjectId
        };
        
        this.log(`DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: ${JSON.stringify(boardData, null, 2)}`, 'debug');
        this.log(`DEBUG: Project ID type: ${typeof this.testProjectId}, Value: ${this.testProjectId}`, 'debug');
        const createBoard = await this.makeRequest('/api/boards', 'POST', boardData);
        this.log(`DEBUG: –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏: ${JSON.stringify(createBoard, null, 2)}`, 'debug');
        
        if (createBoard.success && createBoard.data?.data?.id) {
            this.testBoardId = createBoard.data.data.id;
            this.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É', 'error');
            this.log(`–û—à–∏–±–∫–∞: ${createBoard.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        this.log(`DEBUG: –ó–∞–ø—Ä–æ—Å –¥–æ—Å–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ID: ${this.testProjectId}`, 'debug');
        const getBoards = await this.makeRequest(`/api/boards?project_id=${this.testProjectId}`, 'GET');
        this.log(`DEBUG: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫: ${JSON.stringify(getBoards, null, 2)}`, 'debug');
        
        if (getBoards.success && Array.isArray(getBoards.data?.data?.boards)) {
            this.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞', 'error');
            this.log(`–û—à–∏–±–∫–∞: ${getBoards.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
            this.results.failed++;
        }
        this.results.total++;
    }

    async testTasksAPI() {
        this.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–¥–∞—á...');
        
        if (!this.authToken || !this.testBoardId) {
            this.log('‚ùå –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á', 'error');
            return;
        }

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ –¥–æ—Å–∫–µ
        const columnData = {
            name: 'Test Column',
            board_id: this.testBoardId // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–æ—Å–∫–∏
        };
        
        this.log(`DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏: ${JSON.stringify(columnData, null, 2)}`, 'debug');
        const createColumn = await this.makeRequest('/api/columns', 'POST', columnData);
        this.log(`DEBUG: –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏: ${JSON.stringify(createColumn, null, 2)}`, 'debug');
        
        if (!createColumn.success || !createColumn.data?.data?.id) {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∑–∞–¥–∞—á', 'error');
            this.log(`–û—à–∏–±–∫–∞: ${createColumn.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
            this.results.failed++;
            this.results.total++;
            return;
        }
        
        this.testColumnId = createColumn.data.data.id;
        this.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ');
        this.results.passed++;
        this.results.total++;

        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const taskData = {
            ...CONFIG.testData.validTask,
            column_id: this.testColumnId
        };
        
        const createTask = await this.makeRequest('/api/tasks', 'POST', taskData);
        
        if (createTask.success && createTask.data?.data?.id) {
            this.testTaskId = createTask.data.data.id;
            this.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏
        const getTasks = await this.makeRequest(`/api/tasks?board_id=${this.testBoardId}`, 'GET');
        
        if (getTasks.success && Array.isArray(getTasks.data?.data)) {
            this.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–æ—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–æ—Å–∫–∏', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        if (this.testTaskId) {
            const updateTask = await this.makeRequest(`/api/tasks/${this.testTaskId}`, 'PUT', {
                status: 'in_progress'
            });
            
            if (updateTask.success) {
                this.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ');
                this.results.passed++;
            } else {
                this.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏', 'error');
                this.results.failed++;
            }
            this.results.total++;
        }
    }

    async testErrorHandling() {
        this.log('‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
        
        // –¢–µ—Å—Ç 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const notFound = await this.makeRequest('/api/nonexistent', 'GET');
        
        if (!notFound.success && notFound.status === 404) {
            this.log('‚úÖ 404 –æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
            this.results.passed++;
        } else {
            this.log('‚ùå 404 –æ—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            this.results.failed++;
        }
        this.results.total++;

        // –¢–µ—Å—Ç 2: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
        const oldToken = this.authToken;
        this.authToken = 'invalid_token';
        
        const unauthorized = await this.makeRequest('/api/projects', 'GET');
        
        if (!unauthorized.success && unauthorized.status === 401) {
            this.log('‚úÖ 401 –æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
            this.results.passed++;
        } else {
            this.log('‚ùå 401 –æ—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'error');
            this.results.failed++;
        }
        this.results.total++;
        
        this.authToken = oldToken;

        // –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const badRequest = await this.makeRequest('/api/projects', 'POST', {
            invalidField: 'invalid_value'
        });
        
        if (!badRequest.success && (badRequest.status === 400 || badRequest.status === 422)) {
            this.log('‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
            this.results.passed++;
        } else {
            this.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã', 'error');
            this.results.failed++;
        }
        this.results.total++;
    }

    async cleanup() {
        this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        if (this.testTaskId) {
            await this.makeRequest(`/api/tasks/${this.testTaskId}`, 'DELETE');
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        if (this.testColumnId) {
            await this.makeRequest(`/api/columns/${this.testColumnId}`, 'DELETE');
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–æ—Å–∫–∏
        if (this.testBoardId) {
            await this.makeRequest(`/api/boards/${this.testBoardId}`, 'DELETE');
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        if (this.testProjectId) {
            await this.makeRequest(`/api/projects/${this.testProjectId}`, 'DELETE');
        }
        
        this.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    generateReport() {
        const report = {
            summary: {
                total: this.results.total,
                passed: this.results.passed,
                failed: this.results.failed,
                successRate: this.results.total > 0 ? ((this.results.passed / this.results.total) * 100).toFixed(2) : 0
            },
            errors: this.results.errors,
            warnings: this.results.warnings,
            recommendations: []
        };

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if (this.results.errors.length > 0) {
            report.recommendations.push('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ API');
        }
        
        if (this.results.warnings.length > 0) {
            report.recommendations.push('–û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
        }
        
        if (report.summary.successRate < 90) {
            report.recommendations.push('–£–ª—É—á—à–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API (—É—Å–ø–µ—à–Ω–æ—Å—Ç—å < 90%)');
        }

        return report;
    }

    async run() {
        this.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        try {
            await this.testAuthentication();
            await this.testProjectsAPI();
            await this.testBoardsAPI();
            await this.testTasksAPI();
            await this.testErrorHandling();
            
            await this.cleanup();
            
            const report = this.generateReport();
            
            this.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
            this.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${report.summary.total}`);
            this.log(`–ü—Ä–æ—à–ª–æ: ${report.summary.passed}`);
            this.log(`–ù–µ –ø—Ä–æ—à–ª–æ: ${report.summary.failed}`);
            this.log(`–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${report.summary.successRate}%`);
            
            if (report.errors.length > 0) {
                this.log('\n‚ùå –ù–ê–ô–î–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:');
                report.errors.forEach((error, index) => {
                    this.log(`${index + 1}. ${error}`);
                });
            }
            
            if (report.warnings.length > 0) {
                this.log('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
                report.warnings.forEach((warning, index) => {
                    this.log(`${index + 1}. ${warning}`);
                });
            }
            
            if (report.recommendations.length > 0) {
                this.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
                report.recommendations.forEach((rec, index) => {
                    this.log(`${index + 1}. ${rec}`);
                });
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
            const reportPath = path.join(__dirname, 'test-report.json');
            fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
            this.log(`\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);
            
            return report;
            
        } catch (error) {
            this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
            throw error;
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const detector = new ComprehensiveErrorDetector();
    detector.run()
        .then((report) => {
            if (report.summary.failed > 0) {
                process.exit(1);
            }
        })
        .catch((error) => {
            console.error('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:', error);
            process.exit(1);
        });
}

module.exports = ComprehensiveErrorDetector;