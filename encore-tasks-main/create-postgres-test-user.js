const bcrypt = require('bcryptjs');
const { Pool } = require('pg');
const { v4: uuidv4 } = require('uuid');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –∏–∑ .env.local
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
});

async function createTestUser() {
  const client = await pool.connect();
  
  try {
    console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersResult = await client.query('SELECT id, email, name, role FROM users');
    console.log('üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ PostgreSQL:', usersResult.rows.length);
    console.log('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    usersResult.rows.forEach(user => {
      console.log(`  - ${user.email} (${user.role})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserResult = await client.query('SELECT * FROM users WHERE email = $1', ['test@example.com']);
    
    if (testUserResult.rows.length > 0) {
      const testUser = testUserResult.rows[0];
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', testUser.email);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ö–µ—à –ø–∞—Ä–æ–ª—è:', testUser.password_hash.substring(0, 20) + '...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å
      const isValidHash = testUser.password_hash.startsWith('$2a$') || testUser.password_hash.startsWith('$2b$');
      if (!isValidHash) {
        console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω! –û–±–Ω–æ–≤–ª—è—é...');
        const hashedPassword = await bcrypt.hash('testpassword123', 12);
        await client.query('UPDATE users SET password_hash = $1 WHERE email = $2', [hashedPassword, 'test@example.com']);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω!');
      } else {
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è
      console.log('üîç –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è:', testUser.approval_status);
      if (testUser.approval_status !== 'approved') {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω! –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...');
        await client.query('UPDATE users SET approval_status = $1 WHERE email = $2', ['approved', 'test@example.com']);
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } else {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω');
      }
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é...');
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hashedPassword = await bcrypt.hash('testpassword123', 12);
      const userId = uuidv4();
      const now = new Date().toISOString();
      
      await client.query(`
        INSERT INTO users (id, email, name, password_hash, role, approval_status, created_at, updated_at)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      `, [
        userId,
        'test@example.com',
        'Test User',
        hashedPassword,
        'user',
        true, // approved
        now,
        now
      ]);
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìß Email: test@example.com');
      console.log('üîë –ü–∞—Ä–æ–ª—å: testpassword123');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    client.release();
    await pool.end();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.');
  }
}

createTestUser();