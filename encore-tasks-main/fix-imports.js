const fs = require('fs');
const path = require('path');

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const filesToFix = [
  'src/app/api/projects/route.ts',
  'src/app/api/auth/logout/route.ts',
  'src/app/api/columns/[id]/route.ts',
  'src/app/api/users/route.ts',
  'src/app/api/boards/[id]/route.ts',
  'src/app/api/projects/[id]/route.ts',
  'src/lib/auth.ts',
  'src/app/api/auth/me/route.ts',
  'src/app/api/tasks/[id]/route.ts',
  'src/app/api/tasks/route.ts',
  'src/app/api/users/[id]/route.ts',
  'src/app/api/boards/route.ts'
];

function fixImports() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ database adapter...');
  
  filesToFix.forEach(filePath => {
    const fullPath = path.join(__dirname, filePath);
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      return;
    }
    
    try {
      let content = fs.readFileSync(fullPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
      if (content.includes('dbAdapter as databaseAdapter')) {
        console.log(`üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${filePath}`);
        
        // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
        if (filePath.includes('src/lib/auth.ts')) {
          // –î–ª—è auth.ts –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
          content = content.replace(
            "import { dbAdapter as databaseAdapter } from './database-adapter';",
            "import { DatabaseAdapter } from './database-adapter';\n\nconst databaseAdapter = DatabaseAdapter.getInstance();"
          );
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
          content = content.replace(
            "import { dbAdapter as databaseAdapter } from '@/lib/database-adapter';",
            "import { DatabaseAdapter } from '@/lib/database-adapter';\n\nconst databaseAdapter = DatabaseAdapter.getInstance();"
          );
        }
        
        fs.writeFileSync(fullPath, content, 'utf8');
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      } else {
        console.log(`‚úÖ –£–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    }
  });
  
  console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

fixImports();