const puppeteer = require('puppeteer');

async function debugUIElements() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const authStatus = await page.evaluate(() => {
      // –ò—â–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const logoutButton = document.querySelector('button');
      const authElements = Array.from(document.querySelectorAll('*')).filter(el => 
        el.textContent && (
          el.textContent.includes('–í—ã–π—Ç–∏') ||
          el.textContent.includes('Logout') ||
          el.textContent.includes('Profile') ||
          el.textContent.includes('–ü—Ä–æ—Ñ–∏–ª—å')
        )
      );
      
      return {
        hasLogoutButton: !!logoutButton,
        authElementsCount: authElements.length,
        authElementsText: authElements.map(el => el.textContent.trim())
      };
    });
    
    console.log('üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authStatus);
    
    // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
    if (authStatus.authElementsCount === 0) {
      console.log('üîë –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
      
      // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
      const loginButton = await page.evaluateHandle(() => {
        const buttons = Array.from(document.querySelectorAll('button, a'));
        return buttons.find(btn => 
          btn.textContent.includes('–í–æ–π—Ç–∏') || 
          btn.textContent.includes('Login') ||
          btn.textContent.includes('Sign in')
        );
      });
      
      if (loginButton && loginButton.asElement()) {
        await loginButton.asElement().click();
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
        await page.type('input[type="email"], input[name="email"]', 'test@example.com');
        await page.type('input[type="password"], input[name="password"]', 'password123');
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        const submitButton = await page.evaluateHandle(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          return buttons.find(btn => 
            btn.textContent.includes('–í–æ–π—Ç–∏') || 
            btn.textContent.includes('Login') ||
            btn.textContent.includes('Sign in') ||
            btn.type === 'submit'
          );
        });
        
        if (submitButton && submitButton.asElement()) {
          await submitButton.asElement().click();
          await new Promise(resolve => setTimeout(resolve, 3000));
        }
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
    const pageElements = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const links = Array.from(document.querySelectorAll('a'));
      const inputs = Array.from(document.querySelectorAll('input'));
      const forms = Array.from(document.querySelectorAll('form'));
      
      return {
        buttons: buttons.map(btn => ({
          text: btn.textContent.trim(),
          id: btn.id,
          className: btn.className,
          type: btn.type,
          dataTestId: btn.getAttribute('data-testid')
        })),
        links: links.map(link => ({
          text: link.textContent.trim(),
          href: link.href,
          id: link.id,
          className: link.className
        })),
        inputs: inputs.map(input => ({
          type: input.type,
          name: input.name,
          placeholder: input.placeholder,
          id: input.id
        })),
        forms: forms.length,
        pageTitle: document.title,
        url: window.location.href
      };
    });
    
    console.log('üìä –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã:');
    console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', pageElements.pageTitle);
    console.log('URL:', pageElements.url);
    console.log('\nüîò –ö–Ω–æ–ø–∫–∏:');
    pageElements.buttons.forEach((btn, i) => {
      console.log(`  ${i + 1}. "${btn.text}" (id: ${btn.id}, class: ${btn.className}, type: ${btn.type}, testId: ${btn.dataTestId})`);
    });
    
    console.log('\nüîó –°—Å—ã–ª–∫–∏:');
    pageElements.links.forEach((link, i) => {
      console.log(`  ${i + 1}. "${link.text}" (href: ${link.href}, id: ${link.id})`);
    });
    
    console.log('\nüìù –ü–æ–ª—è –≤–≤–æ–¥–∞:');
    pageElements.inputs.forEach((input, i) => {
      console.log(`  ${i + 1}. ${input.type} (name: ${input.name}, placeholder: ${input.placeholder})`);
    });
    
    console.log(`\nüìã –§–æ—Ä–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageElements.forms}`);
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    console.log('\nüîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏...');
    const projectElements = await page.evaluate(() => {
      const allElements = Array.from(document.querySelectorAll('*'));
      const projectRelated = allElements.filter(el => {
        const text = el.textContent.toLowerCase();
        return text.includes('–ø—Ä–æ–µ–∫—Ç') || 
               text.includes('project') || 
               text.includes('—Å–æ–∑–¥–∞—Ç—å') ||
               text.includes('create') ||
               text.includes('–Ω–æ–≤—ã–π') ||
               text.includes('new') ||
               text.includes('+');
      });
      
      return projectRelated.map(el => ({
        tagName: el.tagName,
        text: el.textContent.trim().substring(0, 100),
        id: el.id,
        className: el.className,
        dataTestId: el.getAttribute('data-testid')
      }));
    });
    
    console.log('üìÅ –≠–ª–µ–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏:');
    projectElements.forEach((el, i) => {
      console.log(`  ${i + 1}. ${el.tagName}: "${el.text}" (id: ${el.id}, class: ${el.className}, testId: ${el.dataTestId})`);
    });
    
    // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏:', error.message);
  } finally {
    await browser.close();
    console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }
}

debugUIElements().catch(console.error);