const { Pool } = require('pg');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'encore_password_2024',
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

async function fixBoardsSchema() {
  const client = await pool.connect();
  
  try {
    console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã boards...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    const checkColumns = await client.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'boards' AND table_schema = 'public'
    `);
    
    const existingColumns = checkColumns.rows.map(row => row.column_name);
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:', existingColumns);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    const columnsToAdd = [
      { name: 'visibility', sql: 'ALTER TABLE boards ADD COLUMN IF NOT EXISTS visibility VARCHAR(20) DEFAULT \'private\';' },
      { name: 'color', sql: 'ALTER TABLE boards ADD COLUMN IF NOT EXISTS color VARCHAR(7) DEFAULT \'#3B82F6\';' },
      { name: 'settings', sql: 'ALTER TABLE boards ADD COLUMN IF NOT EXISTS settings JSONB DEFAULT \'{}\';' },
      { name: 'created_by', sql: 'ALTER TABLE boards ADD COLUMN IF NOT EXISTS created_by UUID;' }
    ];
    
    for (const column of columnsToAdd) {
      if (!existingColumns.includes(column.name)) {
        console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü ${column.name}...`);
        await client.query(column.sql);
        console.log(`‚úÖ –°—Ç–æ–ª–±–µ—Ü ${column.name} –¥–æ–±–∞–≤–ª–µ–Ω`);
      } else {
        console.log(`‚è≠Ô∏è –°—Ç–æ–ª–±–µ—Ü ${column.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    try {
      await client.query(`
        ALTER TABLE boards 
        ADD CONSTRAINT IF NOT EXISTS boards_visibility_check 
        CHECK (visibility IN ('private', 'public'))
      `);
      console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è visibility –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.log('‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è visibility —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è created_by
    try {
      await client.query(`
        ALTER TABLE boards 
        ADD CONSTRAINT IF NOT EXISTS fk_boards_created_by 
        FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL
      `);
      console.log('‚úÖ –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è created_by –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.log('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –∫–ª—é—á –¥–ª—è created_by —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    await client.query(`
      UPDATE boards 
      SET 
        visibility = COALESCE(visibility, 'private'),
        color = COALESCE(color, '#3B82F6'),
        settings = COALESCE(settings, '{}'::jsonb)
      WHERE visibility IS NULL OR color IS NULL OR settings IS NULL
    `);
    
    console.log('üéâ –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã boards —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error.message);
    throw error;
  } finally {
    client.release();
  }
}

async function main() {
  try {
    await fixBoardsSchema();
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

if (require.main === module) {
  main();
}

module.exports = { fixBoardsSchema };