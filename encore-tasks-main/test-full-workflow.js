const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testFullWorkflow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
  
  const timestamp = Date.now();
  const testEmail = `test-workflow-${timestamp}@example.com`;
  const testPassword = 'testpassword123';
  
  try {
    // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìù 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/register',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      name: 'Test Workflow User',
      email: testEmail,
      password: testPassword
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.status);
    if (registerResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResponse.data);
      return;
    }
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    
    // 2. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('\nüîê 2. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const loginResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    }, {
      email: testEmail,
      password: testPassword
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç –≤—Ö–æ–¥–∞:', loginResponse.status);
    if (loginResponse.status !== 200) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginResponse.data);
      return;
    }
    
    const authToken = loginResponse.data.token;
    const userId = loginResponse.data.user.id;
    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! Token –ø–æ–ª—É—á–µ–Ω.');
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüìÅ 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/projects',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      }
    }, {
      name: 'Test Project',
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectResponse.status);
    if (projectResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', projectResponse.data);
      return;
    }
    
    const projectId = projectResponse.data.data.id;
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω! ID:', projectId);
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
    console.log('\nüìã 4. –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏...');
    const boardResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/boards',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      }
    }, {
      name: 'Test Board',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞',
      project_id: projectId
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', boardResponse.status);
    if (boardResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', boardResponse.data);
      return;
    }
    
    const boardId = boardResponse.data.data.id;
    console.log('‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID:', boardId);
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    console.log('\nüìä 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏...');
    const columnResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/columns',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      }
    }, {
      title: '–í —Ä–∞–±–æ—Ç–µ',
      board_id: boardId,
      position: 1
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', columnResponse.status);
    if (columnResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏:', columnResponse.data);
      return;
    }
    
    const columnId = columnResponse.data.data.id;
    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! ID:', columnId);
    
    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('\n‚úÖ 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    const taskResponse = await makeRequest({
      hostname: 'localhost',
      port: 3000,
      path: '/api/tasks',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      }
    }, {
      title: 'Test Task',
      description: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
      column_id: columnId,
      priority: 'medium',
      assignees: [userId]
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskResponse.status);
    if (taskResponse.status !== 201) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskResponse.data);
      return;
    }
    
    const taskId = taskResponse.data.data.id;
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID:', taskId);
    
    console.log('\nüéâ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
    console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`);
    console.log(`   üìÅ –ü—Ä–æ–µ–∫—Ç: ${projectId}`);
    console.log(`   üìã –î–æ—Å–∫–∞: ${boardId}`);
    console.log(`   üìä –ö–æ–ª–æ–Ω–∫–∞: ${columnId}`);
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞: ${taskId}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

testFullWorkflow();