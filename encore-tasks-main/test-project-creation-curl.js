const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testProjectCreationWithCurl() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ curl...');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    const serverCheck = await execAsync('curl -s -o /dev/null -w "%{http_code}" http://localhost:3001/');
    console.log(`–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverCheck.stdout}`);
    
    if (serverCheck.stdout !== '200') {
      throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    }
    
    // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerData = {
      email: 'test@example.com',
      password: 'password123',
      name: 'Test User'
    };
    
    const registerCmd = `curl -s -X POST http://localhost:3001/api/auth/register -H "Content-Type: application/json" -d '${JSON.stringify(registerData)}'`;
    const registerResult = await execAsync(registerCmd);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResult.stdout);
    
    // 3. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    console.log('\n3Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const loginData = {
      email: 'test@example.com',
      password: 'password123'
    };
    
    const loginCmd = `curl -s -X POST http://localhost:3001/api/auth/login -H "Content-Type: application/json" -d '${JSON.stringify(loginData)}' -c cookies.txt`;
    const loginResult = await execAsync(loginCmd);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResult.stdout);
    
    let authToken = null;
    try {
      const loginResponse = JSON.parse(loginResult.stdout);
      authToken = loginResponse.token;
      console.log('–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', authToken ? '–î–∞' : '–ù–µ—Ç');
    } catch (e) {
      console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', e.message);
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    const projectData = {
      name: 'Test Project ' + Date.now(),
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
    };
    
    let createProjectCmd;
    if (authToken) {
      createProjectCmd = `curl -s -X POST http://localhost:3001/api/projects -H "Content-Type: application/json" -H "Authorization: Bearer ${authToken}" -d '${JSON.stringify(projectData)}'`;
    } else {
      createProjectCmd = `curl -s -X POST http://localhost:3001/api/projects -H "Content-Type: application/json" -b cookies.txt -d '${JSON.stringify(projectData)}'`;
    }
    
    const createResult = await execAsync(createProjectCmd);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createResult.stdout);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    let getProjectsCmd;
    if (authToken) {
      getProjectsCmd = `curl -s http://localhost:3001/api/projects -H "Authorization: Bearer ${authToken}"`;
    } else {
      getProjectsCmd = `curl -s http://localhost:3001/api/projects -b cookies.txt`;
    }
    
    const projectsResult = await execAsync(getProjectsCmd);
    console.log('–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResult.stdout);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try {
      const projects = JSON.parse(projectsResult.stdout);
      if (Array.isArray(projects) && projects.length > 0) {
        console.log('\n‚úÖ –£–°–ü–ï–•! –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ');
        console.log(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        projects.forEach((project, index) => {
          console.log(`  ${index + 1}. ${project.name} (ID: ${project.id})`);
        });
      } else {
        console.log('\n‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
      }
    } catch (e) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', e.message);
      console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', projectsResult.stdout);
    }
    
  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.stderr) {
      console.error('Stderr:', error.stderr);
    }
  } finally {
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª cookies
    try {
      await execAsync('del cookies.txt 2>nul || rm -f cookies.txt 2>/dev/null || true');
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    }
  }
}

testProjectCreationWithCurl();