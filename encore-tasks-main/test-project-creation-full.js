const axios = require('axios');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const DB_CONFIG = {
  user: 'postgres',
  host: 'localhost',
  database: 'encore_tasks',
  password: 'postgres',
  port: 5432,
};

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: 'test@example.com',
  password: 'testpassword123',
  name: 'Test User'
};

const validProjectData = {
  name: '–¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç',
  description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'
};

const invalidProjectData = [
  { name: '', description: '–û–ø–∏—Å–∞–Ω–∏–µ' }, // –ø—É—Å—Ç–æ–µ –∏–º—è
  { name: 'a'.repeat(101), description: '–û–ø–∏—Å–∞–Ω–∏–µ' }, // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
  { description: '–û–ø–∏—Å–∞–Ω–∏–µ' }, // –±–µ–∑ name
  { name: '–¢–µ—Å—Ç', description: 'a'.repeat(501) }, // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  { name: '–¢–µ—Å—Ç', description: '–û–ø–∏—Å–∞–Ω–∏–µ', color: 'invalid-color' } // –Ω–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let authToken = null;
let authCookies = null;
let pool = null;

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
const testResults = {
  auth: false,
  validationCorrect: false,
  validationIncorrect: false,
  apiEndpoint: false,
  databaseSave: false,
  errorHandling: false,
  integration: false
};

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function authenticate() {
  try {
    console.log('üîë –í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    const response = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: testUser.email,
      password: testUser.password
    });

    if (response.data.token) {
      authToken = response.data.token;
      authCookies = response.headers['set-cookie'];
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      testResults.auth = true;
      return true;
    }
    return false;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function connectToDatabase() {
  try {
    pool = new Pool(DB_CONFIG);
    await pool.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function testValidProjectCreation() {
  try {
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
    console.log('üîç –¢–æ–∫–µ–Ω:', authToken ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    console.log('üîç Cookies:', authCookies ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    
    const headers = {};
    if (authToken) headers.Authorization = `Bearer ${authToken}`;
    if (authCookies) headers.Cookie = authCookies.join('; ');

    console.log('üîç Headers:', headers);
    const config = { headers };
    
    const response = await axios.post(`${BASE_URL}/api/projects`, validProjectData, config);
    
    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(response.data, null, 2));
    
    if (response.status === 201 && response.data && response.data.success) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID:', response.data.data.id);
      testResults.validationCorrect = true;
      testResults.apiEndpoint = true;
      return response.data.data.id;
    }
    return null;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', error.response?.data || error.message);
    return null;
  }
}

// –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function testInvalidProjectCreation() {
  console.log('\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  let validationPassed = true;
  
  for (let i = 0; i < invalidProjectData.length; i++) {
    try {
      const headers = {};
      if (authToken) headers.Authorization = `Bearer ${authToken}`;
      if (authCookies) headers.Cookie = authCookies.join('; ');

      const config = { headers };
      
      const response = await axios.post(`${BASE_URL}/api/projects`, invalidProjectData[i], config);
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      if (response.status === 201) {
        console.log(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ${i + 1}:`, invalidProjectData[i]);
        validationPassed = false;
      }
    } catch (error) {
      // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (400)
      if (error.response?.status === 400) {
        console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ${i + 1}:`, error.response.data.error || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
      } else {
        console.log(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö ${i + 1}:`, error.response?.status, error.response?.data);
        validationPassed = false;
      }
    }
  }
  
  testResults.validationIncorrect = validationPassed;
  if (validationPassed) {
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã');
  }
}

// –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function testDatabaseSave(projectId) {
  if (!pool || !projectId) {
    console.log('‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–ª–∏ ID –ø—Ä–æ–µ–∫—Ç–∞');
    return;
  }
  
  try {
    console.log('\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const result = await pool.query('SELECT * FROM projects WHERE id = $1', [projectId]);
    
    if (result.rows.length > 0) {
      const project = result.rows[0];
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', {
        id: project.id,
        name: project.name,
        description: project.description,
        status: project.status
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
      if (project.name === validProjectData.name && 
          project.description === validProjectData.description &&
          project.status === validProjectData.status) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º');
        testResults.databaseSave = true;
      } else {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –≤ –ë–î –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º');
      }
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
  }
}

// –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testAuthErrorHandling() {
  try {
    console.log('\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    const response = await axios.post(`${BASE_URL}/api/projects`, validProjectData);
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —ç—Ç–æ –æ—à–∏–±–∫–∞
    console.log('‚ùå API –ø–æ–∑–≤–æ–ª–∏–ª —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response.data.error || 'Unauthorized');
      testResults.errorHandling = true;
    } else {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.status, error.response?.data);
    }
  }
}

// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function testComponentIntegration(projectId) {
  if (!projectId) {
    console.log('‚ùå –ù–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    return;
  }
  
  try {
    console.log('\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const headers = {};
    if (authToken) headers.Authorization = `Bearer ${authToken}`;
    if (authCookies) headers.Cookie = authCookies.join('; ');

    const config = { headers };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const response = await axios.get(`${BASE_URL}/api/projects`, config);
    
    console.log('üìã –û—Ç–≤–µ—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', JSON.stringify(response.data, null, 2));
    
    if (response.status === 200 && response.data.success && response.data.data && response.data.data.projects) {
      const projects = response.data.data.projects;
      const createdProject = projects.find(p => p.id == projectId);
      if (createdProject) {
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤');
        testResults.integration = true;
      } else {
        console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤');
      }
    } else {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.response?.data || error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanup(projectId) {
  if (pool && projectId) {
    try {
      await pool.query('DELETE FROM projects WHERE id = $1', [projectId]);
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
    }
  }
  
  if (pool) {
    await pool.end();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFullProjectCreationTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–û–í');
  console.log('=' .repeat(60));
  
  let projectId = null;
  
  try {
    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const dbConnected = await connectToDatabase();
    if (!dbConnected) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.');
      return;
    }
    
    // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const authSuccess = await authenticate();
    if (!authSuccess) {
      console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.');
      return;
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    projectId = await testValidProjectCreation();
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await testInvalidProjectCreation();
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    await testDatabaseSave(projectId);
    
    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await testAuthErrorHandling();
    
    // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    await testComponentIntegration(projectId);
    
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    await cleanup(projectId);
  }
  
  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  console.log('\n' + '=' .repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('=' .repeat(60));
  
  const tests = [
    { name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', result: testResults.auth },
    { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', result: testResults.validationCorrect },
    { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', result: testResults.validationIncorrect },
    { name: 'API —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/projects (POST)', result: testResults.apiEndpoint },
    { name: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', result: testResults.databaseSave },
    { name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', result: testResults.errorHandling },
    { name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', result: testResults.integration }
  ];
  
  let passedTests = 0;
  tests.forEach((test, index) => {
    const status = test.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`${index + 1}. ${status} - ${test.name}`);
    if (test.result) passedTests++;
  });
  
  console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passedTests}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${tests.length - passedTests}`);
  console.log(`   üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${tests.length}`);
  console.log(`   üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passedTests / tests.length) * 100)}%`);
  
  if (passedTests === tests.length) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
    tests.forEach(test => {
      if (!test.result) {
        console.log(`   ‚Ä¢ ${test.name}`);
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  runFullProjectCreationTests().catch(console.error);
}

module.exports = {
  runFullProjectCreationTests,
  testResults
};