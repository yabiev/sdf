const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return {};
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
      }
    }
  });
  
  return env;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestData() {
  const timestamp = Date.now();
  return {
    user: {
      email: `test_user_${timestamp}@example.com`,
      name: 'Test User',
      password_hash: crypto.createHash('sha256').update('test_password_123').digest('hex')
    },
    project: {
      name: `Test Project ${timestamp}`,
      description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL'
    },
    boards: [
      {
        name: 'To Do',
        description: '–ó–∞–¥–∞—á–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
        position: 0
      },
      {
        name: 'In Progress',
        description: '–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
        position: 1
      },
      {
        name: 'Done',
        description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
        position: 2
      }
    ],
    tasks: [
      {
        title: '–ü–µ—Ä–≤–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏',
        status: 'todo',
        priority: 'medium',
        position: 0
      },
      {
        title: '–í—Ç–æ—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∑–∞–¥–∞—á–∏',
        status: 'in_progress',
        priority: 'high',
        position: 1
      },
      {
        title: '–¢—Ä–µ—Ç—å—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–¥–∞—á–∏',
        status: 'done',
        priority: 'low',
        position: 2
      }
    ]
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testProjectsBoardsTasks() {
  console.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –¥–æ—Å–æ–∫ –∏ –∑–∞–¥–∞—á...');
  console.log('=' .repeat(60));

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const env = loadEnvFile();
  
  const config = {
    host: env.POSTGRES_HOST || 'localhost',
    port: parseInt(env.POSTGRES_PORT) || 5432,
    database: env.POSTGRES_DB || 'encore_tasks',
    user: env.POSTGRES_USER || 'postgres',
    password: env.POSTGRES_PASSWORD || ''
  };

  const pool = new Pool(config);
  let testUserId = null;
  let testProjectId = null;
  let testBoardIds = [];
  let testTaskIds = [];

  try {
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const testData = generateTestData();
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:');
    console.log(`   –ü—Ä–æ–µ–∫—Ç: ${testData.project.name}`);
    console.log(`   –î–æ—Å–æ–∫: ${testData.boards.length}`);
    console.log(`   –ó–∞–¥–∞—á: ${testData.tasks.length}`);
    console.log('');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const createUserResult = await client.query(`
        INSERT INTO users (email, name, password_hash, created_at, updated_at)
        VALUES ($1, $2, $3, NOW(), NOW())
        RETURNING id, email, name, created_at
      `, [
        testData.user.email,
        testData.user.name,
        testData.user.password_hash
      ]);
      
      testUserId = createUserResult.rows[0].id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testUserId}`);
      console.log(`   Email: ${createUserResult.rows[0].email}`);
      console.log(`   Name: ${createUserResult.rows[0].name}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüìÅ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const createProjectResult = await client.query(`
        INSERT INTO projects (name, description, owner_id)
        VALUES ($1, $2, $3)
        RETURNING id, name, description, owner_id, created_at
      `, [
        testData.project.name,
        testData.project.description,
        testUserId
      ]);
      
      testProjectId = createProjectResult.rows[0].id;
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testProjectId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createProjectResult.rows[0].name}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${createProjectResult.rows[0].description}`);
      console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü ID: ${createProjectResult.rows[0].owner_id}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫
    console.log('\nüìä –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫...');
    for (let i = 0; i < testData.boards.length; i++) {
      const board = testData.boards[i];
      try {
        const createBoardResult = await client.query(`
          INSERT INTO boards (name, description, project_id, position, created_at, updated_at)
          VALUES ($1, $2, $3, $4, NOW(), NOW())
          RETURNING id, name, description, project_id, position, created_at
        `, [
          board.name,
          board.description,
          testProjectId,
          board.position
        ]);
        
        const boardId = createBoardResult.rows[0].id;
        testBoardIds.push(boardId);
        console.log(`‚úÖ –î–æ—Å–∫–∞ ${i + 1} —Å–æ–∑–¥–∞–Ω–∞:`);
        console.log(`   ID: ${boardId}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createBoardResult.rows[0].name}`);
        console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${createBoardResult.rows[0].position}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ ${board.name}: ${error.message}`);
        throw error;
      }
    }

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    console.log('\n‚úÖ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
    for (let i = 0; i < testData.tasks.length; i++) {
      const task = testData.tasks[i];
      const boardId = testBoardIds[i % testBoardIds.length]; // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–æ—Å–∫–∞–º
      
      try {
        const createTaskResult = await client.query(`
          INSERT INTO tasks (title, description, status, priority, project_id, board_id, position, created_at, updated_at)
          VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())
          RETURNING id, title, description, status, priority, project_id, board_id, position, created_at
        `, [
          task.title,
          task.description,
          task.status,
          task.priority,
          testProjectId,
          boardId,
          task.position
        ]);
        
        const taskId = createTaskResult.rows[0].id;
        testTaskIds.push(taskId);
        console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${i + 1} —Å–æ–∑–¥–∞–Ω–∞:`);
        console.log(`   ID: ${taskId}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createTaskResult.rows[0].title}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${createTaskResult.rows[0].status}`);
        console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${createTaskResult.rows[0].priority}`);
        console.log(`   –î–æ—Å–∫–∞ ID: ${createTaskResult.rows[0].board_id}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${task.title}: ${error.message}`);
        throw error;
      }
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–æ—Å–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
    console.log('\nüîç –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const projectStructureResult = await client.query(`
        SELECT 
          p.id as project_id, p.name as project_name, p.description as project_description,
          b.id as board_id, b.name as board_name, b.position as board_position,
          t.id as task_id, t.title as task_title, t.status as task_status, t.priority as task_priority
        FROM projects p
        LEFT JOIN boards b ON p.id = b.project_id
        LEFT JOIN tasks t ON b.id = t.board_id
        WHERE p.id = $1
        ORDER BY b.position, t.position
      `, [testProjectId]);
      
      console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:`);
      console.log(`   –ü—Ä–æ–µ–∫—Ç: ${projectStructureResult.rows[0]?.project_name}`);
      
      const boardsMap = new Map();
      projectStructureResult.rows.forEach(row => {
        if (row.board_id && !boardsMap.has(row.board_id)) {
          boardsMap.set(row.board_id, {
            name: row.board_name,
            position: row.board_position,
            tasks: []
          });
        }
        if (row.task_id) {
          boardsMap.get(row.board_id).tasks.push({
            title: row.task_title,
            status: row.task_status,
            priority: row.task_priority
          });
        }
      });
      
      boardsMap.forEach((board, boardId) => {
        console.log(`   –î–æ—Å–∫–∞: ${board.name} (–ø–æ–∑–∏—Ü–∏—è: ${board.position})`);
        board.tasks.forEach(task => {
          console.log(`     - ${task.title} [${task.status}] (${task.priority})`);
        });
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    console.log('\nüîÑ –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏...');
    if (testTaskIds.length > 0) {
      try {
        const updateTaskResult = await client.query(`
          UPDATE tasks 
          SET status = $1, updated_at = NOW()
          WHERE id = $2
          RETURNING id, title, status, updated_at
        `, ['completed', testTaskIds[0]]);
        
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω:`);
        console.log(`   ID: ${updateTaskResult.rows[0].id}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${updateTaskResult.rows[0].title}`);
        console.log(`   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updateTaskResult.rows[0].status}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updateTaskResult.rows[0].updated_at}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${error.message}`);
      }
    }

    // –¢–µ—Å—Ç 7: –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const statsResult = await client.query(`
        SELECT 
          COUNT(DISTINCT b.id) as total_boards,
          COUNT(t.id) as total_tasks,
          COUNT(CASE WHEN t.status = 'todo' THEN 1 END) as todo_tasks,
          COUNT(CASE WHEN t.status = 'in_progress' THEN 1 END) as in_progress_tasks,
          COUNT(CASE WHEN t.status = 'done' OR t.status = 'completed' THEN 1 END) as completed_tasks
        FROM projects p
        LEFT JOIN boards b ON p.id = b.project_id
        LEFT JOIN tasks t ON b.id = t.board_id
        WHERE p.id = $1
      `, [testProjectId]);
      
      const stats = statsResult.rows[0];
      console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:`);
      console.log(`   –í—Å–µ–≥–æ –¥–æ—Å–æ–∫: ${stats.total_boards}`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total_tasks}`);
      console.log(`   –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ${stats.todo_tasks}`);
      console.log(`   –í —Ä–∞–±–æ—Ç–µ: ${stats.in_progress_tasks}`);
      console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed_tasks}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∑–∞–¥–∞—á–∏ -> –¥–æ—Å–∫–∏ -> –ø—Ä–æ–µ–∫—Ç—ã -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
      await client.query('DELETE FROM tasks WHERE board_id = ANY($1)', [testBoardIds]);
      await client.query('DELETE FROM boards WHERE project_id = $1', [testProjectId]);
      await client.query('DELETE FROM projects WHERE id = $1', [testProjectId]);
      await client.query('DELETE FROM users WHERE id = $1', [testUserId]);
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }

    client.release();
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.error('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ');
    console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
    console.error('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    console.error('   4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testProjectsBoardsTasks().catch(console.error);
}

module.exports = { testProjectsBoardsTasks };