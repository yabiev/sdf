// –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

async function testLoginAndCreateProject() {
  try {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞...');
    const csrfResponse = await fetch(`${BASE_URL}/api/auth/csrf`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const csrfData = await csrfResponse.json();
    console.log('üîë CSRF —Ç–æ–∫–µ–Ω:', csrfData.csrfToken);
    
    if (!csrfData.csrfToken) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω');
      return;
    }
    
    // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('üö™ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfData.csrfToken
      },
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'test123'
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginResponse.status);
    
    if (loginResponse.status === 200) {
      const loginData = await loginResponse.json();
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', loginData.user);
      
      // –ü–æ–ª—É—á–∞–µ–º cookies –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const cookies = loginResponse.headers.get('set-cookie');
      console.log('üç™ Cookies:', cookies);
      
      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      console.log('\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
      
      const projectData = {
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now(),
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞',
        color: '#3B82F6'
      };
      
      console.log('üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:', projectData);
      
      const createProjectResponse = await fetch(`${BASE_URL}/api/projects`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfData.csrfToken,
          'Cookie': cookies || ''
        },
        body: JSON.stringify(projectData)
      });
      
      console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createProjectResponse.status);
      
      if (createProjectResponse.status === 200 || createProjectResponse.status === 201) {
        const projectResult = await createProjectResponse.json();
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        console.log('üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:', projectResult);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
        const projectsResponse = await fetch(`${BASE_URL}/api/projects`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': cookies || ''
          }
        });
        
        if (projectsResponse.status === 200) {
          const projects = await projectsResponse.json();
          console.log('üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projects);
          console.log(`‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResponse.status);
        }
        
      } else {
        const errorText = await createProjectResponse.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', errorText);
      }
      
    } else {
      const errorText = await loginResponse.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', errorText);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

testLoginAndCreateProject();