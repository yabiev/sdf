const puppeteer = require('puppeteer');
const path = require('path');

async function testProjectCreation() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized', '--no-sandbox']
  });
  
  const page = await browser.newPage();
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ localhost:3001...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ò—â–µ–º –ø–æ–ª–µ email –∏ –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    const emailSelector = 'input[type="email"], input[name="email"], input[placeholder*="email" i], input[placeholder*="–ø–æ—á—Ç–∞" i]';
    await page.waitForSelector(emailSelector, { timeout: 10000 });
    await page.type(emailSelector, 'test@example.com');
    console.log('‚úÖ Email –≤–≤–µ–¥–µ–Ω');
    
    // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏ –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    const passwordSelector = 'input[type="password"], input[name="password"], input[placeholder*="password" i], input[placeholder*="–ø–∞—Ä–æ–ª—å" i]';
    await page.waitForSelector(passwordSelector, { timeout: 5000 });
    await page.type(passwordSelector, 'password123');
    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –∏ –Ω–∞–∂–∏–º–∞–µ–º
    const loginButtonSelector = 'button[type="submit"], button:has-text("–í–æ–π—Ç–∏"), button:has-text("Login"), input[type="submit"]';
    await page.click(loginButtonSelector);
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const currentUrl = page.url();
    console.log('üìç –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', currentUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã (–∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤)
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const createProjectSelectors = [
      'button:has-text("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")',
      'button:has-text("Create Project")',
      'button:has-text("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")',
      'button:has-text("+")',
      'a[href*="create"]',
      'button[data-testid="create-project"]',
      '.create-project-btn',
      '[data-cy="create-project"]'
    ];
    
    let createButton = null;
    for (const selector of createProjectSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 2000 });
        createButton = await page.$(selector);
        if (createButton) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', selector);
          break;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (!createButton) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
      const allButtons = await page.$$('button');
      
      for (let i = 0; i < allButtons.length; i++) {
        const buttonText = await page.evaluate(el => el.textContent?.trim(), allButtons[i]);
        console.log(`–ö–Ω–æ–ø–∫–∞ ${i + 1}: "${buttonText}"`);
        
        if (buttonText && (buttonText.includes('–°–æ–∑–¥–∞—Ç—å') || buttonText.includes('Create') || buttonText.includes('–ù–æ–≤—ã–π') || buttonText.includes('+'))) {
          createButton = allButtons[i];
          console.log('‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', buttonText);
          break;
        }
      }
    }
    
    if (!createButton) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      await page.screenshot({ path: 'debug-no-create-button.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-no-create-button.png');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageContent = await page.content();
      console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', await page.title());
      
      // –ò—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–µ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      const links = await page.$$eval('a', links => 
        links.map(link => ({ href: link.href, text: link.textContent?.trim() }))
          .filter(link => link.text && link.text.length > 0)
      );
      
      console.log('üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
      links.forEach((link, i) => {
        if (i < 10) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
          console.log(`  ${link.text} -> ${link.href}`);
        }
      });
      
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (60 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 60000));
      return;
    }
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    await createButton.click();
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üìù –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    // –ò—â–µ–º –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    const nameFieldSelectors = [
      'input[name="name"]',
      'input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ" i]',
      'input[placeholder*="name" i]',
      'input[type="text"]:first-of-type',
      '#project-name',
      '.project-name-input'
    ];
    
    let nameField = null;
    for (const selector of nameFieldSelectors) {
      try {
        await page.waitForSelector(selector, { timeout: 2000 });
        nameField = await page.$(selector);
        if (nameField) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', selector);
          break;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (!nameField) {
      console.log('‚ùå –ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ input –ø–æ–ª—è
      const allInputs = await page.$$('input');
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${allInputs.length} –ø–æ–ª–µ–π –≤–≤–æ–¥–∞:`);
      
      for (let i = 0; i < allInputs.length; i++) {
        const inputInfo = await page.evaluate(el => ({
          type: el.type,
          name: el.name,
          placeholder: el.placeholder,
          id: el.id,
          className: el.className
        }), allInputs[i]);
        console.log(`  –ü–æ–ª–µ ${i + 1}:`, inputInfo);
      }
      
      await page.screenshot({ path: 'debug-no-name-field.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-no-name-field.png');
      
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (60 —Å–µ–∫—É–Ω–¥)...');
      await page.waitForTimeout(60000);
      return;
    }
    
    // –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    const projectName = '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now();
    await nameField.click();
    await nameField.clear();
    await nameField.type(projectName);
    console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ:', projectName);
    
    // –ò—â–µ–º –ø–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const descriptionSelectors = [
      'textarea[name="description"]',
      'textarea[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ" i]',
      'textarea[placeholder*="description" i]',
      'textarea:first-of-type',
      '#project-description'
    ];
    
    for (const selector of descriptionSelectors) {
      try {
        const descField = await page.$(selector);
        if (descField) {
          await descField.type('–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
          console.log('‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤–≤–µ–¥–µ–Ω–æ');
          break;
        }
      } catch (e) {
        // –ü–æ–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      }
    }
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è
    const saveButtonSelectors = [
      'button[type="submit"]',
      'button:has-text("–°–æ–∑–¥–∞—Ç—å")',
      'button:has-text("Create")',
      'button:has-text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")',
      'button:has-text("Save")',
      '.submit-btn',
      '.create-btn'
    ];
    
    let saveButton = null;
    for (const selector of saveButtonSelectors) {
      try {
        saveButton = await page.$(selector);
        if (saveButton) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', selector);
          break;
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (!saveButton) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–µ
      const formButtons = await page.$$('form button, .modal button, .dialog button');
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${formButtons.length} –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–µ:`);
      
      for (let i = 0; i < formButtons.length; i++) {
        const buttonText = await page.evaluate(el => el.textContent?.trim(), formButtons[i]);
        console.log(`  –ö–Ω–æ–ø–∫–∞ ${i + 1}: "${buttonText}"`);
      }
      
      await page.screenshot({ path: 'debug-no-save-button.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-no-save-button.png');
      
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (60 —Å–µ–∫—É–Ω–¥)...');
      await page.waitForTimeout(60000);
      return;
    }
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('üñ±Ô∏è –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    await saveButton.click();
    
    // –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalUrl = page.url();
    console.log('üìç –§–∏–Ω–∞–ª—å–Ω—ã–π URL:', finalUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω (–∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    const pageText = await page.evaluate(() => document.body.textContent);
    
    if (pageText.includes(projectName) || finalUrl.includes('project')) {
      console.log('üéâ –£–°–ü–ï–•! –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–∫—Ä—ã—Ç!');
      console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ URL –∏–∑–º–µ–Ω–∏–ª—Å—è');
      
      await page.screenshot({ path: 'success-project-created.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—Ö–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: success-project-created.png');
      
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 —Å–µ–∫—É–Ω–¥)...');
      await page.waitForTimeout(30000);
      
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
      console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞');
      
      await page.screenshot({ path: 'debug-project-not-created.png', fullPage: true });
      console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-project-not-created.png');
      
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (60 —Å–µ–∫—É–Ω–¥)...');
      await page.waitForTimeout(60000);
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error.message);
    console.log('üìã –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    await page.screenshot({ path: 'debug-test-error.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-test-error.png');
    
    if (browser) {
      console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (60 —Å–µ–∫—É–Ω–¥)...');
      await new Promise(resolve => setTimeout(resolve, 60000));
    }
  } finally {
    console.log('üîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    if (browser) {
      await browser.close();
    }
  }
}

testProjectCreation().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});