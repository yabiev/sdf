// =====================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö MYSQL
// =====================================================

const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
const mysqlConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  port: parseInt(process.env.MYSQL_PORT) || 3306,
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || '',
  database: process.env.MYSQL_DATABASE || 'encore_tasks_db',
  charset: 'utf8mb4',
  timezone: '+00:00',
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  connectionLimit: parseInt(process.env.MYSQL_CONNECTION_LIMIT) || 10,
  acquireTimeout: parseInt(process.env.MYSQL_ACQUIRE_TIMEOUT) || 60000,
  timeout: parseInt(process.env.MYSQL_TIMEOUT) || 60000,
  reconnect: true,
  
  // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
  ssl: process.env.MYSQL_SSL === 'true' ? {
    rejectUnauthorized: process.env.MYSQL_SSL_REJECT_UNAUTHORIZED !== 'false'
  } : false,
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  multipleStatements: true,
  dateStrings: false,
  supportBigNumbers: true,
  bigNumberStrings: false,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
  jsonStrings: false,
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
  debug: process.env.NODE_ENV === 'development' && process.env.MYSQL_DEBUG === 'true'
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
let pool = null;
let isConnected = false;

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å MySQL
 * @returns {Promise<mysql.Pool>}
 */
async function createPool() {
  try {
    if (pool) {
      return pool;
    }
    
    pool = mysql.createPool(mysqlConfig);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const connection = await pool.getConnection();
    await connection.ping();
    connection.release();
    
    isConnected = true;
    console.log('‚úÖ MySQL: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—É–ª–∞
    pool.on('connection', (connection) => {
      console.log(`üîó MySQL: –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (ID: ${connection.threadId})`);
    });
    
    pool.on('error', (err) => {
      console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', err);
      isConnected = false;
      
      if (err.code === 'PROTOCOL_CONNECTION_LOST') {
        console.log('üîÑ MySQL: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        setTimeout(() => {
          createPool();
        }, 2000);
      }
    });
    
    return pool;
  } catch (error) {
    console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
    isConnected = false;
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MySQL
 * @returns {Promise<boolean>}
 */
async function isMySQLAvailable() {
  try {
    if (!pool) {
      await createPool();
    }
    
    const connection = await pool.getConnection();
    await connection.ping();
    connection.release();
    
    isConnected = true;
    return true;
  } catch (error) {
    console.error('‚ùå MySQL: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
    isConnected = false;
    return false;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
 * @param {string} query - SQL –∑–∞–ø—Ä–æ—Å
 * @param {Array} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
 * @returns {Promise<Array>}
 */
async function executeQuery(query, params = []) {
  try {
    if (!pool) {
      await createPool();
    }
    
    const [rows] = await pool.execute(query, params);
    return rows;
  } catch (error) {
    console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns {Promise<any>}
 */
async function executeTransaction(callback) {
  const connection = await pool.getConnection();
  
  try {
    await connection.beginTransaction();
    
    const result = await callback(connection);
    
    await connection.commit();
    return result;
  } catch (error) {
    await connection.rollback();
    throw error;
  } finally {
    connection.release();
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã)
 * @returns {Promise<void>}
 */
async function initializeDatabase() {
  try {
    console.log('üöÄ MySQL: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaPath = path.join(__dirname, 'mysql_schema.sql');
    const schema = fs.readFileSync(schemaPath, 'utf8');
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const queries = schema
      .split(';')
      .map(query => query.trim())
      .filter(query => query.length > 0 && !query.startsWith('--'));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    for (const query of queries) {
      if (query.trim()) {
        try {
          await executeQuery(query);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          if (!error.message.includes('already exists') && 
              !error.message.includes('Duplicate entry')) {
            console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', query.substring(0, 100) + '...');
            throw error;
          }
        }
      }
    }
    
    console.log('‚úÖ MySQL: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * @returns {Promise<void>}
 */
async function closePool() {
  try {
    if (pool) {
      await pool.end();
      pool = null;
      isConnected = false;
      console.log('‚úÖ MySQL: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
    }
  } catch (error) {
    console.error('‚ùå MySQL: –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * @returns {Object}
 */
function getConnectionInfo() {
  return {
    isConnected,
    config: {
      host: mysqlConfig.host,
      port: mysqlConfig.port,
      database: mysqlConfig.database,
      user: mysqlConfig.user
    },
    poolInfo: pool ? {
      totalConnections: pool._allConnections?.length || 0,
      freeConnections: pool._freeConnections?.length || 0,
      acquiringConnections: pool._acquiringConnections?.length || 0
    } : null
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID v4
 * @returns {string}
 */
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è MySQL
 * @param {Date} date
 * @returns {string}
 */
function formatDateForMySQL(date = new Date()) {
  return date.toISOString().slice(0, 19).replace('T', ' ');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('üîÑ MySQL: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  await closePool();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('üîÑ MySQL: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
  await closePool();
  process.exit(0);
});

module.exports = {
  mysqlConfig,
  createPool,
  isMySQLAvailable,
  executeQuery,
  executeTransaction,
  initializeDatabase,
  closePool,
  getConnectionInfo,
  generateUUID,
  formatDateForMySQL,
  get pool() { return pool; },
  get isConnected() { return isConnected; }
};