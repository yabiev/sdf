#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/backup.js [options]
 * 
 * –û–ø—Ü–∏–∏:
 *   --compress     –°–∂–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)
 *   --schema-only  –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—ã
 *   --data-only    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö
 *   --output DIR   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./backups)
 */

const { spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const { createWriteStream } = require('fs');
const { createGzip } = require('zlib');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'encore_tasks',
  username: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  backupPath: process.env.BACKUP_PATH || './backups',
  compress: process.env.BACKUP_COMPRESS !== 'false',
  retentionDays: parseInt(process.env.BACKUP_RETENTION_DAYS) || 30
};

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    compress: config.compress,
    schemaOnly: false,
    dataOnly: false,
    output: config.backupPath
  };
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--compress':
        options.compress = true;
        break;
      case '--no-compress':
        options.compress = false;
        break;
      case '--schema-only':
        options.schemaOnly = true;
        break;
      case '--data-only':
        options.dataOnly = true;
        break;
      case '--output':
        if (i + 1 < args.length) {
          options.output = args[++i];
        }
        break;
    }
  }
  
  return options;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
async function ensureBackupDirectory(backupPath) {
  try {
    await fs.access(backupPath);
  } catch (error) {
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${backupPath}`);
    await fs.mkdir(backupPath, { recursive: true });
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function generateBackupFilename(options) {
  const timestamp = new Date().toISOString()
    .replace(/[:.]/g, '-')
    .replace('T', '_')
    .slice(0, -5); // –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∏ Z
  
  let suffix = '';
  if (options.schemaOnly) suffix = '_schema';
  else if (options.dataOnly) suffix = '_data';
  
  const extension = options.compress ? '.sql.gz' : '.sql';
  
  return `${config.database}_${timestamp}${suffix}${extension}`;
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pg_dump
function createBackup(outputPath, options) {
  return new Promise((resolve, reject) => {
    const args = [
      '--host', config.host,
      '--port', config.port.toString(),
      '--username', config.username,
      '--dbname', config.database,
      '--verbose',
      '--no-password'
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if (options.schemaOnly) {
      args.push('--schema-only');
    } else if (options.dataOnly) {
      args.push('--data-only');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if (!options.schemaOnly && !options.dataOnly) {
      args.push('--create', '--clean', '--if-exists');
    }
    
    console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pg_dump...`);
    console.log(`   –ö–æ–º–∞–Ω–¥–∞: pg_dump ${args.join(' ')}`);
    
    const pgDump = spawn('pg_dump', args, {
      env: {
        ...process.env,
        PGPASSWORD: config.password
      }
    });
    
    let outputStream;
    
    if (options.compress) {
      const gzip = createGzip({ level: 9 });
      outputStream = createWriteStream(outputPath);
      pgDump.stdout.pipe(gzip).pipe(outputStream);
    } else {
      outputStream = createWriteStream(outputPath);
      pgDump.stdout.pipe(outputStream);
    }
    
    let errorOutput = '';
    
    pgDump.stderr.on('data', (data) => {
      const message = data.toString();
      if (message.includes('NOTICE') || message.includes('pg_dump:')) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return;
      }
      errorOutput += message;
    });
    
    pgDump.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`pg_dump –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}\n${errorOutput}`));
      }
    });
    
    pgDump.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pg_dump: ${error.message}`));
    });
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
async function getFileSize(filePath) {
  const stats = await fs.stat(filePath);
  const bytes = stats.size;
  
  if (bytes === 0) return '0 B';
  
  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
async function cleanupOldBackups(backupPath, retentionDays) {
  console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ ${retentionDays} –¥–Ω–µ–π...`);
  
  try {
    const files = await fs.readdir(backupPath);
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - retentionDays);
    
    let deletedCount = 0;
    
    for (const file of files) {
      if (!file.startsWith(config.database) || (!file.endsWith('.sql') && !file.endsWith('.sql.gz'))) {
        continue;
      }
      
      const filePath = path.join(backupPath, file);
      const stats = await fs.stat(filePath);
      
      if (stats.mtime < cutoffDate) {
        await fs.unlink(filePath);
        console.log(`  ‚úì –£–¥–∞–ª–µ–Ω: ${file}`);
        deletedCount++;
      }
    }
    
    if (deletedCount === 0) {
      console.log('  ‚úì –°—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`  ‚úì –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π`);
    }
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: ${error.message}`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ pg_dump
function checkPgDump() {
  return new Promise((resolve, reject) => {
    const pgDump = spawn('pg_dump', ['--version']);
    
    pgDump.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error('pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH'));
      }
    });
    
    pgDump.on('error', (error) => {
      reject(new Error(`pg_dump –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`));
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
async function createDatabaseBackup(options) {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pg_dump
  await checkPgDump();
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
  await ensureBackupDirectory(options.output);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
  const filename = generateBackupFilename(options);
  const outputPath = path.join(options.output, filename);
  
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${config.database}`);
  console.log(`   –•–æ—Å—Ç: ${config.host}:${config.port}`);
  console.log(`   –§–∞–π–ª: ${filename}`);
  console.log(`   –°–∂–∞—Ç–∏–µ: ${options.compress ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`);
  
  if (options.schemaOnly) {
    console.log(`   –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å—Ö–µ–º–∞`);
  } else if (options.dataOnly) {
    console.log(`   –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ`);
  } else {
    console.log(`   –†–µ–∂–∏–º: –ø–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è`);
  }
  
  console.log('');
  
  const startTime = Date.now();
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    await createBackup(outputPath, options);
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    const fileSize = await getFileSize(outputPath);
    
    console.log('\n‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    console.log(`   –§–∞–π–ª: ${outputPath}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${fileSize}`);
    console.log(`   –í—Ä–µ–º—è: ${duration} —Å–µ–∫—É–Ω–¥`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    await cleanupOldBackups(options.output, config.retentionDays);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
    try {
      await fs.unlink(outputPath);
    } catch (unlinkError) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    }
    
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  const required = ['DB_PASSWORD'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missing.forEach(key => console.error(`   - ${key}`));
    console.error('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Encore Tasks\n');
  
  validateEnvironment();
  
  const options = parseArgs();
  
  try {
    await createDatabaseBackup(options);
    
    console.log('\nüéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    if (error.message.includes('pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      console.error('\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client tools');
      console.error('   Windows: https://www.postgresql.org/download/windows/');
      console.error('   macOS: brew install postgresql');
      console.error('   Ubuntu: sudo apt-get install postgresql-client');
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { createDatabaseBackup };