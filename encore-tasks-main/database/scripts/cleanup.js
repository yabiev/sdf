#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks
 * –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–∞–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/cleanup.js [options]
 * 
 * –û–ø—Ü–∏–∏:
 *   --dry-run      –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
 *   --force        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 *   --logs-only    –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 *   --sessions-only –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
 */

const { Pool } = require('pg');
require('dotenv').config();

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password',
  max: 20,
  min: 2,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
};

const pool = new Pool(dbConfig);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
const cleanupConfig = {
  logRetentionDays: parseInt(process.env.LOG_RETENTION_DAYS) || 90,
  sessionRetentionDays: parseInt(process.env.SESSION_RETENTION_DAYS) || 7,
  notificationRetentionDays: 30, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
  archivedTaskRetentionDays: 365, // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞
  deletedProjectRetentionDays: 30 // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
};

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  const options = {
    dryRun: false,
    force: false,
    logsOnly: false,
    sessionsOnly: false
  };
  
  for (const arg of args) {
    switch (arg) {
      case '--dry-run':
        options.dryRun = true;
        break;
      case '--force':
        options.force = true;
        break;
      case '--logs-only':
        options.logsOnly = true;
        break;
      case '--sessions-only':
        options.sessionsOnly = true;
        break;
    }
  }
  
  return options;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function askForConfirmation(message) {
  return new Promise((resolve) => {
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    readline.question(`${message} (y/N): `, (answer) => {
      readline.close();
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });
}

// –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function cleanupActivityLogs(client, options) {
  console.log('üìã –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - cleanupConfig.logRetentionDays);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const countResult = await client.query(`
    SELECT COUNT(*) as count
    FROM activity_logs
    WHERE created_at < $1
  `, [cutoffDate]);
  
  const recordsToDelete = parseInt(countResult.rows[0].count);
  
  if (recordsToDelete === 0) {
    console.log('  ‚úì –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return 0;
  }
  
  console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${recordsToDelete} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ä—à–µ ${cleanupConfig.logRetentionDays} –¥–Ω–µ–π`);
  
  if (options.dryRun) {
    console.log('  üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –∑–∞–ø–∏—Å–∏ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã');
    return recordsToDelete;
  }
  
  // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  const batchSize = 1000;
  let totalDeleted = 0;
  
  while (totalDeleted < recordsToDelete) {
    const result = await client.query(`
      DELETE FROM activity_logs
      WHERE id IN (
        SELECT id FROM activity_logs
        WHERE created_at < $1
        ORDER BY created_at
        LIMIT $2
      )
    `, [cutoffDate, batchSize]);
    
    const deletedInBatch = result.rowCount;
    totalDeleted += deletedInBatch;
    
    if (deletedInBatch === 0) break;
    
    console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${totalDeleted}/${recordsToDelete} –∑–∞–ø–∏—Å–µ–π`);
  }
  
  console.log(`  ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${totalDeleted} –∑–∞–ø–∏—Å–µ–π`);
  return totalDeleted;
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
async function cleanupExpiredSessions(client, options) {
  console.log('üîê –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π...');
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - cleanupConfig.sessionRetentionDays);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const countResult = await client.query(`
    SELECT COUNT(*) as count
    FROM user_sessions
    WHERE (expires_at < NOW() OR last_activity_at < $1)
  `, [cutoffDate]);
  
  const sessionsToDelete = parseInt(countResult.rows[0].count);
  
  if (sessionsToDelete === 0) {
    console.log('  ‚úì –ò—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return 0;
  }
  
  console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${sessionsToDelete} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
  
  if (options.dryRun) {
    console.log('  üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —Å–µ—Å—Å–∏–∏ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã');
    return sessionsToDelete;
  }
  
  const result = await client.query(`
    DELETE FROM user_sessions
    WHERE (expires_at < NOW() OR last_activity_at < $1)
  `, [cutoffDate]);
  
  console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
  return result.rowCount;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function cleanupOldNotifications(client, options) {
  console.log('üîî –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - cleanupConfig.notificationRetentionDays);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const countResult = await client.query(`
    SELECT COUNT(*) as count
    FROM notifications
    WHERE created_at < $1 AND is_read = true
  `, [cutoffDate]);
  
  const notificationsToDelete = parseInt(countResult.rows[0].count);
  
  if (notificationsToDelete === 0) {
    console.log('  ‚úì –°—Ç–∞—Ä—ã—Ö –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return 0;
  }
  
  console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${notificationsToDelete} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  
  if (options.dryRun) {
    console.log('  üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã');
    return notificationsToDelete;
  }
  
  const result = await client.query(`
    DELETE FROM notifications
    WHERE created_at < $1 AND is_read = true
  `, [cutoffDate]);
  
  console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  return result.rowCount;
}

// –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
async function cleanupArchivedTasks(client, options) {
  console.log('üì¶ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
  
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - cleanupConfig.archivedTaskRetentionDays);
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
  const countResult = await client.query(`
    SELECT COUNT(*) as count
    FROM tasks
    WHERE is_archived = true AND archived_at < $1
  `, [cutoffDate]);
  
  const tasksToDelete = parseInt(countResult.rows[0].count);
  
  if (tasksToDelete === 0) {
    console.log('  ‚úì –°—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return 0;
  }
  
  console.log(`  üìä –ù–∞–π–¥–µ–Ω–æ ${tasksToDelete} —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
  
  if (options.dryRun) {
    console.log('  üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –∑–∞–¥–∞—á–∏ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã');
    return tasksToDelete;
  }
  
  // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∞–º–∏ –∑–∞–¥–∞—á–∏
  const taskIds = await client.query(`
    SELECT id FROM tasks
    WHERE is_archived = true AND archived_at < $1
  `, [cutoffDate]);
  
  if (taskIds.rows.length > 0) {
    const ids = taskIds.rows.map(row => row.id);
    
    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await client.query(`DELETE FROM task_tags WHERE task_id = ANY($1)`, [ids]);
    await client.query(`DELETE FROM task_assignees WHERE task_id = ANY($1)`, [ids]);
    await client.query(`DELETE FROM comments WHERE task_id = ANY($1)`, [ids]);
    await client.query(`DELETE FROM attachments WHERE task_id = ANY($1)`, [ids]);
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∑–∞–¥–∞—á–∏
    const result = await client.query(`
      DELETE FROM tasks WHERE id = ANY($1)
    `, [ids]);
    
    console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);
    return result.rowCount;
  }
  
  return 0;
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
async function optimizeTables(client, options) {
  console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü...');
  
  if (options.dryRun) {
    console.log('  üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    return;
  }
  
  const tables = [
    'activity_logs',
    'user_sessions', 
    'notifications',
    'tasks',
    'comments',
    'attachments'
  ];
  
  for (const table of tables) {
    try {
      await client.query(`VACUUM ANALYZE ${table}`);
      console.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ ${table} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
    } catch (error) {
      console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}: ${error.message}`);
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getDatabaseStats(client) {
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  
  const queries = [
    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', query: 'SELECT COUNT(*) as count FROM users' },
    { name: '–ü—Ä–æ–µ–∫—Ç—ã', query: 'SELECT COUNT(*) as count FROM projects' },
    { name: '–ó–∞–¥–∞—á–∏', query: 'SELECT COUNT(*) as count FROM tasks' },
    { name: '–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏', query: 'SELECT COUNT(*) as count FROM user_sessions WHERE expires_at > NOW()' },
    { name: '–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', query: 'SELECT COUNT(*) as count FROM activity_logs' },
    { name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', query: 'SELECT COUNT(*) as count FROM notifications' }
  ];
  
  for (const { name, query } of queries) {
    try {
      const result = await client.query(query);
      const count = parseInt(result.rows[0].count);
      console.log(`   ${name}: ${count.toLocaleString()}`);
    } catch (error) {
      console.log(`   ${name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
async function performCleanup(options) {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks\n');
  
  if (options.dryRun) {
    console.log('üîç –†–ï–ñ–ò–ú –ü–†–û–°–ú–û–¢–†–ê: –Ω–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n');
  }
  
  const client = await pool.connect();
  
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await getDatabaseStats(client);
    console.log('');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    if (!options.dryRun && !options.force) {
      const confirmed = await askForConfirmation('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?');
      if (!confirmed) {
        console.log('‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return;
      }
      console.log('');
    }
    
    await client.query('BEGIN');
    
    let totalCleaned = 0;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–π
    if (!options.sessionsOnly) {
      totalCleaned += await cleanupActivityLogs(client, options);
      totalCleaned += await cleanupOldNotifications(client, options);
      totalCleaned += await cleanupArchivedTasks(client, options);
    }
    
    if (!options.logsOnly) {
      totalCleaned += await cleanupExpiredSessions(client, options);
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
    if (totalCleaned > 0) {
      await optimizeTables(client, options);
    }
    
    await client.query('COMMIT');
    
    console.log('');
    if (options.dryRun) {
      console.log(`üîç –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ ${totalCleaned} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
    } else {
      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –£–¥–∞–ª–µ–Ω–æ ${totalCleaned} –∑–∞–ø–∏—Å–µ–π`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (!options.dryRun && totalCleaned > 0) {
      console.log('');
      await getDatabaseStats(client);
    }
    
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  const required = ['DB_PASSWORD'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missing.forEach(key => console.error(`   - ${key}`));
    console.error('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks\n');
  
  validateEnvironment();
  
  const options = parseArgs();
  
  console.log('‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏:');
  console.log(`   –õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${cleanupConfig.logRetentionDays} –¥–Ω–µ–π`);
  console.log(`   –°–µ—Å—Å–∏–∏: ${cleanupConfig.sessionRetentionDays} –¥–Ω–µ–π`);
  console.log(`   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${cleanupConfig.notificationRetentionDays} –¥–Ω–µ–π`);
  console.log(`   –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${cleanupConfig.archivedTaskRetentionDays} –¥–Ω–µ–π\n`);
  
  try {
    await performCleanup(options);
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { performCleanup };