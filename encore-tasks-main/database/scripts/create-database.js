#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/create-database.js [database_name]
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   node scripts/create-database.js
 *   node scripts/create-database.js encore_tasks_test
 */

const { Client } = require('pg');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const config = {
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–î
  database: 'postgres'
};

// –ò–º—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const databaseName = process.argv[2] || process.env.DB_NAME || 'encore_tasks';

async function createDatabase() {
  const client = new Client(config);
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    const checkQuery = `
      SELECT 1 FROM pg_database 
      WHERE datname = $1
    `;
    
    const result = await client.query(checkQuery, [databaseName]);
    
    if (result.rows.length > 0) {
      console.log(`‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${databaseName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log(`üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "${databaseName}"...`);
    await client.query(`CREATE DATABASE "${databaseName}"`);
    
    console.log(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${databaseName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    await client.end();
    
    const newClient = new Client({
      ...config,
      database: databaseName
    });
    
    await newClient.connect();
    
    console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π...');
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const extensions = [
      'uuid-ossp',    // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID
      'pgcrypto',     // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
      'pg_trgm'       // –î–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
    ];
    
    for (const extension of extensions) {
      try {
        await newClient.query(`CREATE EXTENSION IF NOT EXISTS "${extension}"`);
        console.log(`  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ "${extension}" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
      } catch (error) {
        console.warn(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ "${extension}": ${error.message}`);
      }
    }
    
    await newClient.end();
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log(`\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
    console.log(`   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run migrate`);
    console.log(`   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: npm run db:seed`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error.code === '28P01') {
      console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    } else if (error.code === '3D000') {
      console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL');
    }
    
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  const required = ['DB_PASSWORD'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missing.forEach(key => console.error(`   - ${key}`));
    console.error('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
    process.exit(1);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Encore Tasks\n');
  
  validateEnvironment();
  
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  console.log(`   –•–æ—Å—Ç: ${config.host}:${config.port}`);
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${config.user}`);
  console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${databaseName}\n`);
  
  await createDatabase();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { createDatabase };