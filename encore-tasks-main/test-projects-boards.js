const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  host: process.env.POSTGRES_HOST,
  port: process.env.POSTGRES_PORT,
  database: process.env.POSTGRES_DB,
  user: process.env.POSTGRES_USER,
  password: process.env.POSTGRES_PASSWORD
});

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testData = {
  user: {
    email: `test_projects_user_${Date.now()}@example.com`,
    name: 'Projects Test User',
    password_hash: 'hashed_password_123'
  },
  project: {
    name: 'Test Project',
    description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
    color: '#3B82F6'
  },
  boards: [
    {
      name: 'To Do',
      description: '–ó–∞–¥–∞—á–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
      position: 1
    },
    {
      name: 'In Progress',
      description: '–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ',
      position: 2
    },
    {
      name: 'Done',
      description: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',
      position: 3
    }
  ]
};

let testUserId = null;
let testProjectId = null;
let testBoardIds = [];

async function testProjectsAndBoards() {
  const client = await pool.connect();
  
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–û–í –ò –î–û–°–û–ö');
    console.log('=' .repeat(60));
    
    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const createUserResult = await client.query(`
         INSERT INTO users (email, name, password_hash, created_at, updated_at)
         VALUES ($1, $2, $3, NOW(), NOW())
         RETURNING id, email, created_at
       `, [
          testData.user.email,
          testData.user.name,
          testData.user.password_hash
        ]);
      
      testUserId = createUserResult.rows[0].id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testUserId}`);
      console.log(`   Email: ${createUserResult.rows[0].email}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${createUserResult.rows[0].created_at}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüìÅ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const createProjectResult = await client.query(`
        INSERT INTO projects (name, description, owner_id, color)
        VALUES ($1, $2, $3, $4)
        RETURNING id, name, description, owner_id, color, is_active, created_at
      `, [
        testData.project.name,
        testData.project.description,
        testUserId,
        testData.project.color
      ]);
      
      testProjectId = createProjectResult.rows[0].id;
      console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testProjectId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createProjectResult.rows[0].name}`);
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${createProjectResult.rows[0].description}`);
      console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü ID: ${createProjectResult.rows[0].owner_id}`);
      console.log(`   –¶–≤–µ—Ç: ${createProjectResult.rows[0].color}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${createProjectResult.rows[0].is_active}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${createProjectResult.rows[0].created_at}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫
    console.log('\nüìã –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫...');
    for (let i = 0; i < testData.boards.length; i++) {
      const board = testData.boards[i];
      try {
        const createBoardResult = await client.query(`
          INSERT INTO boards (name, description, project_id, position, created_at, updated_at)
          VALUES ($1, $2, $3, $4, NOW(), NOW())
          RETURNING id, name, description, project_id, position, created_at
        `, [
          board.name,
          board.description,
          testProjectId,
          board.position
        ]);
        
        const boardId = createBoardResult.rows[0].id;
        testBoardIds.push(boardId);
        
        console.log(`‚úÖ –î–æ—Å–∫–∞ "${board.name}" —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
        console.log(`   ID: ${boardId}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${createBoardResult.rows[0].name}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${createBoardResult.rows[0].description}`);
        console.log(`   –ü—Ä–æ–µ–∫—Ç ID: ${createBoardResult.rows[0].project_id}`);
        console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${createBoardResult.rows[0].position}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${createBoardResult.rows[0].created_at}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ "${board.name}": ${error.message}`);
        throw error;
      }
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–æ—Å–∫–∞–º–∏
    console.log('\nüîç –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –¥–æ—Å–∫–∞–º–∏...');
    try {
      const getProjectResult = await client.query(`
        SELECT 
          p.id as project_id,
          p.name as project_name,
          p.description as project_description,
          p.color as project_color,
          p.is_active as project_is_active,
          p.created_at as project_created_at,
          u.email as owner_email,
          u.name as owner_name
        FROM projects p
        JOIN users u ON p.owner_id = u.id
        WHERE p.id = $1
      `, [testProjectId]);
      
      if (getProjectResult.rows.length > 0) {
        const project = getProjectResult.rows[0];
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:`);
        console.log(`   ID: ${project.project_id}`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.project_name}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${project.project_description}`);
        console.log(`   –¶–≤–µ—Ç: ${project.project_color}`);
        console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${project.project_is_active}`);
        console.log(`   –í–ª–∞–¥–µ–ª–µ—Ü: ${project.owner_name} (${project.owner_email})`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${project.project_created_at}`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        const getBoardsResult = await client.query(`
          SELECT id, name, description, position, is_active, created_at
          FROM boards
          WHERE project_id = $1
          ORDER BY position ASC
        `, [testProjectId]);
        
        console.log(`\n   –î–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (${getBoardsResult.rows.length}):`);
        getBoardsResult.rows.forEach((board, index) => {
          console.log(`   ${index + 1}. "${board.name}" (ID: ${board.id}, –ü–æ–∑–∏—Ü–∏—è: ${board.position})`);
          console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${board.description}`);
          console.log(`      –ê–∫—Ç–∏–≤–Ω–∞: ${board.is_active}`);
          console.log(`      –°–æ–∑–¥–∞–Ω–∞: ${board.created_at}`);
        });
      } else {
        console.error('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n‚úèÔ∏è –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
    try {
      const updatedName = testData.project.name + ' (–û–±–Ω–æ–≤–ª–µ–Ω)';
      const updatedDescription = testData.project.description + ' - –æ–±–Ω–æ–≤–ª–µ–Ω–æ';
      
      const updateProjectResult = await client.query(`
        UPDATE projects 
        SET name = $1, description = $2, updated_at = NOW()
        WHERE id = $3
        RETURNING id, name, description, updated_at
      `, [updatedName, updatedDescription, testProjectId]);
      
      if (updateProjectResult.rows.length > 0) {
        const project = updateProjectResult.rows[0];
        console.log(`‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:`);
        console.log(`   ID: ${project.id}`);
        console.log(`   –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: ${project.name}`);
        console.log(`   –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${project.description}`);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${project.updated_at}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 6: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –¥–æ—Å–æ–∫
    console.log('\nüîÑ –¢–µ—Å—Ç 6: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –¥–æ—Å–æ–∫...');
    try {
      // –ü–æ–º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å–∫—É
      if (testBoardIds.length >= 2) {
        await client.query(`
          UPDATE boards SET position = $1, updated_at = NOW() WHERE id = $2
        `, [99, testBoardIds[0]]); // –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        await client.query(`
          UPDATE boards SET position = $1, updated_at = NOW() WHERE id = $2
        `, [1, testBoardIds[testBoardIds.length - 1]]);
        
        await client.query(`
          UPDATE boards SET position = $1, updated_at = NOW() WHERE id = $2
        `, [testBoardIds.length, testBoardIds[0]]);
        
        console.log(`‚úÖ –ü–æ—Ä—è–¥–æ–∫ –¥–æ—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
        const newOrderResult = await client.query(`
          SELECT id, name, position
          FROM boards
          WHERE project_id = $1
          ORDER BY position ASC
        `, [testProjectId]);
        
        console.log('   –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–æ—Å–æ–∫:');
        newOrderResult.rows.forEach((board, index) => {
          console.log(`   ${index + 1}. "${board.name}" (–ü–æ–∑–∏—Ü–∏—è: ${board.position})`);
        });
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –¥–æ—Å–æ–∫: ${error.message}`);
    }

    // –û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ—Å–æ–∫
      if (testBoardIds.length > 0) {
        const deleteBoardsResult = await client.query(
          `DELETE FROM boards WHERE id = ANY($1)`,
          [testBoardIds]
        );
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥–æ—Å–æ–∫: ${deleteBoardsResult.rowCount}`);
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      if (testProjectId) {
        await client.query('DELETE FROM projects WHERE id = $1', [testProjectId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω');
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (testUserId) {
        await client.query('DELETE FROM users WHERE id = $1', [testUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }

    client.release();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–û–í –ò –î–û–°–û–ö:');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–æ–∫: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –¥–æ—Å–∫–∞–º–∏: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–æ–º –¥–æ—Å–æ–∫: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û');
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ï–ö–¢–û–í –ò –î–û–°–û–ö –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(`   ${error.message}`);
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü projects –∏ boards');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º');
    console.log('   4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ');
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testProjectsAndBoards()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –¥–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}