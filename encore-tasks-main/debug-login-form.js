const puppeteer = require('puppeteer');

async function debugLoginForm() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  const page = await browser.newPage();
  
  try {
    console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3001', { waitUntil: 'networkidle2' });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...');
    const loginTabButton = await page.$('button');
    if (loginTabButton) {
      const buttonText = await page.evaluate(btn => btn.textContent, loginTabButton);
      console.log('üìã –¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏:', buttonText);
      if (buttonText.includes('–í—Ö–æ–¥')) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–í—Ö–æ–¥", –∫–ª–∏–∫–∞–µ–º...');
        await loginTabButton.click();
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    
    // –ò—â–µ–º –ø–æ–ª–µ email
    const emailInput = await page.$('input[type="email"]');
    if (emailInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email');
      await emailInput.click();
      await emailInput.type('test@example.com');
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    const passwordInput = await page.$('input[type="password"]');
    if (passwordInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è');
      await passwordInput.click();
      await passwordInput.type('password123');
    }
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –í–°–ï–• –ö–ù–û–ü–û–ö –ü–û–°–õ–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –§–û–†–ú–´:');
    
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map((btn, index) => ({
        index: index,
        text: btn.textContent?.trim() || '',
        type: btn.type || '',
        className: btn.className || '',
        id: btn.id || '',
        disabled: btn.disabled,
        form: btn.form ? btn.form.id || 'form-exists' : 'no-form',
        innerHTML: btn.innerHTML
      }));
    });
    
    console.log('üìã –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    allButtons.forEach((btn) => {
      console.log(`${btn.index + 1}. "${btn.text}" (type: ${btn.type}, disabled: ${btn.disabled}, form: ${btn.form})`);
      console.log(`   className: "${btn.className}", id: "${btn.id}"`);
      console.log(`   innerHTML: ${btn.innerHTML}`);
      console.log('---');
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–∫–∂–µ input —ç–ª–µ–º–µ–Ω—Ç—ã —Å type="submit"
    const submitInputs = await page.evaluate(() => {
      const inputs = Array.from(document.querySelectorAll('input[type="submit"]'));
      return inputs.map((input, index) => ({
        index: index,
        value: input.value || '',
        className: input.className || '',
        id: input.id || '',
        disabled: input.disabled
      }));
    });
    
    if (submitInputs.length > 0) {
      console.log('\nüìã Input —ç–ª–µ–º–µ–Ω—Ç—ã —Å type="submit":');
      submitInputs.forEach((input) => {
        console.log(`${input.index + 1}. value: "${input.value}" (disabled: ${input.disabled})`);
        console.log(`   className: "${input.className}", id: "${input.id}"`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º—ã
    const forms = await page.evaluate(() => {
      const forms = Array.from(document.querySelectorAll('form'));
      return forms.map((form, index) => ({
        index: index,
        action: form.action || '',
        method: form.method || '',
        className: form.className || '',
        id: form.id || '',
        innerHTML: form.innerHTML.substring(0, 200) + '...'
      }));
    });
    
    if (forms.length > 0) {
      console.log('\nüìã –§–æ—Ä–º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
      forms.forEach((form) => {
        console.log(`${form.index + 1}. action: "${form.action}", method: "${form.method}"`);
        console.log(`   className: "${form.className}", id: "${form.id}"`);
        console.log(`   innerHTML: ${form.innerHTML}`);
        console.log('---');
      });
    }
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    console.log('\nüîç –ü–û–ò–°–ö –ö–ù–û–ü–û–ö –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:');
    
    // 1. –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–í–æ–π—Ç–∏"
    const loginButtons = allButtons.filter(btn => 
      btn.text.toLowerCase().includes('–≤–æ–π—Ç–∏') || 
      btn.text.toLowerCase().includes('login') ||
      btn.text.toLowerCase().includes('sign in')
    );
    
    if (loginButtons.length > 0) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–í–æ–π—Ç–∏":');
      loginButtons.forEach(btn => {
        console.log(`   ${btn.index + 1}. "${btn.text}" (type: ${btn.type})`);
      });
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–í–æ–π—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 2. –ö–Ω–æ–ø–∫–∏ —Å type="submit"
    const submitButtons = allButtons.filter(btn => btn.type === 'submit');
    
    if (submitButtons.length > 0) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ —Å type="submit":');
      submitButtons.forEach(btn => {
        console.log(`   ${btn.index + 1}. "${btn.text}" (disabled: ${btn.disabled})`);
      });
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∏ —Å type="submit" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
    const formButtons = allButtons.filter(btn => btn.form !== 'no-form');
    
    if (formButtons.length > 0) {
      console.log('‚úÖ –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã:');
      formButtons.forEach(btn => {
        console.log(`   ${btn.index + 1}. "${btn.text}" (type: ${btn.type}, form: ${btn.form})`);
      });
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('\nüì∏ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
    await page.screenshot({ path: 'debug-login-form-screenshot.png', fullPage: true });
    console.log('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-login-form-screenshot.png');
    
    console.log('\n‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (30 —Å–µ–∫—É–Ω–¥)...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    await browser.close();
  }
}

debugLoginForm().catch(console.error);