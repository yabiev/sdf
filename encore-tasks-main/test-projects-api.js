const axios = require('axios');

async function testProjectsAPI() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const authResponse = await axios.post('http://localhost:3000/api/auth/login', {
      email: 'axelencore@mail.ru',
      password: 'Ad580dc6axelencore'
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('Status:', authResponse.status);
    console.log('Data:', JSON.stringify(authResponse.data, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞)
    const token = authResponse.data?.data?.token || authResponse.data?.token;
    if (!token) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      console.error('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', authResponse.data);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if (!authResponse.data?.user) {
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    const projectsResponse = await axios.get('http://localhost:3000/api/projects', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç API –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    console.log('Status:', projectsResponse.status);
    console.log('Data:', JSON.stringify(projectsResponse.data, null, 2));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    let projects = [];
    if (Array.isArray(projectsResponse.data)) {
      projects = projectsResponse.data;
    } else if (projectsResponse.data && projectsResponse.data.data) {
      if (Array.isArray(projectsResponse.data.data)) {
        projects = projectsResponse.data.data;
      } else if (projectsResponse.data.data.projects && Array.isArray(projectsResponse.data.data.projects)) {
        projects = projectsResponse.data.data.projects;
      }
    } else if (projectsResponse.data && Array.isArray(projectsResponse.data.projects)) {
      projects = projectsResponse.data.projects;
    }
    
    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API:');
    console.log('- projectsResponse.data —Ç–∏–ø:', typeof projectsResponse.data);
    console.log('- projectsResponse.data.data —Ç–∏–ø:', typeof projectsResponse.data?.data);
    console.log('- projectsResponse.data.data.projects —Ç–∏–ø:', typeof projectsResponse.data?.data?.projects);
    if (projectsResponse.data?.data?.projects) {
      console.log('- projectsResponse.data.data.projects –¥–ª–∏–Ω–∞:', projectsResponse.data.data.projects.length);
    }
    
    console.log(`\nüìà –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${projects.length}`);
    console.log('üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsResponse.data.pagination?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    
    if (projects.length > 0) {
      console.log('\nüéØ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
      projects.slice(0, 5).forEach((project, index) => {
        console.log(`  ${index + 1}. ID: ${project.id || project.project_id || 'N/A'}`);
        console.log(`     –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name || project.title || 'N/A'}`);
        console.log(`     –û–ø–∏—Å–∞–Ω–∏–µ: ${project.description || 'N/A'}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${project.created_at || project.createdAt || 'N/A'}`);
        console.log('');
      });
      
      if (projects.length > 5) {
        console.log(`... –∏ –µ—â–µ ${projects.length - 5} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
      }
      
      // –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      const testProject = projects.find(p => 
        (p.name && p.name.toLowerCase().includes('—Ç–µ—Å—Ç–æ–≤—ã–π')) ||
        (p.title && p.title.toLowerCase().includes('—Ç–µ—Å—Ç–æ–≤—ã–π')) ||
        (p.name && p.name.toLowerCase().includes('test')) ||
        (p.title && p.title.toLowerCase().includes('test'))
      );
      
      if (testProject) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ API!');
        console.log('üìù –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', JSON.stringify(testProject, null, 2));
      } else {
        console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API');
      }
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('\nüÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
    const newProjectResponse = await axios.post('http://localhost:3000/api/projects', {
      name: `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç API ${new Date().toISOString()}`,
      description: '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API —Ç–µ—Å—Ç'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:');
    console.log('Status:', newProjectResponse.status);
    console.log('Data:', JSON.stringify(newProjectResponse.data, null, 2));
    
    if (newProjectResponse.data.success) {
      console.log('‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ
      console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
      const updatedProjectsResponse = await axios.get('http://localhost:3000/api/projects', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      let updatedProjects = [];
      if (Array.isArray(updatedProjectsResponse.data)) {
        updatedProjects = updatedProjectsResponse.data;
      } else if (updatedProjectsResponse.data && updatedProjectsResponse.data.data) {
        if (Array.isArray(updatedProjectsResponse.data.data)) {
          updatedProjects = updatedProjectsResponse.data.data;
        } else if (updatedProjectsResponse.data.data.projects && Array.isArray(updatedProjectsResponse.data.data.projects)) {
          updatedProjects = updatedProjectsResponse.data.data.projects;
        }
      } else if (updatedProjectsResponse.data && Array.isArray(updatedProjectsResponse.data.projects)) {
        updatedProjects = updatedProjectsResponse.data.projects;
      }
      
      console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: ${updatedProjects.length}`);
      console.log('üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', updatedProjectsResponse.data.pagination?.total || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
      
      if (updatedProjects.length > projects.length) {
        console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!');
        
        // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const createdProject = updatedProjects.find(p => p.name && p.name.includes('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç API'));
        
        if (createdProject) {
          console.log('üìã –î–µ—Ç–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', {
            id: createdProject.id,
            name: createdProject.name,
            description: createdProject.description,
            created_at: createdProject.created_at || createdProject.createdAt
          });
        }
      } else {
        console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ');
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–æ–µ–∫—Ç–∞:');
        updatedProjects.slice(0, 3).forEach((project, index) => {
          console.log(`${index + 1}. ${project.name || project.title} (ID: ${project.id}) - ${project.created_at || project.createdAt}`);
        });
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', newProjectResponse.data.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
  }
}

testProjectsAPI();