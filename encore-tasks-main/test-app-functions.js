const fetch = require('node-fetch');

let authToken = null;
let userId = null;
let projectId = null;
let boardId = null;

async function makeRequest(url, options = {}) {
  const headers = {
    'Content-Type': 'application/json',
    ...options.headers
  };
  
  if (authToken) {
    headers['Authorization'] = `Bearer ${authToken}`;
  }
  
  const response = await fetch(url, {
    ...options,
    headers
  });
  
  return response;
}

async function testLogin() {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  try {
    const response = await makeRequest('http://localhost:3000/api/auth/login', {
      method: 'POST',
      body: JSON.stringify({
        email: 'axelencore@mail.ru',
        password: 'Ad580dc6axelencore'
      })
    });
    
    if (response.ok) {
      const data = await response.json();
      authToken = data.token;
      userId = data.user.id;
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.user.name, '(' + data.user.email + ')');
      console.log('   –†–æ–ª—å:', data.user.role);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

async function testCreateProject() {
  console.log('\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    const response = await makeRequest('http://localhost:3000/api/projects', {
      method: 'POST',
      body: JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç ' + Date.now(),
        description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      const data = result.success ? result.data : result;
      projectId = data.id;
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('   ID –ø—Ä–æ–µ–∫—Ç–∞:', projectId);
      console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', data.name);
      return true;
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', response.status, errorText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', error.message);
    return false;
  }
}

async function testCreateBoard() {
  console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏...');
  
  if (!projectId) {
    console.log('‚ùå –ù–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏');
    return false;
  }
  
  try {
    const response = await makeRequest('http://localhost:3000/api/boards', {
      method: 'POST',
      body: JSON.stringify({
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ ' + Date.now(),
        description: '–î–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        project_id: projectId
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      const data = result.success ? result.data : result;
      boardId = data.id;
      console.log('‚úÖ –î–æ—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('   ID –¥–æ—Å–∫–∏:', boardId);
      console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', data.name);
      return true;
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', response.status, errorText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å–∫–∏:', error.message);
    return false;
  }
}

async function testGetProjects() {
  console.log('\nüìÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  try {
    const response = await makeRequest('http://localhost:3000/api/projects');
    
    if (response.ok) {
      const result = await response.json();
      const data = result.success ? result.data.projects : result;
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω!');
      console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', data.length);
      if (data.length > 0) {
        console.log('   –ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', data[0].name);
      }
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error.message);
    return false;
  }
}

async function testGetBoards() {
  console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫...');
  
  if (!projectId) {
    console.log('‚ùå –ù–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫');
    return false;
  }
  
  try {
    const response = await makeRequest(`http://localhost:3000/api/boards?projectId=${projectId}`);
    
    if (response.ok) {
      const result = await response.json();
      const data = result.success ? result.data.boards || result.data : result;
      console.log('‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω!');
      console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫:', data.length);
      if (data.length > 0) {
        console.log('   –ü–µ—Ä–≤–∞—è –¥–æ—Å–∫–∞:', data[0].name);
      }
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫:', response.status);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å–æ–∫:', error.message);
    return false;
  }
}

async function testCreateTask() {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏...');
  
  if (!boardId) {
    console.log('‚ùå –ù–µ—Ç ID –¥–æ—Å–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
    return false;
  }
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏
    const columnsResponse = await makeRequest(`http://localhost:3000/api/boards/${boardId}/columns`);
    let columnId = null;
    
    if (columnsResponse.ok) {
      const columnsResult = await columnsResponse.json();
      const columns = columnsResult.success ? columnsResult.data : columnsResult;
      if (columns && columns.length > 0) {
        columnId = columns[0].id; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        console.log('   –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É:', columns[0].name, 'ID:', columnId);
      }
    }
    
    if (!columnId) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–æ–ª–æ–Ω–∫–∏');
      return false;
    }
    
    const response = await makeRequest('http://localhost:3000/api/tasks', {
      method: 'POST',
      body: JSON.stringify({
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ' + Date.now(),
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏',
        column_id: columnId,
        priority: 'medium'
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      const data = result.success ? result.data : result;
      console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('   ID –∑–∞–¥–∞—á–∏:', data.id);
      console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', data.title);
      return true;
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', response.status, errorText);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', error.message);
    return false;
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Encore Tasks\n');
  
  const results = {
    login: false,
    createProject: false,
    createBoard: false,
    getProjects: false,
    getBoards: false,
    createTask: false
  };
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  results.login = await testLogin();
  
  if (results.login) {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    results.createProject = await testCreateProject();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    results.getProjects = await testGetProjects();
    
    if (results.createProject) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏
      results.createBoard = await testCreateBoard();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫
      results.getBoards = await testGetBoards();
      
      if (results.createBoard) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        results.createTask = await testCreateTask();
      }
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('================================');
  
  const tests = [
    { name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', result: results.login },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', result: results.createProject },
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤', result: results.getProjects },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å–∫–∏', result: results.createBoard },
    { name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫', result: results.getBoards },
    { name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', result: results.createTask }
  ];
  
  let passedTests = 0;
  tests.forEach(test => {
    const status = test.result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù';
    console.log(`${test.name}: ${status}`);
    if (test.result) passedTests++;
  });
  
  console.log('\n================================');
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${tests.length}`);
  
  if (passedTests === tests.length) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
  }
}

runAllTests();