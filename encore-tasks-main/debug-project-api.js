const fetch = require('node-fetch');

async function debugProjectAPI() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ API —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
  
  // –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
  const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      email: 'axelencore@mail.ru',
      password: 'Ad580dc6axelencore'
    })
  });
  
  const loginData = await loginResponse.json();
  const token = loginData.token;
  
  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
  console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...');
  const createResponse = await fetch('http://localhost:3000/api/projects', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({
      name: 'Debug Project ' + Date.now(),
      description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API'
    })
  });
  
  console.log('–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è:', createResponse.status);
  console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(createResponse.headers.entries()));
  
  const createText = await createResponse.text();
  console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', createText);
  
  try {
    const createData = JSON.parse(createText);
    console.log('–ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', createData);
    console.log('ID –ø—Ä–æ–µ–∫—Ç–∞:', createData.id);
    console.log('–ù–∞–∑–≤–∞–Ω–∏–µ:', createData.name);
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
  console.log('\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  const listResponse = await fetch('http://localhost:3000/api/projects', {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  console.log('–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è:', listResponse.status);
  const listText = await listResponse.text();
  console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–∫–∞:', listText.substring(0, 500) + '...');
  
  try {
    const listData = JSON.parse(listText);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:', listData.length);
    if (listData.length > 0) {
      console.log('–ü–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç:', listData[0]);
    }
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞:', e.message);
  }
}

debugProjectAPI();