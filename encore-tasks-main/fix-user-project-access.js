const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function fixUserProjectAccess() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º —á–µ—Ä–µ–∑ Supabase...');
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    return;
  }
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let { data: users, error: userError } = await supabase
      .from('users')
      .select('id, email, name')
      .eq('email', 'test@example.com')
      .single();
    
    let user;
    if (userError || !users) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: newUser, error: createUserError } = await supabase
        .from('users')
        .insert({
          email: 'test@example.com',
          name: 'Test User',
          password_hash: 'test_hash' // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à
        })
        .select()
        .single();
      
      if (createUserError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createUserError.message);
        return;
      }
      
      user = newUser;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    } else {
      user = users;
      console.log('üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
     const { data: projects, error: projectsError } = await supabase
       .from('projects')
       .select('id, name, created_by')
       .order('created_at', { ascending: false })
       .limit(5);
    
    if (projectsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤:', projectsError.message);
      return;
    }
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:', projects);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let projectId;
    if (!projects || projects.length === 0) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...');
      const { data: newProject, error: createError } = await supabase
        .from('projects')
        .insert({
           name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
           description: '–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
           created_by: user.id
         })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createError.message);
        return;
      }
      
      projectId = newProject.id;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç:', newProject);
    } else {
      projectId = projects[0].id;
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç:', projects[0]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–ª–µ–Ω—Å—Ç–≤–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    const { data: membership, error: membershipError } = await supabase
      .from('project_members')
      .select('*')
      .eq('project_id', projectId)
      .eq('user_id', user.id)
      .single();
    
    if (membershipError && membershipError.code !== 'PGRST116') {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞:', membershipError.message);
      return;
    }
    
    if (!membership) {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
      const { error: addMemberError } = await supabase
        .from('project_members')
        .insert({
          project_id: projectId,
          user_id: user.id,
          role: 'admin'
        });
      
      if (addMemberError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç:', addMemberError.message);
        return;
      }
      
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç');
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–ª–µ–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∞:', membership);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const { data: boards, error: boardsError } = await supabase
      .from('boards')
      .select('id, name')
      .eq('project_id', projectId);
    
    if (boardsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å–æ–∫:', boardsError.message);
      return;
    }
    
    let boardId;
    if (!boards || boards.length === 0) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –¥–æ—Å–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞...');
      const { data: newBoard, error: createBoardError } = await supabase
        .from('boards')
        .insert({
          name: '–û—Å–Ω–æ–≤–Ω–∞—è –¥–æ—Å–∫–∞',
          description: '–ì–ª–∞–≤–Ω–∞—è –¥–æ—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
          project_id: projectId,
          created_by: user.id
        })
        .select()
        .single();
      
      if (createBoardError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏:', createBoardError.message);
        return;
      }
      
      boardId = newBoard.id;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ—Å–∫–∞:', newBoard);
    } else {
      boardId = boards[0].id;
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–æ—Å–∫—É:', boards[0]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å–∫–∏
    const { data: columns, error: columnsError } = await supabase
      .from('columns')
      .select('id, name, position')
      .eq('board_id', boardId)
      .order('position');
    
    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', columnsError.message);
      return;
    }
    
    if (!columns || columns.length === 0) {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏...');
      const columnsToCreate = [
        { name: '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é', board_id: boardId, position: 0 },
        { name: '–í —Ä–∞–±–æ—Ç–µ', board_id: boardId, position: 1 },
        { name: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', board_id: boardId, position: 2 }
      ];
      
      const { error: createColumnsError } = await supabase
        .from('columns')
        .insert(columnsToCreate);
      
      if (createColumnsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', createColumnsError.message);
        return;
      }
      
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏');
    } else {
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:', columns);
    }
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
    console.log(`üìã –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
    console.log(`üóÇÔ∏è –î–æ—Å–∫–∞ ID: ${boardId}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞:', error);
  }
}

fixUserProjectAccess().catch(console.error);