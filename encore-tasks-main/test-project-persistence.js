// –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// Using built-in fetch from Node.js 18+

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3000';
const TEST_USER = {
  email: 'admin@encore-tasks.com',
  password: 'admin123'
};

async function testProjectPersistence() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤...');
  
  try {
    // 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('\n1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(TEST_USER)
    });
    
    const loginData = await loginResponse.json();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginData.message);
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', loginData.data?.user);
    
    if (!loginData.token) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
    
    const token = loginData.token;
    const userId = loginData.data?.user?.id;
    console.log('User ID:', userId, 'Type:', typeof userId);
    
    const authHeaders = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –î–û —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsBeforeResponse = await fetch(`${BASE_URL}/api/projects`, {
      headers: authHeaders
    });
    const projectsBeforeData = await projectsBeforeResponse.json();
    console.log('–ü—Ä–æ–µ–∫—Ç—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è:', projectsBeforeData.projects?.length || 0);
    
    // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    const testProjectName = `–¢–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç ${Date.now()}`;
    const createResponse = await fetch(`${BASE_URL}/api/projects`, {
      method: 'POST',
      headers: authHeaders,
      body: JSON.stringify({
        name: testProjectName,
        color: '#ff6b6b'
      })
    });
    
    const createData = await createResponse.json();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:', createData);
    
    if (!createData.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
    
    const createdProjectId = createData.data.id;
    console.log('ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', createdProjectId);
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è...');
    const projectsAfterResponse = await fetch(`${BASE_URL}/api/projects`, {
      headers: authHeaders
    });
    const projectsAfterData = await projectsAfterResponse.json();
    console.log('–ü—Ä–æ–µ–∫—Ç—ã –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è:', projectsAfterData.projects?.length || 0);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
    const createdProject = projectsAfterData.projects?.find(p => p.id === createdProjectId);
    if (createdProject) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ:', createdProject.name);
    } else {
      console.log('‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ!');
    }
    
    // 6. –°–∏–º—É–ª—è—Ü–∏—è "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏" - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    console.log('\n5. –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞...');
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ 1 —Å–µ–∫
    
    const projectsReloadResponse = await fetch(`${BASE_URL}/api/projects`, {
      headers: authHeaders
    });
    const projectsReloadData = await projectsReloadResponse.json();
    console.log('–ü—Ä–æ–µ–∫—Ç—ã –ø–æ—Å–ª–µ "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏":', projectsReloadData.projects?.length || 0);
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const persistedProject = projectsReloadData.projects?.find(p => p.id === createdProjectId);
    if (persistedProject) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:', persistedProject.name);
      console.log('   - ID:', persistedProject.id);
      console.log('   - –ù–∞–∑–≤–∞–Ω–∏–µ:', persistedProject.name);
      console.log('   - –¶–≤–µ—Ç:', persistedProject.color);
      console.log('   - –°–æ–∑–¥–∞–Ω:', persistedProject.created_at);
      console.log('   - –ê–≤—Ç–æ—Ä:', persistedProject.created_by);
    } else {
      console.log('‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏!');
    }
    
    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProjectPersistence();