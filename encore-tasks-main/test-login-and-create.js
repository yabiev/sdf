const puppeteer = require('puppeteer');

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
function wait(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testLoginAndCreate() {
  let browser;
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    console.log('üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });
    
    await wait(2000);
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...');
    const loginButtons = await page.$$eval('button', buttons => 
      buttons.map(btn => ({
        text: btn.textContent.trim(),
        className: btn.className
      })).filter(btn => 
        btn.text.includes('–í—Ö–æ–¥') || btn.text.includes('–í–æ–π—Ç–∏')
      )
    );
    
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞:', loginButtons);
    
    // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
    const loginButton = await page.$('button');
    if (loginButton) {
      const buttonText = await page.evaluate(btn => btn.textContent.trim(), loginButton);
      if (buttonText.includes('–í—Ö–æ–¥')) {
        console.log('‚úÖ –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞:', buttonText);
        await loginButton.click();
        await wait(2000);
      }
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º email: axelencore@mail.ru');
    
    const emailInput = await page.$('input[type="email"], input[name="email"], input[placeholder*="email"], input[placeholder*="Email"], input[placeholder*="–ø–æ—á—Ç"]');
    if (emailInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email');
      await page.evaluate((input) => input.value = '', emailInput);
      await emailInput.type('axelencore@mail.ru');
    } else {
      console.log('‚ùå –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    const passwordInput = await page.$('input[type="password"], input[name="password"]');
    if (passwordInput) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è');
      await page.evaluate((input) => input.value = '', passwordInput);
      await passwordInput.type('Ad580dc6axelencore');
    } else {
      console.log('‚ùå –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const submitButton = await page.$('button[type="submit"], input[type="submit"], button:not([type])');
    if (submitButton) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
      await submitButton.click();
      await wait(3000);
    } else {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const consoleErrors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        consoleErrors.push(msg.text());
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:', msg.text());
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    const currentUrl = page.url();
    console.log('üåê URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:', currentUrl);
    
    await wait(2000);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
    const createElements = await page.$$eval('*', elements => 
      elements.filter(el => {
        const text = el.textContent || '';
        const className = el.className || '';
        const id = el.id || '';
        return (
          text.includes('–°–æ–∑–¥–∞—Ç—å') ||
          text.includes('–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç') ||
          text.includes('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç') ||
          text.includes('+') ||
          className.includes('create') ||
          className.includes('add') ||
          className.includes('new') ||
          id.includes('create') ||
          id.includes('add')
        );
      }).map(el => ({
        tagName: el.tagName,
        text: el.textContent.trim().substring(0, 50),
        className: el.className,
        id: el.id
      }))
    );
    
    console.log('üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', createElements);
    
    if (createElements.length === 0) {
      console.log('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const allButtons = await page.$$eval('button, a, div[role="button"]', elements => 
        elements.map(el => ({
          text: el.textContent.trim().substring(0, 30),
          tagName: el.tagName,
          className: el.className.substring(0, 100)
        }))
      );
      console.log('üîç –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allButtons);
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
      const createButton = await page.$('button, a, div[role="button"]');
      if (createButton) {
        const buttonText = await page.evaluate(btn => btn.textContent.trim(), createButton);
        if (buttonText.includes('–°–æ–∑–¥–∞—Ç—å') || buttonText.includes('+')) {
          await createButton.click();
          await wait(2000);
          
          // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
          console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞...');
          
          const nameInput = await page.$('input[name="name"], input[placeholder*="–Ω–∞–∑–≤–∞–Ω–∏–µ"], input[placeholder*="–∏–º—è"]');
          if (nameInput) {
            await nameInput.type('–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
          }
          
          const descInput = await page.$('textarea, input[name="description"], input[placeholder*="–æ–ø–∏—Å–∞–Ω–∏–µ"]');
          if (descInput) {
            await descInput.type('–ü—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
          }
          
          const submitBtn = await page.$('button[type="submit"], button:contains("–°–æ–∑–¥–∞—Ç—å"), button:contains("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")');
          if (submitBtn) {
            await submitBtn.click();
            await wait(3000);
          }
        }
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'test-login-result.png', fullPage: true });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test-login-result.png');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    if (consoleErrors.length === 0) {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏:', consoleErrors);
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
    if (browser) {
      await browser.close();
    }
  }
  
  // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
  console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞...');
  await wait(15000);
  
  if (browser) {
    await browser.close();
  }
}

testLoginAndCreate();