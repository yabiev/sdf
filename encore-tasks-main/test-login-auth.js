const { Pool } = require('pg');
const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return {};
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^[\"']|[\"']$/g, '');
      }
    }
  });
  
  return env;
}

async function testLogin() {
  const env = loadEnvFile();
  
  const config = {
    host: env.POSTGRES_HOST || 'localhost',
    port: parseInt(env.POSTGRES_PORT) || 5432,
    database: env.POSTGRES_DB || 'encore_tasks',
    user: env.POSTGRES_USER || 'postgres',
    password: env.POSTGRES_PASSWORD || ''
  };
  
  const pool = new Pool(config);
  
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    console.log('üìß Email: axelencore@mail.ru');
    console.log('üîë Password: Ad50dc6axelencore');
    console.log('');
    
    const client = await pool.connect();
    
    // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email...');
    const userResult = await client.query(
      'SELECT id, email, password_hash, created_at FROM users WHERE email = $1',
      ['axelencore@mail.ru']
    );
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    const user = userResult.rows[0];
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`   ID: ${user.id}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Name: ${user.name}`);
    console.log(`   Role: ${user.role}`);
    console.log(`   Approval Status: ${user.approval_status}`);
    console.log(`   Is Active: ${user.is_active}`);
    console.log(`   Password Hash Length: ${user.password_hash ? user.password_hash.length : 'NULL'}`);
    console.log('');
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
    const testPassword = 'Ad50dc6axelencore';
    
    if (!user.password_hash) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è!');
      return;
    }
    
    console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –ø–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   –•–µ—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${user.password_hash}`);
    
    const isValidPassword = await bcrypt.compare(testPassword, user.password_hash);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${isValidPassword ? '‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' : '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}`);
    console.log('');
    
    // –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞
    console.log('3Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞...');
    const newHash = await bcrypt.hash(testPassword, 12);
    console.log(`   –ù–æ–≤—ã–π —Ö–µ—à: ${newHash}`);
    const newHashCheck = await bcrypt.compare(testPassword, newHash);
    console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ö–µ—à–∞: ${newHashCheck ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log('');
    
    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ bcrypt
    console.log('4Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ bcrypt...');
    console.log(`   –í–µ—Ä—Å–∏—è bcrypt: ${require('bcryptjs/package.json').version}`);
    console.log('');
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (isValidPassword) {
      console.log('üéâ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –î–û–õ–ñ–ù–ê –ü–†–û–ô–¢–ò –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('‚ùå –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–¢ - –ü–†–û–ë–õ–ï–ú–ê –° –ü–ê–†–û–õ–ï–ú!');
    }
    
    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    await pool.end();
  }
}

testLogin().catch(console.error);