const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å approval_status...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.text();
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      status: response.status,
      ok: response.ok,
      data: jsonData
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message);
    return { error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async function fixApprovalStatus() {
  console.log('\n1. üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å approval_status...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authFilePath = path.join(__dirname, 'src', 'app', 'api', 'auth', 'login', 'route.ts');
  
  if (fs.existsSync(authFilePath)) {
    const authContent = fs.readFileSync(authFilePath, 'utf8');
    console.log('üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /api/auth/login/route.ts');
    
    if (authContent.includes('approval_status')) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ approval_status –≤ –∫–æ–¥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupPath = authFilePath + '.backup';
      fs.copyFileSync(authFilePath, backupPath);
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: route.ts.backup');
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('\n2. üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      
      const fixedAuthContent = authContent.replace(
        /if \(user\.approval_status !== 'approved'\) \{[\s\S]*?\}/g,
        `// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ approval_status
        // if (user.approval_status !== 'approved') {
        //   return NextResponse.json(
        //     { error: '–ê–∫–∫–∞—É–Ω—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' },
        //     { status: 403 }
        //   );
        // }`
      );
      
      fs.writeFileSync(authFilePath, fixedAuthContent, 'utf8');
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ approval_status –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–¥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } else {
      console.log('‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ approval_status –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }
  } else {
    console.log('‚ùå –§–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  console.log('\n3. üóÉÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const updateDbScript = `
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –∏–∑ .env
const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME || 'encore_tasks',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'password'
});

async function updateUserApprovalStatus() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–∞ 'approved'
    const updateQuery = \`
      UPDATE users 
      SET approval_status = 'approved', updated_at = NOW()
      WHERE approval_status = 'pending'
      RETURNING id, email, approval_status
    \`;
    
    const result = await pool.query(updateQuery);
    
    console.log(\`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: \${result.rowCount}\`);
    
    if (result.rows.length > 0) {
      console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      result.rows.forEach(user => {
        console.log(\`  - \${user.email} (\${user.id}) -> \${user.approval_status}\`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const checkQuery = 'SELECT id, email, approval_status FROM users ORDER BY created_at DESC LIMIT 10';
    const checkResult = await pool.query(checkQuery);
    
    console.log('\nüìä –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    checkResult.rows.forEach(user => {
      console.log(\`  - \${user.email}: \${user.approval_status}\`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  } finally {
    await pool.end();
  }
}

updateUserApprovalStatus();
`;
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
  const updateDbPath = path.join(__dirname, 'update-approval-status.js');
  fs.writeFileSync(updateDbPath, updateDbScript, 'utf8');
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: update-approval-status.js');
  
  console.log('\n4. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
  const baseUrl = 'http://localhost:3000';
  const loginData = {
    email: 'test@example.com',
    password: 'password123'
  };
  
  console.log('üì§ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π...');
  const loginResponse = await makeRequest(`${baseUrl}/api/auth/login`, {
    method: 'POST',
    body: JSON.stringify(loginData)
  });
  
  console.log('üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞:', {
    status: loginResponse.status,
    ok: loginResponse.ok,
    hasToken: loginResponse.data?.token ? '–¥–∞' : '–Ω–µ—Ç',
    error: loginResponse.data?.error || '–Ω–µ—Ç'
  });
  
  if (loginResponse.ok && loginResponse.data?.token) {
    console.log('üéâ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    
    const authHeaders = {
      'Authorization': `Bearer ${loginResponse.data.token}`
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profileResponse = await makeRequest(`${baseUrl}/api/auth/me`, {
      headers: authHeaders
    });
    
    console.log('üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      status: profileResponse.status,
      ok: profileResponse.ok,
      hasUser: profileResponse.data?.user ? '–¥–∞' : '–Ω–µ—Ç'
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectsResponse = await makeRequest(`${baseUrl}/api/projects`, {
      headers: authHeaders
    });
    
    console.log('üìÅ –ü—Ä–æ–µ–∫—Ç—ã:', {
      status: projectsResponse.status,
      ok: projectsResponse.ok,
      count: Array.isArray(projectsResponse.data) ? projectsResponse.data.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    });
    
    if (profileResponse.ok && projectsResponse.ok) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.');
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
  } else {
    console.log('\n‚ùå –í—Ö–æ–¥ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node update-approval-status.js');
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixApprovalStatus().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', error);
});