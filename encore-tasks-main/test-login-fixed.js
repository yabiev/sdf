const puppeteer = require('puppeteer');

const BASE_URL = 'http://localhost:3001';
const TEST_USER = {
  email: 'test@example.com',
  password: 'password123'
};

async function testLogin() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
  
  const browser = await puppeteer.launch({
    headless: false,
    devtools: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  page.on('console', msg => {
    console.log('üñ•Ô∏è  BROWSER:', msg.text());
  });
  
  try {
    console.log('üìç –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    await page.goto(BASE_URL, { waitUntil: 'networkidle2' });
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞...');
    
    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
    const loginSelectors = [
      'button:contains("–í—Ö–æ–¥")',
      'button:contains("–í–æ–π—Ç–∏")',
      'button:contains("Login")',
      '[data-testid="login-button"]',
      '.login-button',
      'button[type="submit"]'
    ];
    
    let loginButton = null;
    for (const selector of loginSelectors) {
      try {
        if (selector.includes(':contains')) {
          // –î–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å :contains –∏—Å–ø–æ–ª—å–∑—É–µ–º XPath
          const text = selector.match(/"([^"]+)"/)[1];
          const xpath = `//button[contains(text(), "${text}")]`;
          const elements = await page.$x(xpath);
          if (elements.length > 0) {
            loginButton = elements[0];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: "${text}"`);
            break;
          }
        } else {
          loginButton = await page.$(selector);
          if (loginButton) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
            break;
          }
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (!loginButton) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏...');
      const buttons = await page.$$eval('button', buttons => 
        buttons.map(btn => ({ text: btn.textContent?.trim(), className: btn.className }))
      );
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:', buttons);
      return;
    }
    
    console.log('üëÜ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞...');
    await loginButton.click();
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    
    // –ò—â–µ–º –ø–æ–ª–µ email
    const emailSelectors = [
      'input[type="email"]',
      'input[name="email"]',
      'input[placeholder*="email"]',
      'input[placeholder*="Email"]',
      '#email'
    ];
    
    let emailInput = null;
    for (const selector of emailSelectors) {
      emailInput = await page.$(selector);
      if (emailInput) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: ${selector}`);
        break;
      }
    }
    
    if (!emailInput) {
      console.log('‚ùå –ü–æ–ª–µ email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
    const passwordSelectors = [
      'input[type="password"]',
      'input[name="password"]',
      '#password'
    ];
    
    let passwordInput = null;
    for (const selector of passwordSelectors) {
      passwordInput = await page.$(selector);
      if (passwordInput) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: ${selector}`);
        break;
      }
    }
    
    if (!passwordInput) {
      console.log('‚ùå –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞...');
    await emailInput.type(TEST_USER.email);
    await passwordInput.type(TEST_USER.password);
    
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã...');
    const submitSelectors = [
      'button[type="submit"]',
      'button:contains("–í–æ–π—Ç–∏")',
      'button:contains("–í—Ö–æ–¥")',
      'button:contains("Login")',
      '.submit-button'
    ];
    
    let submitButton = null;
    for (const selector of submitSelectors) {
      try {
        if (selector.includes(':contains')) {
          const text = selector.match(/"([^"]+)"/)[1];
          const xpath = `//button[contains(text(), "${text}")]`;
          const elements = await page.$x(xpath);
          if (elements.length > 0) {
            submitButton = elements[0];
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É: "${text}"`);
            break;
          }
        } else {
          submitButton = await page.$(selector);
          if (submitButton) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
            break;
          }
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (!submitButton) {
      console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log('üëÜ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');
    await submitButton.click();
    
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const currentUrl = page.url();
    console.log('üìç URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', currentUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
    const cookies = await page.cookies();
    const authCookie = cookies.find(c => c.name.includes('auth'));
    console.log('üç™ Auth cookie:', authCookie ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const localStorage = await page.evaluate(() => {
      const items = {};
      for (let i = 0; i < window.localStorage.length; i++) {
        const key = window.localStorage.key(i);
        if (key) items[key] = window.localStorage.getItem(key);
      }
      return items;
    });
    console.log('üíæ LocalStorage:', localStorage);
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const authElements = [
      'button:contains("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")',
      'button:contains("New Project")',
      'button:contains("–í—ã—Ö–æ–¥")',
      'button:contains("Logout")',
      '.user-menu',
      '.project-create-button'
    ];
    
    let foundAuthElement = false;
    for (const selector of authElements) {
      try {
        if (selector.includes(':contains')) {
          const text = selector.match(/"([^"]+)"/)[1];
          const xpath = `//button[contains(text(), "${text}")]`;
          const elements = await page.$x(xpath);
          if (elements.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${text}"`);
            foundAuthElement = true;
            break;
          }
        } else {
          const element = await page.$(selector);
          if (element) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${selector}`);
            foundAuthElement = true;
            break;
          }
        }
      } catch (e) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    if (foundAuthElement) {
      console.log('üéâ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!');
    } else {
      console.log('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    console.log('‚è≥ –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 10000));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  } finally {
    await browser.close();
  }
}

testLogin().catch(console.error);