const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BASE_URL = 'http://localhost:3002';
const TEST_USER = {
  email: 'test@example.com',
  password: 'password123'
};

let authToken = null;
let validBoardId = null;
let validColumnId = null;
let validTaskId = null;

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {
  total: 0,
  success: 0,
  failed: 0,
  errors: [],
  timings: {}
};

// HTTP –∑–∞–ø—Ä–æ—Å —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
function makeRequest(method, path, data = null, headers = {}) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    const options = {
      hostname: 'localhost',
      port: 3002,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        ...headers
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            status: res.statusCode,
            data: parsedData,
            responseTime: responseTime,
            headers: res.headers
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: responseData,
            responseTime: responseTime,
            headers: res.headers
          });
        }
      });
    });

    req.on('error', (err) => {
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      reject({
        error: err.message,
        responseTime: responseTime
      });
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
function logTestResult(testName, method, endpoint, result, expectedStatus = 200) {
  stats.total++;
  
  const timing = result.responseTime || 0;
  stats.timings[`${method} ${endpoint}`] = timing;
  
  if (result.error) {
    stats.failed++;
    stats.errors.push(`${testName}: ${result.error}`);
    console.log(`   ‚ùå ${method} ${endpoint} - –û–®–ò–ë–ö–ê: ${result.error} (${timing}ms)`);
    return false;
  }
  
  const isSuccess = result.status >= 200 && result.status < 300;
  const isExpected = result.status === expectedStatus;
  
  if (isSuccess && isExpected) {
    stats.success++;
    console.log(`   ‚úÖ ${method} ${endpoint} - OK (${result.status}, ${timing}ms)`);
    return true;
  } else if (result.status === 400) {
    stats.failed++;
    stats.errors.push(`${testName}: –û—à–∏–±–∫–∞ 400 - ${JSON.stringify(result.data)}`);
    console.log(`   ‚ùå ${method} ${endpoint} - –û–®–ò–ë–ö–ê 400 (${timing}ms)`);
    console.log(`      üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(result.data).substring(0, 100)}...`);
    return false;
  } else if (result.status === 500) {
    stats.failed++;
    stats.errors.push(`${testName}: –û—à–∏–±–∫–∞ 500 - ${JSON.stringify(result.data)}`);
    console.log(`   ‚ùå ${method} ${endpoint} - –û–®–ò–ë–ö–ê 500 (${timing}ms)`);
    console.log(`      üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(result.data).substring(0, 100)}...`);
    return false;
  } else {
    stats.failed++;
    stats.errors.push(`${testName}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å ${result.status}`);
    console.log(`   ‚ùå ${method} ${endpoint} - –°—Ç–∞—Ç—É—Å ${result.status} (${timing}ms)`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runFinalCheck() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• API ENDPOINTS');
  console.log('==================================================\n');
  
  try {
    // 1. AUTH API
    console.log('üîê 1. –¢–µ—Å—Ç–∏—Ä—É—é AUTH API...');
    
    const loginResult = await makeRequest('POST', '/api/auth/login', TEST_USER);
    if (logTestResult('AUTH LOGIN', 'POST', '/api/auth/login', loginResult)) {
      if (loginResult.data && loginResult.data.token) {
        authToken = loginResult.data.token;
        console.log('   üîë –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω');
      }
    }
    
    // 2. PROJECTS API
    console.log('\nüìÅ 2. –¢–µ—Å—Ç–∏—Ä—É—é PROJECTS API...');
    
    const headers = authToken ? { 'Authorization': `Bearer ${authToken}` } : {};
    
    const projectsGetResult = await makeRequest('GET', '/api/projects', null, headers);
    logTestResult('PROJECTS GET', 'GET', '/api/projects', projectsGetResult);
    
    // 3. BOARDS API
    console.log('\nüìã 3. –¢–µ—Å—Ç–∏—Ä—É—é BOARDS API...');
    
    const boardsGetResult = await makeRequest('GET', '/api/boards', null, headers);
    if (logTestResult('BOARDS GET', 'GET', '/api/boards', boardsGetResult)) {
      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–æ—Å–∫—É
      if (boardsGetResult.data && boardsGetResult.data.data && boardsGetResult.data.data.boards && boardsGetResult.data.data.boards.length > 0) {
        validBoardId = boardsGetResult.data.data.boards[0].id;
        console.log(`   üìå –ù–∞–π–¥–µ–Ω–∞ –¥–æ—Å–∫–∞ —Å ID: ${validBoardId}`);
      }
    }
    
    // 4. COLUMNS API
    console.log('\nüìÇ 4. –¢–µ—Å—Ç–∏—Ä—É—é COLUMNS API...');
    
    if (validBoardId) {
      const columnsGetResult = await makeRequest('GET', `/api/columns?board_id=${validBoardId}`, null, headers);
      logTestResult('COLUMNS GET', 'GET', '/api/columns', columnsGetResult);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
      const newColumn = {
        title: 'Test Column Final Check',
        board_id: validBoardId,
        position: 0
      };
      
      const columnsPostResult = await makeRequest('POST', '/api/columns', newColumn, headers);
      if (logTestResult('COLUMNS POST', 'POST', '/api/columns', columnsPostResult, 201)) {
        if (columnsPostResult.data && columnsPostResult.data.data && columnsPostResult.data.data.id) {
          validColumnId = columnsPostResult.data.data.id;
          console.log(`   üìå –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å ID: ${validColumnId}`);
        }
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞)
      if (validColumnId) {
        const columnsDeleteResult = await makeRequest('DELETE', `/api/columns/${validColumnId}`, null, headers);
        logTestResult('COLUMNS DELETE', 'DELETE', `/api/columns/${validColumnId}`, columnsDeleteResult);
      }
    } else {
      console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã COLUMNS - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
    }
    
    // 5. TASKS API
    console.log('\nüìù 5. –¢–µ—Å—Ç–∏—Ä—É—é TASKS API...');
    
    if (validBoardId) {
      const tasksGetResult = await makeRequest('GET', `/api/tasks?board_id=${validBoardId}`, null, headers);
      logTestResult('TASKS GET', 'GET', '/api/tasks', tasksGetResult);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞)
      if (validColumnId) {
        const newTask = {
          title: 'Test Task Final Check',
          description: 'Test task for final API check',
          column_id: validColumnId,
          position: 0
        };
        
        const tasksPostResult = await makeRequest('POST', '/api/tasks', newTask, headers);
        if (logTestResult('TASKS POST', 'POST', '/api/tasks', tasksPostResult, 201)) {
          if (tasksPostResult.data && tasksPostResult.data.data && tasksPostResult.data.data.id) {
            validTaskId = tasksPostResult.data.data.id;
            console.log(`   üìå –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å ID: ${validTaskId}`);
          }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∞)
        if (validTaskId) {
          const tasksDeleteResult = await makeRequest('DELETE', `/api/tasks/${validTaskId}`, null, headers);
          logTestResult('TASKS DELETE', 'DELETE', `/api/tasks/${validTaskId}`, tasksDeleteResult);
        }
      }
    } else {
      console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã TASKS - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
    }
    
  } catch (error) {
    console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    stats.failed++;
    stats.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\n==================================================');
  console.log('üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –°–¢–ê–¢–£–°–ï –ö–ê–ñ–î–û–ì–û ENDPOINT:');
  console.log('==================================================');
  
  console.log('\n‚è±Ô∏è  –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê –ö–ê–ñ–î–û–ì–û API:');
  Object.entries(stats.timings).forEach(([endpoint, time]) => {
    const status = time < 100 ? 'üü¢' : time < 500 ? 'üü°' : 'üî¥';
    console.log(`   ${status} ${endpoint}: ${time}ms`);
  });
  
  console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.success}`);
  console.log(`   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.failed}`);
  console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.total}`);
  console.log(`   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((stats.success / stats.total) * 100)}%`);
  
  if (stats.errors.length > 0) {
    console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò:');
    stats.errors.forEach((error, index) => {
      console.log(`   ${index + 1}. ${error}`);
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ 400 –∏ 500
  const has400Errors = stats.errors.some(error => error.includes('400'));
  const has500Errors = stats.errors.some(error => error.includes('500'));
  
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:');
  console.log(`   ${has400Errors ? '‚ùå' : '‚úÖ'} –û—à–∏–±–∫–∏ 400 (Bad Request): ${has400Errors ? '–û–ë–ù–ê–†–£–ñ–ï–ù–´' : '–ù–ï–¢'}`);
  console.log(`   ${has500Errors ? '‚ùå' : '‚úÖ'} –û—à–∏–±–∫–∏ 500 (Server Error): ${has500Errors ? '–û–ë–ù–ê–†–£–ñ–ï–ù–´' : '–ù–ï–¢'}`);
  
  // –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
  console.log('\n==================================================');
  if (stats.failed === 0) {
    console.log('üéâ –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
  } else if (stats.success > stats.failed) {
    console.log('‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û API –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´');
  } else {
    console.log('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° API!');
  }
  
  console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

runFinalCheck().catch(console.error);