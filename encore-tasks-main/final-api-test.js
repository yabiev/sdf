const http = require('http');

const BASE_URL = 'http://localhost:3001';
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImVtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsInRpbWVzdGFtcCI6MTc1NzE1NDg3NTM1MCwicmFuZG9tIjoiandoYm1jdG81MiIsImlhdCI6MTc1NzE1NDg3NSwiZXhwIjoxNzU3NzU5Njc1fQ.EiOIYsAqC82DundGe4rMtKM37sBUplv2gS6NbLFv9m8';

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: method,
      headers: {
        'Authorization': `Bearer ${TEST_TOKEN}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonBody = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonBody, headers: res.headers });
        } catch (e) {
          resolve({ status: res.statusCode, data: body, headers: res.headers });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Request timeout'));
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function runFinalAPITest() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê API ENDPOINTS');
  console.log('=' .repeat(50));
  
  const results = {
    successful: 0,
    failed: 0,
    errors: []
  };

  // 1. AUTH API Test
  console.log('\nüîê 1. –¢–µ—Å—Ç–∏—Ä—É—é AUTH API...');
  try {
    const authData = {
      email: 'test@example.com',
      password: 'password123'
    };
    const authResult = await makeRequest('/api/auth/login', 'POST', authData);
    if (authResult.status === 200) {
      console.log('   ‚úÖ POST /api/auth/login - OK');
      results.successful++;
    } else {
      console.log(`   ‚ùå POST /api/auth/login - –°—Ç–∞—Ç—É—Å ${authResult.status}`);
      results.failed++;
      results.errors.push(`AUTH: ${authResult.status}`);
    }
  } catch (error) {
    console.log(`   üí• POST /api/auth/login - –û—à–∏–±–∫–∞: ${error.message}`);
    results.failed++;
    results.errors.push(`AUTH: ${error.message}`);
  }

  // 2. PROJECTS API Test
  console.log('\nüìÅ 2. –¢–µ—Å—Ç–∏—Ä—É—é PROJECTS API...');
  try {
    const projectsResult = await makeRequest('/api/projects');
    if (projectsResult.status === 200) {
      console.log('   ‚úÖ GET /api/projects - OK');
      results.successful++;
    } else {
      console.log(`   ‚ùå GET /api/projects - –°—Ç–∞—Ç—É—Å ${projectsResult.status}`);
      results.failed++;
      results.errors.push(`PROJECTS: ${projectsResult.status}`);
    }
  } catch (error) {
    console.log(`   üí• GET /api/projects - –û—à–∏–±–∫–∞: ${error.message}`);
    results.failed++;
    results.errors.push(`PROJECTS: ${error.message}`);
  }

  // 3. BOARDS API Test
  console.log('\nüìã 3. –¢–µ—Å—Ç–∏—Ä—É—é BOARDS API...');
  let validBoardId = null;
  try {
    const boardsResult = await makeRequest('/api/boards');
    if (boardsResult.status === 200) {
      console.log('   ‚úÖ GET /api/boards - OK');
      results.successful++;
      
      // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–æ—Å–∫—É
      if (boardsResult.data && boardsResult.data.data && boardsResult.data.data.boards && boardsResult.data.data.boards.length > 0) {
        validBoardId = boardsResult.data.data.boards[0].id;
        console.log(`   üìå –ù–∞–π–¥–µ–Ω–∞ –¥–æ—Å–∫–∞ —Å ID: ${validBoardId}`);
        console.log(`   üìä –í—Å–µ–≥–æ –¥–æ—Å–æ–∫: ${boardsResult.data.data.boards.length}`);
      }
    } else {
      console.log(`   ‚ùå GET /api/boards - –°—Ç–∞—Ç—É—Å ${boardsResult.status}`);
      results.failed++;
      results.errors.push(`BOARDS: ${boardsResult.status}`);
    }
  } catch (error) {
    console.log(`   üí• GET /api/boards - –û—à–∏–±–∫–∞: ${error.message}`);
    results.failed++;
    results.errors.push(`BOARDS: ${error.message}`);
  }

  // 4. COLUMNS API Test (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π board_id)
  console.log('\nüìÇ 4. –¢–µ—Å—Ç–∏—Ä—É—é COLUMNS API...');
  if (validBoardId) {
    try {
      const columnsResult = await makeRequest(`/api/columns?board_id=${validBoardId}`);
      if (columnsResult.status === 200) {
        console.log('   ‚úÖ GET /api/columns - OK');
        results.successful++;
      } else {
        console.log(`   ‚ùå GET /api/columns - –°—Ç–∞—Ç—É—Å ${columnsResult.status}`);
        results.failed++;
        results.errors.push(`COLUMNS GET: ${columnsResult.status}`);
      }
    } catch (error) {
      console.log(`   üí• GET /api/columns - –û—à–∏–±–∫–∞: ${error.message}`);
      results.failed++;
      results.errors.push(`COLUMNS GET: ${error.message}`);
    }

    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
    try {
      const newColumn = {
        title: 'Test Column ' + Date.now(),
        board_id: validBoardId,
        position: 0
      };
      const createColumnResult = await makeRequest('/api/columns', 'POST', newColumn);
      if (createColumnResult.status === 200 || createColumnResult.status === 201) {
        console.log('   ‚úÖ POST /api/columns - OK');
        results.successful++;
      } else {
        console.log(`   ‚ùå POST /api/columns - –°—Ç–∞—Ç—É—Å ${createColumnResult.status}`);
        results.failed++;
        results.errors.push(`COLUMNS POST: ${createColumnResult.status}`);
      }
    } catch (error) {
      console.log(`   üí• POST /api/columns - –û—à–∏–±–∫–∞: ${error.message}`);
      results.failed++;
      results.errors.push(`COLUMNS POST: ${error.message}`);
    }
  } else {
    console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç COLUMNS - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
    results.failed += 2;
    results.errors.push('COLUMNS: No valid board_id');
  }

  // 5. TASKS API Test
  console.log('\nüìù 5. –¢–µ—Å—Ç–∏—Ä—É—é TASKS API...');
  if (validBoardId) {
    try {
      const tasksResult = await makeRequest(`/api/tasks?board_id=${validBoardId}`);
      if (tasksResult.status === 200) {
        console.log('   ‚úÖ GET /api/tasks - OK');
        results.successful++;
      } else {
        console.log(`   ‚ùå GET /api/tasks - –°—Ç–∞—Ç—É—Å ${tasksResult.status}`);
        console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${JSON.stringify(tasksResult.data).substring(0, 200)}...`);
        results.failed++;
        results.errors.push(`TASKS GET: ${tasksResult.status}`);
      }
    } catch (error) {
      console.log(`   üí• GET /api/tasks - –û—à–∏–±–∫–∞: ${error.message}`);
      results.failed++;
      results.errors.push(`TASKS GET: ${error.message}`);
    }
  } else {
    console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç TASKS - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫');
    results.failed++;
    results.errors.push('TASKS: No valid board_id');
  }

  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(50));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${results.successful}`);
  console.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${results.failed}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((results.successful / (results.successful + results.failed)) * 100)}%`);
  
  if (results.errors.length > 0) {
    console.log('\nüö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
    results.errors.forEach((error, i) => {
      console.log(`   ${i + 1}. ${error}`);
    });
  }
  
  if (results.failed === 0) {
    console.log('\nüéâ –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
  } else if (results.successful > results.failed) {
    console.log('\n‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û API –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´');
  } else {
    console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° API!');
  }
  
  console.log('\nüèÅ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

runFinalAPITest().catch(console.error);