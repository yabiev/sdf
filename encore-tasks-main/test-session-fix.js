const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    const data = await response.text();
    let jsonData;
    try {
      jsonData = JSON.parse(data);
    } catch {
      jsonData = data;
    }
    
    return {
      status: response.status,
      ok: response.ok,
      data: jsonData,
      headers: Object.fromEntries(response.headers.entries())
    };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message);
    return { error: error.message };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testSessionSystem() {
  const baseUrl = 'http://localhost:3000';
  
  console.log('\n1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
  const healthCheck = await makeRequest(`${baseUrl}/api/health`);
  if (healthCheck.error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ npm run dev –∑–∞–ø—É—â–µ–Ω.');
    return;
  }
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
  
  console.log('\n2. üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...');
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const loginData = {
    email: 'test@example.com',
    password: 'password123'
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥...');
  const loginResponse = await makeRequest(`${baseUrl}/api/auth/login`, {
    method: 'POST',
    body: JSON.stringify(loginData)
  });
  
  console.log('üì• –û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥:', {
    status: loginResponse.status,
    ok: loginResponse.ok,
    hasToken: loginResponse.data?.token ? '–¥–∞' : '–Ω–µ—Ç'
  });
  
  if (!loginResponse.ok) {
    console.log('‚ö†Ô∏è –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', loginResponse.data);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìù –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerResponse = await makeRequest(`${baseUrl}/api/auth/register`, {
      method: 'POST',
      body: JSON.stringify({
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User'
      })
    });
    
    console.log('üì• –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', {
      status: registerResponse.status,
      ok: registerResponse.ok
    });
    
    if (registerResponse.ok) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
      const retryLogin = await makeRequest(`${baseUrl}/api/auth/login`, {
        method: 'POST',
        body: JSON.stringify(loginData)
      });
      
      if (retryLogin.ok && retryLogin.data?.token) {
        console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        await testAuthenticatedRequests(baseUrl, retryLogin.data.token);
      } else {
        console.log('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    }
    return;
  }
  
  if (loginResponse.data?.token) {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    await testAuthenticatedRequests(baseUrl, loginResponse.data.token);
  } else {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
  }
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function testAuthenticatedRequests(baseUrl, token) {
  console.log('\n3. üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
  
  const authHeaders = {
    'Authorization': `Bearer ${token}`
  };
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  const profileResponse = await makeRequest(`${baseUrl}/api/auth/me`, {
    headers: authHeaders
  });
  
  console.log('üì• –û—Ç–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è:', {
    status: profileResponse.status,
    ok: profileResponse.ok,
    hasUser: profileResponse.data?.user ? '–¥–∞' : '–Ω–µ—Ç'
  });
  
  // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
  console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
  const projectsResponse = await makeRequest(`${baseUrl}/api/projects`, {
    headers: authHeaders
  });
  
  console.log('üì• –û—Ç–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤:', {
    status: projectsResponse.status,
    ok: projectsResponse.ok,
    projectsCount: Array.isArray(projectsResponse.data) ? projectsResponse.data.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  });
  
  // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  const usersResponse = await makeRequest(`${baseUrl}/api/users`, {
    headers: authHeaders
  });
  
  console.log('üì• –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', {
    status: usersResponse.status,
    ok: usersResponse.ok,
    usersCount: Array.isArray(usersResponse.data) ? usersResponse.data.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  });
  
  // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã)
  if (projectsResponse.ok && Array.isArray(projectsResponse.data) && projectsResponse.data.length > 0) {
    const firstProject = projectsResponse.data[0];
    console.log(`\nüìã –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ ${firstProject.id}`);
    
    const boardsResponse = await makeRequest(`${baseUrl}/api/projects/${firstProject.id}/boards`, {
      headers: authHeaders
    });
    
    console.log('üì• –û—Ç–≤–µ—Ç –¥–æ—Å–æ–∫:', {
      status: boardsResponse.status,
      ok: boardsResponse.ok,
      boardsCount: Array.isArray(boardsResponse.data) ? boardsResponse.data.length : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  const tests = [
    { name: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', result: profileResponse.ok },
    { name: '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', result: projectsResponse.ok },
    { name: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', result: usersResponse.ok }
  ];
  
  const passedTests = tests.filter(t => t.result).length;
  const totalTests = tests.length;
  
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
  
  tests.forEach(test => {
    console.log(`${test.result ? '‚úÖ' : '‚ùå'} ${test.name}`);
  });
  
  if (passedTests === totalTests) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testSessionSystem().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
});