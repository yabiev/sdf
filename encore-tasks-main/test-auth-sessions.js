const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  const envPath = path.join(__dirname, '.env');
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    return {};
  }

  const envContent = fs.readFileSync(envPath, 'utf8');
  const env = {};
  
  envContent.split('\n').forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, ...valueParts] = trimmed.split('=');
      if (key && valueParts.length > 0) {
        env[key.trim()] = valueParts.join('=').trim().replace(/^["']|["']$/g, '');
      }
    }
  });
  
  return env;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestData() {
  const timestamp = Date.now();
  return {
    user: {
      email: `test_user_${timestamp}@example.com`,
      name: 'Test User',
      password_hash: crypto.createHash('sha256').update('test_password_123').digest('hex')
    },
    session: {
      token: crypto.randomBytes(32).toString('hex'),
      expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 –¥–Ω–µ–π
    }
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testAuthAndSessions() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏...');
  console.log('=' .repeat(60));

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const env = loadEnvFile();
  
  const config = {
    host: env.POSTGRES_HOST || 'localhost',
    port: parseInt(env.POSTGRES_PORT) || 5432,
    database: env.POSTGRES_DB || 'encore_tasks',
    user: env.POSTGRES_USER || 'postgres',
    password: env.POSTGRES_PASSWORD || ''
  };

  const pool = new Pool(config);
  let testUserId = null;
  let testSessionId = null;

  try {
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const testData = generateTestData();
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:');
    console.log(`   Email: ${testData.user.email}`);
    console.log(`   Name: ${testData.user.name}`);
    console.log(`   Session Token: ${testData.session.token.substring(0, 16)}...`);
    console.log('');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const createUserResult = await client.query(`
         INSERT INTO users (email, name, password_hash, created_at, updated_at)
         VALUES ($1, $2, $3, NOW(), NOW())
         RETURNING id, email, created_at
       `, [
          testData.user.email,
          testData.user.name,
          testData.user.password_hash
        ]);
      
      testUserId = createUserResult.rows[0].id;
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testUserId}`);
      console.log(`   Email: ${createUserResult.rows[0].email}`);
      console.log(`   Name: ${testData.user.name}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${createUserResult.rows[0].created_at}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
      throw error;
    }

    // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    console.log('\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email...');
    try {
      const findUserResult = await client.query(`
        SELECT id, email, name, password_hash, created_at, updated_at
        FROM users 
        WHERE email = $1
      `, [testData.user.email]);
      
      if (findUserResult.rows.length > 0) {
        const user = findUserResult.rows[0];
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:`);
        console.log(`   ID: ${user.id}`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Name: ${user.name}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${user.created_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        const passwordMatch = user.password_hash === testData.user.password_hash;
        console.log(`   –ü–∞—Ä–æ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç: ${passwordMatch ? '‚úÖ' : '‚ùå'}`);
      } else {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    console.log('\nüé´ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏...');
    try {
      const createSessionResult = await client.query(`
        INSERT INTO sessions (token, user_id, expires_at, created_at)
        VALUES ($1, $2, $3, NOW())
        RETURNING id, token, user_id, expires_at, created_at
      `, [
        testData.session.token,
        testUserId,
        testData.session.expires_at
      ]);
      
      testSessionId = createSessionResult.rows[0].id;
      console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`);
      console.log(`   ID: ${testSessionId}`);
      console.log(`   Token: ${createSessionResult.rows[0].token.substring(0, 16)}...`);
      console.log(`   User ID: ${createSessionResult.rows[0].user_id}`);
      console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${createSessionResult.rows[0].expires_at}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${createSessionResult.rows[0].created_at}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: ${error.message}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    console.log('\n‚úÖ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏...');
    try {
      const validateSessionResult = await client.query(`
        SELECT s.id, s.token, s.user_id, s.expires_at, s.created_at,
               u.email, u.name
        FROM sessions s
        JOIN users u ON s.user_id = u.id
        WHERE s.token = $1 AND s.expires_at > NOW()
      `, [testData.session.token]);
      
      if (validateSessionResult.rows.length > 0) {
        const session = validateSessionResult.rows[0];
        console.log(`‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞:`);
        console.log(`   Session ID: ${session.id}`);
        console.log(`   User ID: ${session.user_id}`);
        console.log(`   Email: ${session.email}`);
        console.log(`   Name: ${session.name}`);
        console.log(`   –ò—Å—Ç–µ–∫–∞–µ—Ç: ${session.expires_at}`);
      } else {
        console.error('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: ${error.message}`);
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìä –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    try {
      const userSessionsResult = await client.query(`
        SELECT id, token, expires_at, created_at
        FROM sessions 
        WHERE user_id = $1 AND expires_at > NOW()
        ORDER BY created_at DESC
      `, [testUserId]);
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${userSessionsResult.rows.length}`);
      userSessionsResult.rows.forEach((session, index) => {
        console.log(`   ${index + 1}. ID: ${session.id}, Token: ${session.token.substring(0, 16)}..., –ò—Å—Ç–µ–∫–∞–µ—Ç: ${session.expires_at}`);
      });
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: ${error.message}`);
    }

    // –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    console.log('\nüîÑ –¢–µ—Å—Ç 6: –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏...');
    try {
      // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ last_activity –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      await client.query(`
        ALTER TABLE sessions 
        ADD COLUMN IF NOT EXISTS last_activity TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      `);
      
      const updateActivityResult = await client.query(`
        UPDATE sessions 
        SET last_activity = NOW()
        WHERE id = $1
        RETURNING id, last_activity
      `, [testSessionId]);
      
      if (updateActivityResult.rows.length > 0) {
        console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`);
        console.log(`   Session ID: ${updateActivityResult.rows[0].id}`);
        console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${updateActivityResult.rows[0].last_activity}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`);
    }

    // –û—á–∏—Å—Ç–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      if (testSessionId) {
        await client.query('DELETE FROM sessions WHERE id = $1', [testSessionId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞');
      }
      
      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (testUserId) {
        await client.query('DELETE FROM users WHERE id = $1', [testUserId]);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`);
    }

    client.release();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò:');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–π: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏: –£–°–ü–ï–®–ù–û');
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û');
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.error(`   ${error.message}`);
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü users –∏ sessions');
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º');
    console.log('   4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ');
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testAuthAndSessions()
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
}

module.exports = { testAuthAndSessions };