const fs = require('fs');
const path = require('path');

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
console.log('\n1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  console.log('üìÑ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
  
  if (envContent.includes('postgresql://')) {
    console.log('‚ö†Ô∏è .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ PostgreSQL');
  }
  
  if (envContent.includes('DATABASE_URL')) {
    console.log('üîó DATABASE_URL –Ω–∞–π–¥–µ–Ω –≤ .env');
  }
} else {
  console.log('‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º database-adapter.ts
const adapterPath = path.join(__dirname, 'src', 'lib', 'database-adapter.ts');
if (fs.existsSync(adapterPath)) {
  const adapterContent = fs.readFileSync(adapterPath, 'utf8');
  console.log('üìÑ database-adapter.ts –Ω–∞–π–¥–µ–Ω');
  
  if (adapterContent.includes("currentDatabase: DatabaseType = 'sqlite'")) {
    console.log('‚ö†Ô∏è database-adapter.ts –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite');
  }
  
  if (adapterContent.includes('SQLiteAdapterOptimized')) {
    console.log('üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLiteAdapterOptimized');
  }
} else {
  console.log('‚ùå database-adapter.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
const dbPath = path.join(__dirname, 'database.db');
if (fs.existsSync(dbPath)) {
  console.log('‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: database.db');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
  const stats = fs.statSync(dbPath);
  console.log(`üìä –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${(stats.size / 1024).toFixed(2)} KB`);
} else {
  console.log('‚ùå SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// 3. –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é database-adapter.ts
console.log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

const fixedAdapterContent = `// =====================================================
// –ê–î–ê–ü–¢–ï–† –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–• (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
// =====================================================

import { User, Project, Board, Column, Task, Session } from '@/types';
import SQLiteAdapterOptimized from './sqlite-adapter-optimized';

// =====================================================
// –¢–ò–ü–´ –î–ê–ù–ù–´–•
// =====================================================

export type DatabaseType = 'sqlite';

export interface DatabaseStatus {
  sqlite: boolean;
  current: DatabaseType;
}

// =====================================================
// –ö–õ–ê–°–° –ê–î–ê–ü–¢–ï–†–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
// =====================================================

export class DatabaseAdapter {
  private static instance: DatabaseAdapter;
  private currentDatabase: DatabaseType = 'sqlite';
  private isInitialized = false;
  private sqliteAdapter: SQLiteAdapterOptimized;

  private constructor() {
    this.sqliteAdapter = SQLiteAdapterOptimized.getInstance();
    this.currentDatabase = 'sqlite';
  }

  public static getInstance(): DatabaseAdapter {
    if (!DatabaseAdapter.instance) {
      DatabaseAdapter.instance = new DatabaseAdapter();
    }
    return DatabaseAdapter.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SQLite
      await this.sqliteAdapter.initialize();
      this.currentDatabase = 'sqlite';
      console.log('üéØ Database Adapter: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite');

      this.isInitialized = true;
      console.log('‚úÖ Database Adapter: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå Database Adapter: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLite:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public async getDatabaseStatus(): Promise<DatabaseStatus> {
    const sqlite = await Promise.resolve(this.sqliteAdapter.initialize()).then(() => true).catch(() => false);
    
    return {
      sqlite,
      current: this.currentDatabase
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  public getCurrentDatabase(): DatabaseType {
    return this.currentDatabase;
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async createUser(userData: Omit<User, 'id' | 'created_at' | 'updated_at'>): Promise<User> {
    await this.initialize();
    return await this.sqliteAdapter.createUser(userData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  public async getUserById(id: string): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.getUserById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  public async getUserByEmail(email: string): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.getUserByEmail(email);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public async getAllUsers(): Promise<User[]> {
    await this.initialize();
    return await this.sqliteAdapter.getAllUsers();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async updateUser(id: string, updates: Partial<User>): Promise<User | null> {
    await this.initialize();
    return await this.sqliteAdapter.updateUser(id, updates);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async deleteUser(id: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteUser(id);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –°–ï–°–°–ò–Ø–ú–ò (–ò–°–ü–†–ê–í–õ–ï–ù–û)
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  public async createSession(sessionData: Omit<Session, 'id' | 'created_at'>): Promise<Session> {
    await this.initialize();
    console.log('üîê DatabaseAdapter: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ SQLite –∞–¥–∞–ø—Ç–µ—Ä');
    return await this.sqliteAdapter.createSession(sessionData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  public async getSessionByToken(token: string): Promise<Session | null> {
    await this.initialize();
    console.log('üîç DatabaseAdapter: –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ SQLite –∞–¥–∞–ø—Ç–µ—Ä');
    const session = await this.sqliteAdapter.getSessionByToken(token);
    console.log('üìä DatabaseAdapter: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', session ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return session;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   */
  public async updateSessionActivity(token: string): Promise<boolean> {
    await this.initialize();
    // –î–ª—è SQLite –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    return true;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   */
  public async deleteSession(token: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteSession(token);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ü–†–û–ï–ö–¢–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async createProject(projectData: Omit<Project, 'id' | 'created_at' | 'updated_at'>): Promise<Project> {
    await this.initialize();
    return await this.sqliteAdapter.createProject(projectData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
   */
  public async getProjectById(id: string): Promise<Project | null> {
    await this.initialize();
    return await this.sqliteAdapter.getProjectById(id);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
   */
  public async getAllProjects(): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getAllProjects();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  public async getUserProjects(userId: string): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getUserProjects(userId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
   */
  public async getProjectsByCreatorId(creatorId: string): Promise<Project[]> {
    await this.initialize();
    return await this.sqliteAdapter.getUserProjects(creatorId);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
   */
  public async hasProjectAccess(userId: string | number, projectId: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.hasProjectAccess(userId.toString(), projectId);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –î–û–°–ö–ê–ú–ò
  // =====================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
   */
  public async getProjectBoards(projectId: string): Promise<Board[]> {
    await this.initialize();
    return await this.sqliteAdapter.getBoardsByProjectId(projectId);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ö–û–õ–û–ù–ö–ê–ú–ò
  // =====================================================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–æ—Å–∫–∏
   */
  public async getBoardColumns(boardId: string): Promise<Column[]> {
    await this.initialize();
    return await this.sqliteAdapter.getColumnsByBoardId(boardId);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
   */
  public async createColumn(columnData: Omit<Column, 'id' | 'created_at' | 'updated_at'>): Promise<Column> {
    await this.initialize();
    return await this.sqliteAdapter.createColumn(columnData);
  }

  // =====================================================
  // –û–ü–ï–†–ê–¶–ò–ò –° –ó–ê–î–ê–ß–ê–ú–ò
  // =====================================================

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async createTask(taskData: Omit<Task, 'id' | 'created_at' | 'updated_at'>): Promise<Task> {
    await this.initialize();
    return await this.sqliteAdapter.createTask(taskData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–æ–ª–æ–Ω–∫–∏
   */
  public async getColumnTasks(columnId: string): Promise<Task[]> {
    await this.initialize();
    return await this.sqliteAdapter.getTasksByColumnId(columnId);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  public async deleteTask(id: string): Promise<boolean> {
    await this.initialize();
    return await this.sqliteAdapter.deleteTask(id);
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—ã—Ä–æ–≥–æ SQL –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏)
   */
  public async query(sql: string, params?: unknown[]): Promise<unknown[]> {
    await this.initialize();
    return await this.sqliteAdapter.query(sql, params);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const dbAdapter = DatabaseAdapter.getInstance();
`;

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
const backupPath = path.join(__dirname, 'src', 'lib', 'database-adapter.ts.backup');
if (fs.existsSync(adapterPath)) {
  fs.copyFileSync(adapterPath, backupPath);
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: database-adapter.ts.backup');
}

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
fs.writeFileSync(adapterPath, fixedAdapterContent, 'utf8');
console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω database-adapter.ts —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º');

// 4. –°–æ–∑–¥–∞–µ–º .env.sqlite –¥–ª—è SQLite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('\n4. –°–æ–∑–¥–∞–Ω–∏–µ .env.sqlite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');

const sqliteEnvContent = `# SQLite Database Configuration
DATABASE_TYPE=sqlite
SQLITE_DB_PATH=./database.db

# Application Configuration
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-nextauth-secret-key-here

# JWT Secret
JWT_SECRET=your-secret-key

# Session Configuration
SESSION_SECRET=your-session-secret-here
SESSION_EXPIRES_IN=7d

# File Upload Configuration
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# Development/Production Mode
NODE_ENV=development
`;

const sqliteEnvPath = path.join(__dirname, '.env.sqlite');
fs.writeFileSync(sqliteEnvPath, sqliteEnvContent, 'utf8');
console.log('‚úÖ –°–æ–∑–¥–∞–Ω .env.sqlite –¥–ª—è SQLite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');

console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Å—Å–∏–π –≤ –∫–æ–Ω—Å–æ–ª–∏');
console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞');
console.log('\nüí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SQLite –∞–¥–∞–ø—Ç–µ—Ä');