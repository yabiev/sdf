const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'encore_tasks',
  password: process.env.DB_PASSWORD || 'postgres',
  port: process.env.DB_PORT || 5432,
});

async function runMigration() {
  const client = await pool.connect();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã boards...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã boards
    const currentStructure = await client.query(`
      SELECT column_name, data_type, column_default, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'boards' 
      ORDER BY ordinal_position;
    `);
    
    console.log('üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã boards:');
    currentStructure.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (default: ${row.column_default || 'NULL'}, nullable: ${row.is_nullable})`);
    });
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, '007_update_boards_schema.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await client.query(migrationSQL);
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const updatedStructure = await client.query(`
      SELECT column_name, data_type, column_default, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'boards' 
      ORDER BY ordinal_position;
    `);
    
    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã boards:');
    updatedStructure.rows.forEach(row => {
      console.log(`  - ${row.column_name}: ${row.data_type} (default: ${row.column_default || 'NULL'}, nullable: ${row.is_nullable})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const countResult = await client.query('SELECT COUNT(*) FROM boards');
    console.log(`\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ boards: ${countResult.rows[0].count}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
runMigration()
  .then(() => {
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });